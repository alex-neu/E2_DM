
#Область ПодпискиНаСобытия

// Подписка на событие. Синхронизирует состояния в РС СостоянияВерсийЭД и СостоянияВерсийЭДДО
//
// Параметры:
//  Источник - РегистрСведенийНаборЗаписей.СостоянияВерсийЭД - Набор, из которого необходимо получить
//	 сведения о состоянии.
//	Отказ - Булево - Признак отказа от записи.
//	
//
Процедура СинхронизироватьСостоянияЭДДляДО(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Запись Из Источник.ЭтотОбъект Цикл
		Если Не ЗначениеЗаполнено(Запись.ЭлектронныйДокумент) 
			Или Не ТипЗнч(Запись.СсылкаНаОбъект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
			
			Продолжить;
		КонецЕсли;
				
		ЭДПрисоединенныйФайл = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(Запись.ЭлектронныйДокумент);
		НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДПрисоединенныйФайл,"НаправлениеЭД");
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ЭлектронныйДокумент, "Контрагент");
		ОбъектДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.СсылкаНаОбъект, "Владелец.ВладелецФайла");
		СостояниеПоЭДО = РегистрыСведений.СостояниеДокументовПоЭДО.ДанныеСостоянияДокументаПоЭДО(ОбъектДО);
		ТребуетсяПодтверждение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ЭлектронныйДокумент,
			"ТребуетсяПодтверждение");
		ТребуютсяДействияСНашейСтороны = (Запись.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия);
		
		Если Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение
			Или Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора
			Или Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю 
			Или Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПередачаОператору Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ОбъектДО, 
				Контрагент, 
				Перечисления.СостоянияВерсийЭДДО.Отправлен, 
				НаправлениеЭД);
				
		ИначеЕсли Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении 
			И Не ОбменСКонтрагентамиСлужебный.ЭтоСчетФактура(Запись.ЭлектронныйДокумент) Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ОбъектДО, 
				Контрагент, 
				Перечисления.СостоянияВерсийЭДДО.НаПодписи, 
				НаправлениеЭД);
			
		ИначеЕсли Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения
			И СостояниеПоЭДО <> Перечисления.СостоянияВерсийЭДДО.ОбменЗавершен
			И ТребуетсяПодтверждение Тогда
			
			РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
				ОбъектДО, 
				Контрагент, 
				Перечисления.СостоянияВерсийЭДДО.НаПодписи, 
				НаправлениеЭД);
			
		ИначеЕсли Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения
			И Не ТребуетсяПодтверждение Тогда
			
			Если ТребуютсяДействияСНашейСтороны Тогда
				РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
					ОбъектДО, 
					Контрагент, 
					Перечисления.СостоянияВерсийЭДДО.НаПодписи, 
					НаправлениеЭД);
			Иначе
				РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
					ОбъектДО, 
					Контрагент, 
					Перечисления.СостоянияВерсийЭДДО.ОбменЗавершен, 
					НаправлениеЭД);
			КонецЕсли;
			
		Иначе
			ИндексЗначения = Перечисления.СостоянияВерсийЭД.Индекс(Запись.СостояниеВерсииЭД);
			СостояниеЭД = Метаданные.Перечисления.СостоянияВерсийЭД.ЗначенияПеречисления[ИндексЗначения].Имя;
				
			Если Не Метаданные.Перечисления.СостоянияВерсийЭДДО.ЗначенияПеречисления.Найти(СостояниеЭД) = Неопределено Тогда
				
				РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
					ОбъектДО, 
					Контрагент, 
					Перечисления.СостоянияВерсийЭДДО[СостояниеЭД], 
					НаправлениеЭД);
					
			КонецЕсли; 
		КонецЕсли;
		
		Если Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				Или Запись.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
				
			ОбменСКонтрагентамиДОСлужебный.УстановитьСостояниеЗавершенПоОтклонению(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запись.ЭлектронныйДокумент));
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка - Имя справочника, объект которого надо найти.
//  ИмяРеквизита - Строка - Имя реквизита, по которому будет проведен поиск.
//  ЗначРеквизита - Произвольный - значение реквизита, по которому будет проведен поиск.
//  Результат - СправочникСсылка - Ссылка на найденный объект.
//  Владелец - СправочникСсылка - Ссылка на владельца для поиска в иерархическом справочнике.
//  ТолькоНеПомеченные - Булево - Исключить из поиска помеченные на удаление.
//
Процедура НайтиСсылкуНаОбъектПоРеквизиту(
	ИмяСправочника, 
	ИмяРеквизита, 
	ЗначРеквизита, 
	Результат, 
	Владелец = Неопределено,
	ТолькоНеПомеченные = Ложь) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИскСправочник.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ИскСправочник
		|ГДЕ
		|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	Если ТолькоНеПомеченные Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.ПометкаУдаления = Ложь";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск контактного лица контрагента по данным сертификата ЭП, при отсутствии добавляет новое.
//
Функция НайтиДобавитьКонтактноеЛицоИзСертификата(Контрагент, ДвоичныеДанныеСертификата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеСертификата) Тогда
		Возврат КонтактноеЛицо;
	КонецЕсли;
	
	Субъект = ЭлектроннаяПодписьКлиентСервер.СвойстваСубъектаСертификата(
		Новый СертификатКриптографии(ДвоичныеДанныеСертификата));
		
	Если Не Субъект.Свойство("ОбщееИмя") Тогда
		Возврат КонтактноеЛицо;		
	КонецЕсли;
	
	ФИОКонтактногоЛица = Новый Массив;
	Если ЗначениеЗаполнено(Субъект.Фамилия) Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.Фамилия);
	КонецЕсли;
	Если ЗначениеЗаполнено(Субъект.Имя) Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.Имя);
		
		Если ЗначениеЗаполнено(Субъект.Отчество) Тогда
			ФИОКонтактногоЛица.Добавить(Субъект.Отчество);
		КонецЕсли;	
	КонецЕсли;
	Если Не ФИОКонтактногоЛица.Количество() Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.ОбщееИмя);
	КонецЕсли;
	НаименованиеКонтактногоЛица = СтрСоединить(ФИОКонтактногоЛица, " ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец
		|	И НЕ КонтактныеЛица.ПометкаУдаления
		|	И КонтактныеЛица.Наименование = &Наименование";
		
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Наименование", НаименованиеКонтактногоЛица);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		// Добавляем новое контактное лицо
		КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицо.Владелец = Контрагент;
		КонтактноеЛицо.Наименование = НаименованиеКонтактногоЛица;
		Субъект.Свойство("Должность", КонтактноеЛицо.Должность);
		КонтактноеЛицо.Комментарий = НСтр("ru = 'Создан при загрузке ЭД.'");
		КонтактноеЛицо.ОбменДанными.Загрузка = Истина;
		КонтактноеЛицо.Записать();
		
		КонтактноеЛицо = КонтактноеЛицо.Ссылка;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		КонтактноеЛицо = Выборка.КонтактноеЛицо; 
		
	КонецЕсли;
			
	Возврат КонтактноеЛицо;
	
КонецФункции

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, ЛюбаяСсылка - документ или справочник источника.
//  ПараметрыЭД - Структура - параметры источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Знач Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Источник) 
			И Не (ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") И Источник.Свойство("Ссылка") 
					И ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Источник.Ссылка))
			И Не (ТипЗнч(Источник) = Тип("СправочникСсылка.ВерсииФайлов") 
					Или ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов")) Тогда
				
		Возврат;			
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		ЗаполнитьПараметрыЭДПоСсылке(Источник, ПараметрыЭД, ФорматCML);
	Иначе
		ЗаполнитьПараметрыЭДПоОбъекту(Источник, ПараметрыЭД, ФорматCML);
	КонецЕсли;
		
КонецПроцедуры

// Выполняется при получении описания основания электронного документа,
// которое используется для представления данных прикладного объекта в подсистеме.
//
// Параметры:
//  ОснованиеОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//  Описание - Структура - данные, описывающие основание электронного документа:
//   * Вид - Строка - представление вида объекта. По умолчанию синоним объекта метаданных.
//   * Организация - ОпределяемыйТип.Организация - организация основания.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент основания.
//   * Дата - Дата - дата основания.
//   * Номер - Строка - номер основания.
//   * СуммаДокумента - Число - сумма основания.
//  СтандартнаяОбработка - Булево - признак формирования описания по умолчанию. 
//                                  Если Ложь, то используются данные из параметра Описание. По умолчанию Истина.
//
Процедура ПолучитьОписаниеОснованияЭлектронногоДокумента(Знач ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ОснованиеОбъект) 
			И Не ТипЗнч(ОснованиеОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
			
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ОснованиеОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда 
		ВладелецОбъекта =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеОбъект.Владелец, "ВладелецФайла");
		ОснованиеОбъект = ВладелецОбъекта.ПолучитьОбъект();
	КонецЕсли;
	
	Описание.Вид = СтрШаблон(НСтр("ru = '%1'"), ОснованиеОбъект.ВидДокумента);
	Описание.Контрагент = ОснованиеОбъект.Контрагент;
	Описание.СуммаДокумента = ОснованиеОбъект.Сумма;
	Описание.Дата = 
		?(ЗначениеЗаполнено(ОснованиеОбъект.ДатаРегистрации), ОснованиеОбъект.ДатаРегистрации, ОснованиеОбъект.ДатаСоздания);
	Описание.Номер = 
		?(ЗначениеЗаполнено(ОснованиеОбъект.РегистрационныйНомер), ОснованиеОбъект.РегистрационныйНомер, ОснованиеОбъект.Код);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Описание.Организация = ОснованиеОбъект.Организация;
	Иначе
		Описание.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
		
КонецПроцедуры

// Возврат признака физического лица.
//
// Параметры:
//  ДанныеКонтрагента - СправочникСсылка - ссылка на элемент справочника.
//  ПризнакФизЛица - Булево - Истина если физическое лицо.
//
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
		
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента, "ЮрФизЛицо");
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
		Или ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		
		ПризнакФизЛица = Истина;
	КонецЕсли;

КонецПроцедуры

// Устанавливает всем подчиненным документам состояние "Завершен с исправлением".
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Массив ссылок на электронные документы.
//
Процедура УстановитьСостояниеЗавершенПоОтклонению(ЭлектронныеДокументы) Экспорт
	
	ОснованияИБ = НайтиДокументыОснования(ЭлектронныеДокументы);
	
	Если Не ЗначениеЗаполнено(ОснованияИБ) Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭлектронныйДокумент.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО ЭлектронныйДокумент.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла
		|ГДЕ
		|	ЭлектронныйДокумент.Ссылка В(&МассивЭД)
		|	И ЭДПрисоединенныеФайлы.СтатусЭД В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен), ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем))
		|	И ЭлектронныйДокумент.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокумент.Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО ЭлектронныйДокумент.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла
		|ГДЕ
		|	ЭлектронныйДокумент.Ссылка В(&МассивЭД)
		|	И ЭДПрисоединенныеФайлы.СтатусЭД В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен), ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем))
		|	И ЭлектронныйДокумент.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно))");
	Запрос.УстановитьПараметр("МассивЭД", ОснованияИБ);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КорректируемыеДокументы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЭлектронныйДокумент");
	
	ОбменСКонтрагентамиСлужебный.ИзменитьСостояниеЭД(
		КорректируемыеДокументы, 
		Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	
КонецПроцедуры

// Возвращает список видов ЭД, которые корректируются без ввода нового документа.
//
// Параметры:
//  Нет.
//
Функция ВидыЭДКорректируемыеНепосредственно() Экспорт
	
	МассивВидовЭД = Новый Массив;
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	
	Возврат МассивВидовЭД;
	
КонецФункции

// Выполняет запуск процедуры формирования печатной формы электронного документа (в фоне).
//
// Параметры:
//  ПараметрыЗадания - Структура - Параметры процедуры формирования представления электронного документа.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы, 
//	 во временное хранилище которой необходимо поместить результат выполнения процедуры.
//
Функция ЗапуститьФормированиеПредставленияФайлаЭлектронногоДокумента(ПараметрыЗадания, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Обмен с контрагентами. Формирование представления файла электронного документа.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиДОСлужебный.ПодготовитьПредставлениеФайлаЭлектронногоДокумента",
		ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

// Формирует печатную форму электронного документа.
//
// Параметры:
//  ПараметрыПечати - Структура - см. ОбменСКонтрагентамиВнутренний.СформироватьПечатнуюФормуЭД.
//	АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище, куда будет передана
//	 сформированная печатная форма.
//
Процедура ПодготовитьПредставлениеФайлаЭлектронногоДокумента(ПараметрыПечати, АдресРезультата) Экспорт

	ПредставлениеДокумента = Неопределено;
	
	Если ПараметрыПечати.Свойство("ИмяФайла") И ПараметрыПечати.Свойство("НаправлениеЭД") Тогда
		ФайлПоИмени = Новый Файл(ПараметрыПечати.ИмяФайла);
		Если ФайлПоИмени.Существует() Тогда
			ПредставлениеДокумента = ОбменСКонтрагентамиВнутренний.СформироватьПечатнуюФормуЭД(
				ФайлПоИмени.ПолноеИмя, 
				ПараметрыПечати.НаправлениеЭД, 
				ПараметрыПечати);
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлПоИмени.ПолноеИмя);
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ПредставлениеДокумента, АдресРезультата);
	
КонецПроцедуры

// Возвращает, есть ли среди массива переданных сертификатов доступные для подписания ЭД.
//
Функция ЕстьДоступныеСертификаты(МассивОтпечатковСертификатов, ЭД) Экспорт
	
	ИмяДокумента = "";
	Если ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,"ВладелецФайла");
	Иначе
		ЭлектронныйДокумент = ЭД;
	КонецЕсли;
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументИсходящий";
	ИначеЕсли ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументВходящий";
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронныеДокументы.Ссылка,
	|	ЭлектронныеДокументы.ВидЭД,
	|	ЭлектронныеДокументы.ИдентификаторОрганизации
	|ПОМЕСТИТЬ ЭлектронныеДокументы
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ЭлектронныеДокументы
	|ГДЕ
	|	ЭлектронныеДокументы.Ссылка = &Ссылка
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СертификатыЭДО.Сертификат КАК Сертификат
	|ПОМЕСТИТЬ СертификатыИзНастроекИПрофилей
	|ИЗ
	|	ЭлектронныеДокументы КАК ЭлектронныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыЭДО
	|		ПО ЭлектронныеДокументы.ИдентификаторОрганизации = СертификатыЭДО.ИдентификаторЭДО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сертификаты.Ссылка
	|ИЗ
	|	ЭлектронныеДокументы КАК ЭлектронныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
	|		ПО ЭлектронныеДокументы.ВидЭД = ВидыЭДЭП.ВидЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
	|			И ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СертификатыИзНастроекИПрофилей КАК СертификатыИзНастроекИПрофилей
	|		ПО (СертификатыИзНастроекИПрофилей.Сертификат = Сертификаты.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = ЭлектронныеДокументы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭД_ЭП
	|			ПО ЭлектронныеДокументы.Ссылка = ЭД_ЭП.Объект
	|				И ЭД_ЭП.Отпечаток = Сертификаты.Отпечаток
	|ГДЕ
	|	НЕ Сертификаты.Отозван
	|	И Сертификаты.Пользователь В (&ТекущийПользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
	|	И НЕ Сертификаты.ПометкаУдаления
	|	И ВидыЭДЭП.Использовать
	|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
	|	И ЭД_ЭП.Отпечаток ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("МассивОтпечатков",		МассивОтпечатковСертификатов);
	Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.УстановитьПараметр("ПустаяОрганизация",		Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("Ссылка",					ЭлектронныйДокумент);

	УстановитьПривилегированныйРежим(Истина);
	ЕстьСертификаты = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЕстьСертификаты;
	
КонецФункции

// Возвращает, доступно ли выполнение действий ЭДО по документу 1С:Документооборот.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - Ссылка на документ, который необходимо проверить.
//  СсылкаНаМассивОтпечатков - Строка - Адрес во вренном хранилище, по которому содержится массив 
//	 доступных отпечатков сертификатов электронных подписей.
//
Функция ДоступноВыполнениеДействийПоЭДО(Документ, СсылкаНаМассивОтпечатков) Экспорт
	
	ДоступноВыполнениеДействий = Ложь;
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат ДоступноВыполнениеДействий;
	КонецЕсли;
	
	ПараметрыДокументаПоЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьПризнакиДокументаПоЭДО(Документ, СсылкаНаМассивОтпечатков);
	ЕстьПравоОбработкиЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Ложь);
	ЕстьВозможностьПодписания = ЕстьПравоОбработкиЭД И ПараметрыДокументаПоЭДО.ЕстьДоступныеСертификаты;
	
	Если Не ПараметрыДокументаПоЭДО.ЕстьНастройкиОбмена Тогда
		Возврат ДоступноВыполнениеДействий;
	КонецЕсли;
	
	СостояниеДокумента = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(Документ);
	НаправлениеЭДО = ?(Не ЗначениеЗаполнено(СостояниеДокумента.Направление), 
		Перечисления.НаправленияЭД.Исходящий,
		СостояниеДокумента.Направление);
	СостояниеПоЭДО = ?(Не ЗначениеЗаполнено(СостояниеДокумента.Состояние), 
		Перечисления.СостоянияВерсийЭДДО.НеСформирован, 
		СостояниеДокумента.Состояние);
	
	СтатусОтклонен = ОбменСКонтрагентамиСлужебный.ЭДОтклонен(ПараметрыДокументаПоЭДО.СтатусЭД);
	ЭДОЗакрыт = ОбменСКонтрагентамиДОВызовСервера.ДОЗакрытПринудительно(Документ);
	ЭДОЗавершен = СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОбменЗавершен
		Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОбменЗавершенСИсправлением;
		
	КоличествоФайлов = КоличествоФайловДокумента(Документ);
				
	Если НаправлениеЭДО = Перечисления.НаправленияЭД.Исходящий Тогда
		
		ДоступноВыполнениеДействий = 
		    ЕстьВозможностьПодписания И Не ЭДОЗавершен
			И ((Не СтатусОтклонен И Не ЭДОЗакрыт И ПараметрыДокументаПоЭДО.СтатусЭД = Перечисления.СтатусыЭД.Сформирован)
				Или (КоличествоФайлов = 1
					И (Не ЗначениеЗаполнено(СостояниеПоЭДО) Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.НеСформирован)));
		
	Иначе
		
		ДоступноВыполнениеДействий = 
			Не (СтатусОтклонен Или ЭДОЗакрыт Или ЭДОЗавершен)
			И Не ПараметрыДокументаПоЭДО.ЕстьОтправленноеУведомление
			И ЕстьВозможностьПодписания
			И (ПараметрыДокументаПоЭДО.СтатусЭД = Перечисления.СтатусыЭД.Получен
				Или ПараметрыДокументаПоЭДО.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				Или ПараметрыДокументаПоЭДО.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
			И Не (ПараметрыДокументаПоЭДО.ВторойТитулПодписан 
					Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку);
					
	КонецЕсли;
	
	Возврат ДоступноВыполнениеДействий;
	
КонецФункции

// Выполняет необходимые действия после подписания документа.
//
// Параметры:
//	ФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - Файл ЭД, который необходимо обработать.
//
Процедура ПослеПодписанияДокументаКонтрагентом(ФайлЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодписанныеДанные = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВерсияФайлаДокумента,
		|	ВЫРАЗИТЬ(СостоянияЭД.СсылкаНаОбъект КАК Справочник.ВерсииФайлов).Владелец.ВладелецФайла КАК Документ,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.Контрагент КАК Контрагент
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = СостоянияЭД.ЭлектронныйДокумент
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка = &ФайлЭД");
	Запрос.УстановитьПараметр("ФайлЭД", ФайлЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() 
			Или Не ЗначениеЗаполнено(Выборка.ВерсияФайлаДокумента) Или Не ЗначениеЗаполнено(Выборка.Документ) Тогда
			
		Возврат;
	КонецЕсли;
	
	СоответствиеМассивовДО = Новый Соответствие;
	ПодписиДО = ПодготовитьМассивЭПКСравнению(
		ЭлектроннаяПодпись.УстановленныеПодписи(Выборка.ВерсияФайлаДокумента), СоответствиеМассивовДО);
	
	СоответствиеМассивовЭД = Новый Соответствие;
	ПодписиЭД = ПодготовитьМассивЭПКСравнению(
		ЭлектроннаяПодпись.УстановленныеПодписи(ФайлЭД), СоответствиеМассивовЭД);

	ПодписиДляДобавления = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодписиЭД, ПодписиДО);
	
	Если Не ПодписиДляДобавления.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДобавляемаяПодпись Из ПодписиДляДобавления Цикл
		Элемент = Новый Структура;
		Элемент.Вставить("ПодписанныйОбъект", Выборка.ВерсияФайлаДокумента);
		Элемент.Вставить("СвойстваПодписи", СоответствиеМассивовЭД[ДобавляемаяПодпись]);
		Элемент.Вставить("Контрагент", Выборка.Контрагент);
		ПодписанныеДанные.Добавить(Элемент);
	КонецЦикла;
		
	Если ПодписанныеДанные.Количество() Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);		
		
		Попытка			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВнутренниеДокументы");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Документ);
			Блокировка.Заблокировать();
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			РаботаСЭП.ЗанестиИнформациюОПодписях(ПодписанныеДанные);	
			
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();			
			Если ДокументОбъект.Стороны.Количество() > 0 Тогда
				Для Каждого Элемент Из ПодписанныеДанные Цикл
					СтрокаКонтрагента = ДокументОбъект.Стороны.Найти(Элемент.Контрагент, "Сторона");
					Если Не СтрокаКонтрагента = Неопределено Тогда
						ПодписантОтКонтрагента = ОбменСКонтрагентамиДОСлужебный.НайтиДобавитьКонтактноеЛицоИзСертификата(
							Элемент.Контрагент, Элемент.СвойстваПодписи.Сертификат);
						ДатаПодписанияКонтрагентом = Элемент.СвойстваПодписи.ДатаПодписи;				
						
						СтрокаКонтрагента.Подписан = Истина;
						СтрокаКонтрагента.ДатаПодписи = ДатаПодписанияКонтрагентом;
						СтрокаКонтрагента.Подписал = ПодписантОтКонтрагента;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);					
			ДокументОбъект.Записать();
			
			РазблокироватьДанныеДляРедактирования(Выборка.Документ);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось прикрепить ответные подписи к документу ""%1"" (%2). Причина: %3'"), 
				Выборка.Документ, 
				ПолучитьНавигационнуюСсылку(Выборка.Документ),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение ТекстСообщения;				
		КонецПопытки;
	КонецЕсли;
			
КонецПроцедуры

// Возвращает таблицу актуальных видов ЭД.
//
// Параметры:
//	ИспользоватьУПД - Булево - Признак того, что в ЭДО используются УПД
//	ИспользоватьУКД - Булево - Признак того, что в ЭДО используются УКД
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* ВидЭД - ПеречислениеСсылка.ВидыЭД
//		* ТипЭД - ПеречислениеСсылка.ТипыЭД
//		* ВерсияФормата - Строка
//		* Приоритет - Число
//		* ТребуетсяИзвещениеОПолучении - Булево
//		* ТребуетсяОтветнаяПодпись - Булево
//
Функция ТаблицаАктуальныхВидовЭД(ИспользоватьУПД = Ложь, ИспользоватьУКД = Ложь) Экспорт
	
	ТаблицаВидовЭД = Новый ТаблицаЗначений;
	ТаблицаВидовЭД.Колонки.Добавить("ВидЭД", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭД"));
	ТаблицаВидовЭД.Колонки.Добавить("ТипЭД", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭД"));
	ТаблицаВидовЭД.Колонки.Добавить("ВерсияФормата", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(120)));
	ТаблицаВидовЭД.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаВидовЭД.Колонки.Добавить("ТребуетсяИзвещениеОПолучении", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовЭД.Колонки.Добавить("ТребуетсяОтветнаяПодпись", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовЭД.Колонки.Добавить("Формировать", Новый ОписаниеТипов("Булево"));
		
	АктуальныеВидыЭД = ОбменСКонтрагентамиСлужебный.ИспользуемыеВидыЭлектронныхДокументов();
	Если АктуальныеВидыЭД.Найти(Перечисления.ВидыЭД.ПроизвольныйЭД) = Неопределено Тогда
		АктуальныеВидыЭД.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	КонецЕсли;

	Для Каждого ВидЭД Из АктуальныеВидыЭД Цикл
		СтрокаТаблицы = ТаблицаВидовЭД.Добавить();
		СтрокаТаблицы.ВидЭД = ВидЭД;
		СтрокаТаблицы.Формировать = Истина;
		
		Если Не СтрокаТаблицы.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			СтрокаТаблицы.ТипЭД = Неопределено;
			
			ВерсияФормата = "";
			Если СтрокаТаблицы.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура") Тогда
				Если ИспользоватьУПД Тогда
					СтрокаТаблицы.ВерсияФормата = АктуальныйФорматУПДСЧФДОП();
					СтрокаТаблицы.ТребуетсяОтветнаяПодпись = Истина;
				Иначе
					СтрокаТаблицы.ВерсияФормата = ОбменСКонтрагентамиСлужебный.АктуальнаяВерсияФорматаЭД(СтрокаТаблицы.ВидЭД);
					СтрокаТаблицы.ТребуетсяОтветнаяПодпись = Ложь;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура") Тогда
				Если ИспользоватьУКД Тогда
					СтрокаТаблицы.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)";
					СтрокаТаблицы.ТребуетсяОтветнаяПодпись = Истина;
				Иначе
					СтрокаТаблицы.ВерсияФормата = ОбменСКонтрагентамиСлужебный.АктуальнаяВерсияФорматаЭД(СтрокаТаблицы.ВидЭД);
					СтрокаТаблицы.ТребуетсяОтветнаяПодпись = Ложь;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ВерсияФормата = ОбменСКонтрагентамиСлужебный.АктуальнаяВерсияФорматаЭД(СтрокаТаблицы.ВидЭД);
			КонецЕсли;		
		Иначе
			СтрокаТаблицы.ВерсияФормата = "";
		КонецЕсли;
		
		СтрокаТаблицы.Приоритет = ПриоритетВидаЭлектронногоДокументаВНастройкахЭДО(СтрокаТаблицы.ВидЭД);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыФорматаЭД(СтрокаТаблицы.ВидЭД, СтрокаТаблицы.ВерсияФормата));
		
	КонецЦикла;	
	
	Возврат ТаблицаВидовЭД;
	
КонецФункции

// Возвращает актуальный формат счета-фактуры.
//
Функция АктуальныйФорматУПДСЧФДОП() Экспорт
	
	ПризнакУПДСЧФДОП = "УПД:Счет-фактура и первичный документ";
	
	ТаблицаФорматов = ОбменСКонтрагентамиСлужебный.ФорматыЭлектронныхДокументов();
	НайденныеСтроки = 
		ТаблицаФорматов.НайтиСтроки(Новый Структура("ВидЭлектронногоДокумента", Перечисления.ВидыЭД.СчетФактура));
		
	АктуальныйФормат = "";
	ПоследнийФормат = "";
	
	Для Каждого СтрокаФормата Из НайденныеСтроки Цикл
		
		Если СтрНайти(СтрокаФормата.ИдентификаторФормата, ПризнакУПДСЧФДОП) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоследнийФормат = СтрокаФормата.ИдентификаторФормата;
		
		Если СтрокаФормата.Действует Тогда
			АктуальныйФормат = СтрокаФормата.ИдентификаторФормата;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(АктуальныйФормат) Тогда
		АктуальныйФормат = ПоследнийФормат;
	КонецЕсли;
	
	Возврат АктуальныйФормат;
	
КонецФункции

// Возвращает приоритет для переданного вида ЭД.
//
// Параметры:
//	ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - Вид ЭД, для которого необходимо получить приоритет.
//
Функция ПриоритетВидаЭлектронногоДокументаВНастройкахЭДО(ВидЭлектронногоДокумента) Экспорт
	
	Приоритет = 100;
	
	Если ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктНаПередачуПрав") Тогда
		Приоритет = 1;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель") Тогда
		Приоритет = 2;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.ТОРГ12Продавец") Тогда
		Приоритет = 3;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура") Тогда
		Приоритет = 4;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель") Тогда
		Приоритет = 5;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура") Тогда
		Приоритет = 6;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		Приоритет = 7;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.КаталогТоваров") Тогда
		Приоритет = 10;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетНаОплату") Тогда
		Приоритет = 11;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПрайсЛист") Тогда
		Приоритет = 12;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗаказТовара") Тогда
		Приоритет = 13;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.ОтветНаЗаказ") Тогда
		Приоритет = 14;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.ОтчетОПродажахКомиссионногоТовара") Тогда
		Приоритет = 15;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.ОтчетОСписанииКомиссионногоТовара") Тогда
		Приоритет = 16;
	ИначеЕсли ВидЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПрикладнойЭД") Тогда
		Приоритет = 30;
	КонецЕсли;
	
	Возврат Приоритет;
	
КонецФункции

// Возвращает приоритет для переданного вида ЭД.
//
// Параметры:
//	ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - Вид ЭД.
//	ВерсияФорматаЭД - Строка - Версия формата ЭД.
//
// Возвращаемое значение:
//	Структура:
//		* ТребуетсяОтветнаяПодпись - Булево
//		* ТребуетсяИзвещениеОПолучении - Булево
//
Функция ПараметрыФорматаЭД(ВидЭлектронногоДокумента, ВерсияФорматаЭД) Экспорт
	
	ПараметрыФорматаЭД = Новый Структура("ТребуетсяОтветнаяПодпись, ТребуетсяИзвещениеОПолучении", Ложь, Ложь);

	ИспользоватьЭП = 
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
			
	Если Не (ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭлектронногоДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
		
		ПараметрыФорматаЭД.ТребуетсяОтветнаяПодпись = ИспользоватьЭП;
		
		Если ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетНаОплату Тогда
			ПараметрыФорматаЭД.ТребуетсяОтветнаяПодпись = Ложь;
		ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктОРасхождениях Тогда
			ПараметрыФорматаЭД.ТребуетсяОтветнаяПодпись = Ложь;			
		ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель Тогда
			Если ВРег(ВерсияФорматаЭД) = ВРег("ФНС 5.01 (С 2016Г.)")
				Или ВРег(ВерсияФорматаЭД) = ВРег("ФНС 5.01 (УПД:Первичный документ)")
				Или ВРег(ВерсияФорматаЭД) = ВРег("ФНС 2019 (УПД:Первичный документ)") Тогда
				
				Возврат ПараметрыФорматаЭД;
			КонецЕсли;
			
			ПараметрыФорматаЭД.ТребуетсяИзвещениеОПолучении = Истина;
		ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			Если ВРег(ВерсияФорматаЭД) = ВРег("ФНС 5.01 (С 2016Г.)") Тогда
				Возврат ПараметрыФорматаЭД;
			КонецЕсли;
			
			ПараметрыФорматаЭД.ТребуетсяИзвещениеОПолучении = Истина;
		ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетФактура Тогда
			Если Не (ВРег(ВерсияФорматаЭД) = ВРег("ФНС 5.01 (УПД:Счет-фактура и первичный документ)")
					Или ВРег(ВерсияФорматаЭД) = ВРег("ФНС 2019 (УПД:Счет-фактура и первичный документ)")) Тогда
					
				ПараметрыФорматаЭД.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
		ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Если Не ВРег(ВерсияФорматаЭД) = ВРег("ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)") Тогда
				ПараметрыФорматаЭД.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
		ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			Если Не ВРег(ВерсияФорматаЭД) = ВРег("ФНС 5.01 (УКД:Первичный документ)") Тогда
				ПараметрыФорматаЭД.ТребуетсяОтветнаяПодпись = ИспользоватьЭП;
			КонецЕсли;
		КонецЕсли;
			
		ПараметрыФорматаЭД.ТребуетсяИзвещениеОПолучении = Истина;
		
	Иначе
		
		ПараметрыФорматаЭД.ТребуетсяОтветнаяПодпись = Ложь;
		ПараметрыФорматаЭД.ТребуетсяИзвещениеОПолучении = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрыФорматаЭД;
	
КонецФункции

// Возвращает необходимо ли добавить данный ЭД в очередь к отражению в документах ДО
//
// Параметры:
//	ЭДПрисоединенныйФайл - СправочникСсылка.ЭДПрисоединенныеФайлы - ЭД, по которому необходимо выполнить проверку
// 
// Возвращаемое значение:
//	Булево - Истина - если необходимо добавить в очередь, Ложь - в противном случае
Функция НеобходимоДобавитьВОчередь(ЭДПрисоединенныйФайл) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭДПрисоединенныйФайл
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
			|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокументВходящийДокументыОснования.Ссылка
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.Ссылка = &ЭДПрисоединенныйФайл
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОчередьПриемаСообщенийЭДО.ЭДПрисоединенныйФайл
			|ИЗ
			|	РегистрСведений.ОчередьПриемаСообщенийЭДО КАК ОчередьПриемаСообщенийЭДО
			|ГДЕ
			|	ОчередьПриемаСообщенийЭДО.ЭДПрисоединенныйФайл = &ЭДПрисоединенныйФайл";
	Запрос.УстановитьПараметр("ЭДПрисоединенныйФайл", ЭДПрисоединенныйФайл);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ()

// Возвращает массив видов внутренних документов для которых доступна отправка по ЭДО
// 
// Возвращаемое значение:
//   Массив из Справочкик.ВидыВнутреннихДокументов - Массив видов внутренних документов,
//                                                   для которых доступна отправка по ЭДО
Функция ВидыДокументовДляОтправкиПоЭДО() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыВнутреннихДокументов.Ссылка КАК ВидДокумента
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|ГДЕ
		|	НЕ ВидыВнутреннихДокументов.ПометкаУдаления
		|	И ВидыВнутреннихДокументов.ВестиУчетСторон";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДокумента");
	
КонецФункции

// Проверяет, является ли выбранный внутренний документ документом аннулирования по ЭДО
// 
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - проверяемый документ ДО.
//  ДанныеАннулирования - Структура из:
//      * Документ - В данное поле запишется аннулируемый документ ДО
//      * ЭД - В данное поле запишется аннулируемый ЭД
//      * ФайлЭДАннулирования - В данное поле запишется файл Предложения Об Аннулировании
//      * НаправлениеЭД - В данное поле запишется направление предложкния об аннулировании
//      * СостояниеЭДО - В данное поле запишется состояние Предложения Об Аннулировании
// 
// Возвращаемое значение:
//  Булево - Является ли переданный документ документом аннулирования ЭДО
// 
Функция ЭтоДокументАннулированияЭДО(Документ, ДанныеАннулирования = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыАннулирования.Документ КАК Документ,
		|	ДокументыАннулирования.ЭД КАК ЭД,
		|	ДокументыАннулирования.СоглашениеОбАннулировании КАК СоглашениеОбАннулировании,
		|	ДокументыАннулирования.ФайлСоглашенияОбАннулировании КАК ФайлСоглашенияОбАннулировании,
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ФайлЭДАннулирования,
		|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД
		|ИЗ
		|	РегистрСведений.ДокументыАннулирования КАК ДокументыАннулирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО ДокументыАннулирования.ЭД = ЭДПрисоединенныеФайлы.ВладелецФайла
		|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА))
		|ГДЕ
		|	ДокументыАннулирования.СоглашениеОбАннулировании = &Документ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеАннулирования) <> Тип("Структура") Тогда
		ДанныеАннулирования = Новый Структура;
	КонецЕсли;
	
	ДанныеАннулирования.Вставить("Документ", Выборка.Документ);
	ДанныеАннулирования.Вставить("ЭД", Выборка.ЭД);
	ДанныеАннулирования.Вставить("ФайлЭДАннулирования", Выборка.ФайлЭДАннулирования);
	ДанныеАннулирования.Вставить("СостояниеЭДО",
		ОбменСКонтрагентамиДОСервер.СостояниеСоглашенияАннулированияПоСтатусуЭД(
			Выборка.СтатусЭД,
			Выборка.НаправлениеЭД));
	ДанныеАннулирования.Вставить("НаправлениеЭД", Выборка.НаправлениеЭД);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПараметрыЭДПоСсылке(Знач Источник, ПараметрыЭД, ФорматCML = Ложь)
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ВерсииФайлов") Тогда 
		Источник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Владелец.ВладелецФайла");
	КонецЕсли;
	
	ПараметрыЭД.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Контрагент");
	
	ПараметрыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "ВидДокумента, Организация");	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		ПараметрыЭД.Организация = ПараметрыИсточника.Организация;
	Иначе
		ПараметрыЭД.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	ВидВходящегоЭД = ВидСвязанногоВходящегоЭД(Источник);
	
	Если ВидВходящегоЭД <> Неопределено Тогда
		
		ПараметрыЭД.ВидЭД = ВидВходящегоЭД;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.НаправлениеЭД      = Перечисления.НаправленияЭД.Входящий;
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиОтправки = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента(
		ПараметрыЭД.Организация,
		ПараметрыЭД.Контрагент, 
		ПараметрыИсточника.ВидДокумента);
	
	Если НастройкиОтправки <> Неопределено Тогда
		
		ВидЭД = Неопределено;
		Если ТипЗнч(НастройкиОтправки) <> Тип("Структура") Тогда
			ВидЭД = Неопределено;
		Иначе
			НастройкиОтправки.Свойство("ВидЭД", ВидЭД);
			Если Не ЗначениеЗаполнено(ВидЭД) Тогда
				ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЭД.ВидЭД = ВидЭД;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.НаправлениеЭД      = Перечисления.НаправленияЭД.Исходящий;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыЭДПоОбъекту(Знач Источник, ПараметрыЭД, ФорматCML = Ложь)
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов") Тогда 
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Владелец, "ВладелецФайла");		
		Если ЗначениеЗаполнено(ВладелецФайла) Тогда
			ЗаполнитьПараметрыЭДПоСсылке(ВладелецФайла, ПараметрыЭД, ФорматCML);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЭД.Контрагент = Источник.Контрагент;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		ПараметрыЭД.Организация = Источник.Организация;
	Иначе
		ПараметрыЭД.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	ВидВходящегоЭД = ВидСвязанногоВходящегоЭД(Источник.Ссылка);
	
	Если ВидВходящегоЭД <> Неопределено Тогда
		
		ПараметрыЭД.ВидЭД = ВидВходящегоЭД;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.НаправлениеЭД      = Перечисления.НаправленияЭД.Входящий;
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиОтправки = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента(
		ПараметрыЭД.Организация,
		ПараметрыЭД.Контрагент, 
		Источник.ВидДокумента);
	
	Если НастройкиОтправки <> Неопределено Тогда
		
		ВидЭД = Неопределено;
		Если ТипЗнч(НастройкиОтправки) <> Тип("Структура") Тогда
			ВидЭД = Неопределено;
		Иначе
			НастройкиОтправки.Свойство("ВидЭД", ВидЭД);
			Если Не ЗначениеЗаполнено(ВидЭД) Тогда
				ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЭД.ВидЭД = ВидЭД;
		
		ПараметрыЭД.ДоговорКонтрагента = Неопределено;
		ПараметрыЭД.НаправлениеЭД      = Перечисления.НаправленияЭД.Исходящий;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиДокументыОснования(ЭлектронныеДокументы)
	
	ДокументыОснования = Новый Массив;
	
	Запрос = Новый Запрос(
	    "ВЫБРАТЬ
	    |	ВложенныйЗапрос.ИдентификаторОснования КАК Идентификатор
	    |ПОМЕСТИТЬ ИдентификаторыОснований
	    |ИЗ
	    |	(ВЫБРАТЬ
	    |		ОснованияЭД.ИдентификаторЭДДокументаОснования КАК ИдентификаторОснования
	    |	ИЗ
	    |		Документ.ЭлектронныйДокументВходящий.ИдентификаторыОснованийВладельцаФайла КАК ОснованияЭД
	    |	ГДЕ
	    |		ОснованияЭД.Ссылка В(&ЭлектронныеДокументы)
	    |	
	    |	ОБЪЕДИНИТЬ ВСЕ
	    |	
	    |	ВЫБРАТЬ
	    |		ОснованияЭД.ИдентификаторЭДДокументаОснования
	    |	ИЗ
	    |		Документ.ЭлектронныйДокументИсходящий.ИдентификаторыОснованийВладельцаФайла КАК ОснованияЭД
	    |	ГДЕ
	    |		ОснованияЭД.Ссылка В(&ЭлектронныеДокументы)) КАК ВложенныйЗапрос
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	ВложенныйЗапрос.ИдентификаторОснования
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ЭлектронныйДокумент.Ссылка КАК ДокументОснование
	    |ИЗ
	    |	ИдентификаторыОснований КАК ИдентификаторыОснований
	    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокумент
	    |		ПО ИдентификаторыОснований.Идентификатор = ЭлектронныйДокумент.УникальныйИД
	    |
	    |ОБЪЕДИНИТЬ ВСЕ
	    |
	    |ВЫБРАТЬ
	    |	ЭлектронныйДокумент.Ссылка
	    |ИЗ
	    |	ИдентификаторыОснований КАК ИдентификаторыОснований
	    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокумент
	    |		ПО ИдентификаторыОснований.Идентификатор = ЭлектронныйДокумент.УникальныйИД");
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
			ДокументыОснования.Добавить(Выборка.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыОснования;
	
КонецФункции

Функция КоличествоФайловДокумента(Документ)
	
	КоличествоФайлов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Файлы.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ Файлы.ПометкаУдаления");
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		КоличествоФайлов = Выборка.Количество;
	КонецЕсли;
	
	Возврат КоличествоФайлов;
	
КонецФункции

Функция ПодготовитьМассивЭПКСравнению(МассивЭП, СоответствиеМассивов)
	
	МассивДляСравнения = Новый Массив;
	
	Для Каждого Элемент Из МассивЭП Цикл
		СоответствиеМассивов.Вставить(Элемент.Подпись, Элемент);
		МассивДляСравнения.Добавить(Элемент.Подпись);
	КонецЦикла;
	
	Возврат МассивДляСравнения;
	
КонецФункции

// Возвращает вид входящего электронного документа, связанного с текущим документом ДО
//
// Параметры:
//   Документ - СправочникСсылка.ВнутренниеДокументы - Внутренний документ ДО
//              для которого необходимо определить вид входящего ЭД
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыЭД - Вид входящего ЭД, если таковой имеется,
//       Неопределено - если входящих ЭД по документу нет.
Функция ВидСвязанногоВходящегоЭД(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
		|ПОМЕСТИТЬ ФайлыДокумента
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДокумента.Файл КАК Файл,
		|	ФайлыДокумента.ТекущаяВерсия КАК ТекущаяВерсия,
		|	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ВЫРАЗИТЬ(СостоянияЭД.ЭлектронныйДокумент КАК Документ.ЭлектронныйДокументВходящий).ВидЭД КАК ВидЭД
		|ИЗ
		|	ФайлыДокумента КАК ФайлыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО ФайлыДокумента.ТекущаяВерсия = СостоянияЭД.СсылкаНаОбъект
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящий";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВидЭД;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти


// Обработчик регламентного задания.
// Формирует документы 1С:Документооборот из входящих электронных документов и исходящие электронные 
// документы из документов 1С:Документооборот
Процедура СформироватьОбъекты1СДокументооборотИЭДО() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПоддержкаЭДО, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование ЭД на основании документов 1С:Документооборот.
	СформироватьЭДПоГотовымДокументамДО();
	
	// Формирование документов 1С:Документооборот на основании ЭД.
	СформироватьДокументыДОНаОснованииВходящихЭД();
	
КонецПроцедуры

Функция ПолучитьОписаниеСостоянияЭДО(ДокументДО, ЭтоАннулирование = Ложь, ВнешниеДанныеСостоянияЭДО = Неопределено) Экспорт
	
	ОписаниеСостоянияЭДО = Новый Структура(
		"СостояниеСНашейСтороны, СостояниеСоСтороныКонтрагента, ДатаУстановкиСостояния,
		|СостояниеСНашейСтороныЦвет, СостояниеСоСтороныКонтрагентаЦвет", 
		"", "", Дата(1, 1, 1), "", "");
	
	Если ВнешниеДанныеСостоянияЭДО = Неопределено Тогда
		ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(ДокументДО);
	Иначе
		ДанныеСостоянияЭДО = ВнешниеДанныеСостоянияЭДО;
	КонецЕсли;
	
	СостояниеЭДО = ДанныеСостоянияЭДО.Состояние;
	Направление = ?(Не ЗначениеЗаполнено(ДанныеСостоянияЭДО.Направление), 
		Перечисления.НаправленияЭД.Исходящий, 
		ДанныеСостоянияЭДО.Направление);
		
	Если Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Если Не ЗначениеЗаполнено(СостояниеЭДО) Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.НеСформирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'ЭДО не начат'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'ЭДО не начат'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Подписан Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяОтправка Тогда
				
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается отправка'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Отправлен Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Отправлен'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается результат проверки'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли Перечисления.СостоянияВерсийЭДДО.ИсходящийОтклоненКонтрагентом(СостояниеЭДО) Тогда
			
			Если ЭтоАннулирование Тогда
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Предложенно аннулирование'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Отказано в аннулировании'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			Иначе
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Требуется корректировка'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается корректировка'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			КонецЕсли;
			
		ИначеЕсли Перечисления.СостоянияВерсийЭДДО.ОбменВыполненУспешно(СостояниеЭДО) Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Закрыт принудительно'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОшибкаПередачи Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ошибка отправки документа'");
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороныЦвет = "b22222";
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяАннулирование Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ТребуетсяАннулировать Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Аннулирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(СостояниеЭДО) 
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Получен
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.НаПодписи
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.НаУтверждении Тогда
				
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Требуется проверка'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Отклонен
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ТребуетсяУточнитьДокумент
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяИсправление Тогда
			
			Если ЭтоАннулирование Тогда
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Отказано в аннулировании'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Предложенно аннулирование'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			Иначе
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается исправление'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Требуется исправление'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			КонецЕсли;
			
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Подписан
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку
				Или СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Отправлен Тогда
				
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли Перечисления.СостоянияВерсийЭДДО.ОбменВыполненУспешно(СостояниеЭДО) Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.НеСформирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'ЭДО не начат'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'ЭДО не начат'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Закрыт принудительно'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОшибкаПередачи Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ошибка приема документа'");
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороныЦвет = "b22222";
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяАннулирование Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ТребуетсяАннулировать Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Аннулирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеСостоянияЭДО;
	
КонецФункции

#Область РассылкаУведомленийОПроблемахЭДО

// Обработчик регламентного задания РассылкаУведомленийОПроблемахЭДО.
// Создает уведомления по ошибкам обмена ЭДО, записанным в регистр "ОшибкиЭДОКИсправлению"
Процедура ОтправитьУведомленияОПроблемахЭДО() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РассылкаУведомленийОПроблемахЭДО, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РазослатьОзнакомленияОПроблемах(
		РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
			Перечисления.РазделыУведомленийОПроблемах.ОтправкаПоЭДО),
		Ложь);
	РазослатьОзнакомленияОПроблемах(
		РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
			Перечисления.РазделыУведомленийОПроблемах.ПриемПоЭДО),
		Истина);
	
КонецПроцедуры

// Создает уведомления о проблемах обмена ЭДО и ставит в очередь к рассылке указанным получателям
// 
// Параметры:
//  МассивПолучателей - Массив из Пользователь - Массив пользователей, которые должны получить сообщения о проблеме
//  ЭтоПроблемыПриема - Булево - Указывает, рассылаются ли уведомления о проблемах приема документов, либо о проблемах отправки.
//                    Истина - Рассылать уведомления о проблемах приема документов по ЭДО
//                    Ложь - Рассылать уведомления о проблемах отправки документов по ЭДО
// 
Процедура РазослатьОзнакомленияОПроблемах(МассивПолучателей, ЭтоПроблемыПриема)
	
	Если МассивПолучателей.Количество() = 0 Тогда
		Если ЭтоПроблемыПриема Тогда
			ОписаниеСообщения =
				НСтр("ru = 'Рассылка уведомлений о проблемах приема по ЭДО не проводилась, поскольку нет получателей.'");
		Иначе
			ОписаниеСообщения =
				НСтр("ru = 'Рассылка уведомлений о проблемах отправки по ЭДО не проводилась, поскольку нет получателей.'");
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОтправкиУведомленийЭДО(),
			УровеньЖурналаРегистрации.Информация, , ,
			ОписаниеСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ЭтоПроблемыПриема Тогда
		ОписаниеСообщения =
			НСтр("ru = 'Начало рассылки уведомлений о проблемах приема документов по ЭДО'");
	Иначе
		ОписаниеСообщения =
			НСтр("ru = 'Начало рассылки уведомлений о проблемах отправки документов по ЭДО'");
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияОтправкиУведомленийЭДО(),
		УровеньЖурналаРегистрации.Информация, , ,
		ОписаниеСообщения);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОшибкиЭДОКИсправлению.ПредметОшибки КАК ПредметОшибки,
		|	ОшибкиЭДОКИсправлению.ОписаниеПроблемы КАК ОписаниеПроблемы,
		|	ВЫБОР
		|		КОГДА ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Справочник.ВнутренниеДокументы
		|			ТОГДА "" (Внутренний документ)""
		|		КОГДА ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|			ТОГДА "" (Входящий электронный документ)""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ТипПредметаОшибки
		|ИЗ
		|	РегистрСведений.ОшибкиЭДОКИсправлению КАК ОшибкиЭДОКИсправлению
		|ГДЕ
		|	НЕ ОшибкиЭДОКИсправлению.УведомлениеОтправлено
		|	И %УсловиеОперации%";
	
	Если ЭтоПроблемыПриема Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"%УсловиеОперации%",
			"ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Документ.ЭлектронныйДокументВходящий");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"%УсловиеОперации%",
			"ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Справочник.ВнутренниеДокументы");
	КонецЕсли;
	
	СозданоУведомлений = 0;
	
	ВыборкаНегруппируемых = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаНегруппируемых.Следующий() Цикл
		
		СозданоУведомлений = СозданоУведомлений + 1;
		
		СтрокиОписания = Новый Массив;
		
		Если ЭтоПроблемыПриема Тогда
			СтрокиОписания.Добавить(НСтр("ru ='При приеме по ЭДО документа произошли ошибки'"));
		Иначе
			СтрокиОписания.Добавить(НСтр("ru ='При отправке по ЭДО документа произошли ошибки'"));
		КонецЕсли;
		
		СтрокиОписания.Добавить(
			СтрШаблон(НСтр("ru = 'Предмет ошибки: %1%2.'"),
				РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ВыборкаНегруппируемых.ПредметОшибки),
				ВыборкаНегруппируемых.ТипПредметаОшибки));
		
		СтрокиОписания.Добавить(Символы.ПС);
		
		СтрокиОписания.Добавить(ВыборкаНегруппируемых.ОписаниеПроблемы);
		
		НачатьТранзакцию();
		Попытка
			
			РегистрыСведений.ОшибкиЭДОКИсправлению.УстановитьОтправленностьУведомления(
				ВыборкаНегруппируемых.ПредметОшибки);
			
			Для Каждого Получатель Из МассивПолучателей Цикл
				РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
					СтрСоединить(СтрокиОписания, Символы.ПС),
					Получатель,
					ВыборкаНегруппируемых.ПредметОшибки);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			СозданоУведомлений = СозданоУведомлений - 1;
			
			Если ЭтоПроблемыПриема Тогда
				ОписаниеПроблемы = СтрШаблон(
					НСтр("ru = 'При отправке уведомления о ошибке приема ЭДО документа %1 возникли ошибки'"),
						ВыборкаНегруппируемых.ПредметОшибки)
					+ Символы.ПС + Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Иначе
				ОписаниеПроблемы = СтрШаблон(
					НСтр("ru = 'При отправке уведомления о ошибке отправки ЭДО документа %1 возникли ошибки'"),
						ВыборкаНегруппируемых.ПредметОшибки)
					+ Символы.ПС + Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОтправкиУведомленийЭДО(),
				УровеньЖурналаРегистрации.Ошибка, ,
				ВыборкаНегруппируемых.ПредметОшибки,
				ОписаниеПроблемы);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ЭтоПроблемыПриема Тогда
		ОписаниеРезультата =
			СтрШаблон(
				НСтр("ru = 'Завершена рассылка уведомлений о проблемах при приеме документов по ЭДО.'")
					+ Символы.ПС
					+ НСтр("ru = 'Создано %1 уведомлений.'"),
				СозданоУведомлений);
	Иначе
		ОписаниеРезультата =
			СтрШаблон(
				НСтр("ru = 'Завершена рассылка уведомлений о проблемах при отправке документов по ЭДО.'")
					+ Символы.ПС
					+ НСтр("ru = 'Создано %1 уведомлений.'"),
				СозданоУведомлений);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияОтправкиУведомленийЭДО(),
		УровеньЖурналаРегистрации.Информация, , ,
		ОписаниеРезультата);
КонецПроцедуры

#КонецОбласти

#Область ПостановкаДокумента1СДокументооборотВОчередьНаОтправку

Функция ПоставитьДокументВОчередьНаОтправкуПоЭДО(
			Документ,
			КонтрагентыГотовыеКЭДО = Неопределено,
			НаправлениеЭД = Неопределено,
			ПроверятьПодписанДокумент = Истина,
			УстановитьСостояниеПодписан = Ложь,
			ВыводитьСообщение = Истина) Экспорт
	
	Если КонтрагентыГотовыеКЭДО = Неопределено Тогда
		Если Не ДокументГотовКФормированиюЭД(
				Документ, 
				ВыводитьСообщение, 
				КонтрагентыГотовыеКЭДО, 
				ПроверятьПодписанДокумент,
				НаправлениеЭД) Тогда
				
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(КонтрагентыГотовыеКЭДО) Тогда
		Для Каждого КонтрагентГотовыйКЭДО Из КонтрагентыГотовыеКЭДО Цикл
			Если УстановитьСостояниеПодписан Тогда
				ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
					Документ, 
					КонтрагентГотовыйКЭДО,
					Перечисления.СостоянияВерсийЭДДО.Подписан,
					НаправлениеЭД);
			КонецЕсли;
						
			ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
				Документ, 
				КонтрагентГотовыйКЭДО,
				Перечисления.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку,
				НаправлениеЭД);
		КонецЦикла; 
		
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			РегистрыСведений.ОчередьОтправкиДокументовЭДО.ПоставитьВОчередь(Документ);
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область ФормированиеДокументов1СДокументооборотНаОснованииОбъектовЭДО

// Создание документов ДО на основании входящих ЭД
//
// Параметры:
//  Параметры - Структура, Неопределено - Параметры создания документов ДО на основании входящих ЭД.
//      * ЭДДляОбработки - Массив - Содержит массив элементов типа СправочникСсылка.ЭДПрисоединенныеФайлы,
//                                  если передан, то обработаются только эти файлы ЭД.
//                                  Если не передан, то происходит обработка всей очереди.
//
// Возвращаемое значение:
//  Структура:
//      * КоличествоКСозданию - Число - Количество документов к созданию внутренних документов ДО
//      * КоличествоСоздано - Число - Количество документов, созданных в результате работы
//      * КоличествоСозданоСОшибками - Число - Количество документов, созданных с ошибками
//      * Ошибки - Массив из Строка - Массив строк описания ошибок, возникших в результате создания документов.
Функция СформироватьДокументыДОНаОснованииВходящихЭД(Параметры = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивЭД = Неопределено;
	
	Если Параметры <> Неопределено Тогда
		Если Параметры.Свойство("ЭДДляОбработки") Тогда
			МассивЭД = Параметры.ЭДДляОбработки;
		КонецЕсли;
	КонецЕсли;
	
	ИмяСобытия = ИмяСобытияСозданияДокументовДОНаОснованииЭД();
	
	Комментарий = Нстр("ru = 'Начато создание документов 1С:Документооборот на основании ЭД.'");
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
		
	СозданоДокументов = 0;
	СозданоСОшибками = 0;
	КСозданиюДокументов = 0;
	Ошибки = Новый Массив;
	
	Выборка = ВыборкаВходящихЭДДляОбработки(МассивЭД);
	
	КСозданиюДокументов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		РезультатСоздания = СоздатьДокументДОпоЭД(
			Выборка.ВходящийЭД,
			Выборка.ЭДПрисоединенныйФайл);
		
		Если РезультатСоздания.Успех Тогда
			СозданоДокументов = СозданоДокументов + 1;
			
			Если РезультатСоздания.Ошибки.Количество() > 0 Тогда
				СозданоСОшибками = СозданоСОшибками + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, РезультатСоздания.Ошибки);
		
	КонецЦикла;
	
	Комментарий = 
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ОписаниеРезультатаСозданияДокументовДОПоВходящимЭД(
			КСозданиюДокументов,
			СозданоДокументов,
			СозданоСОшибками);
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
	
	СтруктураВозврата.Вставить("КоличествоКСозданию", КСозданиюДокументов);
	СтруктураВозврата.Вставить("КоличествоСоздано", СозданоДокументов);
	СтруктураВозврата.Вставить("КоличествоСозданоСОшибками", СозданоСОшибками);
	СтруктураВозврата.Вставить("Ошибки", Ошибки);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Создает документ 1С:Документооборот на основании входящего ЭД.
//
// Параметры:
//  ЭД - Документ.ЭлектронныйДокументВходящий - ссылка на электроннный документ.
//  ЭДПрисоединенныйФайл - Справочник.ЭДПрисоединенныеФайлы, Неопределено - ссылка на файл электроннного документа.
//                         Если не указан, то будет обрабатываться основной файл документа (Первичный ЭД).
// 
// Возвращаемое значение:
//  Структура - описание результата выполнения операции
//      * Успех - Булево - Указывает, была ли успешно завершена операция создания документа
//      * Ошибки - Массив из Структура:
//          * Описание - Строка - Описание проблемы, возникшей при создании документа.
//          * ПредметОшибки - ДокументСсылка.ЭлектронныйДокументВходящий - ЭД, при обработке которого возникла ошибка.
//          * Критическая - Булево - Является ли возникшая проблема критической, т.е. приводящей к невозможности
//                                   создать документ ДО по обрабатываему ЭД.
// 
Функция СоздатьДокументДОпоЭД(ЭД, ЭДПрисоединенныйФайл = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("Успех, Ошибки", Ложь, Новый Массив);
	
	ПопыткаОбработки =
		РегистрыСведений.ОчередьПриемаСообщенийЭДО.ДобавитьПопыткуОбработки(ЭДПрисоединенныйФайл);
	
	РегистрыСведений.ОшибкиЭДОКИсправлению.УдалитьЗаписьОбОшибке(ЭД);
	
	ДанныеВыполненияОперации = НовыеДанныеСозданияДокументаДО(ЭД, ЭДПрисоединенныйФайл, ПопыткаОбработки);
	
	НачатьТранзакцию();
	Попытка
		
		РезультатПолученияДанных = ПолучитьДанныеДляСозданияДокументаДО(ДанныеВыполненияОперации);
		
		Если Не РезультатПолученияДанных.Успех Тогда
			ОтменитьТранзакцию();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.Ошибки,
				РезультатПолученияДанных.Ошибки);
			
			ОбработатьОшибкуСозданияДокументаДО(
				ДанныеВыполненияОперации,
				СтруктураВозврата.Ошибки);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтруктураВозврата.Ошибки,
			РезультатПолученияДанных.Ошибки);
		
		РезультатСоздания = СоздатьДокументДО(ДанныеВыполненияОперации);
		
		Если Не РезультатСоздания.Успех Тогда
			ОтменитьТранзакцию();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.Ошибки,
				РезультатСоздания.Ошибки);
			
			ОбработатьОшибкуСозданияДокументаДО(
				ДанныеВыполненияОперации,
				СтруктураВозврата.Ошибки);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтруктураВозврата.Ошибки,
			РезультатСоздания.Ошибки);
		
		РезультатВыполненияДопОпераций = ВыполнитьОперацииПослеСозданияДокументаДО(ДанныеВыполненияОперации);
		
		Если Не РезультатВыполненияДопОпераций.Успех Тогда
			ОтменитьТранзакцию();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.Ошибки,
				РезультатВыполненияДопОпераций.Ошибки);
			
			ОбработатьОшибкуСозданияДокументаДО(
				ДанныеВыполненияОперации,
				СтруктураВозврата.Ошибки);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтруктураВозврата.Ошибки,
			РезультатВыполненияДопОпераций.Ошибки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ОписаниеПроблемы = Нстр("ru = 'При создании документа возникли ошибки:'")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		СтруктураВозврата.Ошибки.Добавить(Ошибка);
		
		ОбработатьОшибкуСозданияДокументаДО(
			ДанныеВыполненияОперации,
			СтруктураВозврата.Ошибки);
		
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Формирует структуру реквизитов документа 1С:Документооборот на основании электроннного документа
// и помещает ее в св-во "РеквизитыДокументаПоЭД" данных выполнения операции.
//
// Параметры:
//  ДанныеВыполненияОперации - Структура данных по выполнению операции создания документа ДО по входящему ЭД.
//      См. НовыеДанныеСозданияДокументаДО().
// 
// Возвращаемое значение:
//  Структура - описание результата выполнения операции
//      * Успех - Булево - Указывает, была ли успешно завершена операция
//      * Ошибки - Массив из Структура:
//          * Описание - Строка - Описание возникшей проблемы.
//          * ПредметОшибки - ДокументСсылка.ЭлектронныйДокументВходящий - ЭД, при обработке которого возникла ошибка.
//          * Критическая - Булево - Является ли возникшая проблема критической, т.е. приводящей к невозможности
//                                   создать документ ДО по обрабатываему ЭД.
// 
Функция ПолучитьДанныеДляСозданияДокументаДО(ДанныеВыполненияОперации)
	
	СтруктураВозврата = Новый Структура("Успех, Ошибки", Ложь, Новый Массив);
	
	// Определение данных для формирования
	
	ЭД = ДанныеВыполненияОперации.ДанныеЭД.ЭД;
	ЭДПрисоединенныйФайл = ДанныеВыполненияОперации.ДанныеЭД.ЭДПрисоединенныйФайл;
	
	Если Не (ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
			Или ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")) Тогда
		
		ОписаниеПроблемы = Нстр("ru = 'Попытка загрузки ЭД неизвестного типа.'");
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		СтруктураВозврата.Ошибки.Добавить(Ошибка);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭДПрисоединенныйФайл) Тогда
		ЭДПрисоединенныйФайл = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭД);
		
		ДанныеВыполненияОперации.ДанныеЭД.ЭДПрисоединенныйФайл = ЭДПрисоединенныйФайл;
	КонецЕсли;
	
	ВыборкаДопДанные = ОбменСКонтрагентамиСлужебный.ВыборкаДопДанныеЭД(ЭД);
	Если ВыборкаДопДанные.Следующий() Тогда
		ЭДДопДанных = ВыборкаДопДанные.Ссылка;
		ФайлДопДанныхСсылка = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеЭД(ЭДДопДанных);
	КонецЕсли;
	
	// Получение реквизитов документа и файла ЭД
	
	СтруктураПараметров = Новый Структура;
	
	ДокументыУчета = Новый Массив;
	СтруктураПараметров.Вставить("ДокументыУчета",	  ДокументыУчета);
	СтруктураПараметров.Вставить("НаправлениеЭД",     Перечисления.НаправленияЭД.Входящий);
	СтруктураПараметров.Вставить("ЗаполнитьДокумент", Истина);
	
	Если ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
		СтруктураПараметров.Вставить("ФайлДопДанных", ФайлДопДанныхСсылка);
	КонецЕсли;
	
	РеквизитыДокумента = ИменаПередаваемыхРеквизитов();
	РеквизитыДокумента.Вставить("ТребуетсяПодтверждение");
	РеквизитыДокумента.Вставить("Файлы");
				
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЭД,
		"ВидЭД, ТипДокумента, Контрагент, НомерДокументаОтправителя,
		|ДатаДокументаОтправителя, Организация, СуммаДокумента, Комментарий,
		|ТребуетсяПодтверждение, ТребуетсяИзвещение, Текст, УникальныйИД,
		|Номер, Дата, НаименованиеДокументаОтправителя");
			
	РеквизитыЭДПФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЭДПрисоединенныйФайл,
		"ВладелецФайла, НаименованиеФайла, Расширение, ДополнительныеРеквизиты");
		
	ДополнительныеРеквизиты = РеквизитыЭДПФ.ДополнительныеРеквизиты.Получить();
	Если Тип(ДополнительныеРеквизиты) <> Тип("Структура") Тогда
		ДополнительныеРеквизиты = Новый Структура;
	КонецЕсли;
	
	// файл
	
	МассивФайлов = Новый Массив;
	
	СтруктураРазбораЭД = Новый Структура;
	
	ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭДПрисоединенныйФайл);
	СсылкаНаДвоичныеДанныеФайла =
		ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = СсылкаНаДвоичныеДанныеФайла;
	ЗаполнитьЗначенияСвойств(СведенияОФайле, ЭДПрисоединенныйФайл);
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ИмяБезРасширения = РеквизитыЭДПФ.НаименованиеФайла;
	
	Если СтрНайти(Нрег(РеквизитыЭДПФ.Расширение), "xml") > 0 Тогда 
		ПараметрыЭД = Новый Структура;		
		ПараметрыЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
		ПараметрыЭД.Вставить("ФайлДанныхСсылка", СсылкаНаДвоичныеДанныеФайла); 
		ПараметрыЭД.Вставить("ВыводитьСообщенияОбОшибках", Ложь);
			
		СтруктураРазбораЭД = ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИзФайла(ПараметрыЭД);
		
		Если СтруктураРазбораЭД.ЭДПрочитан Тогда
			СтруктураРазбораЭД.Вставить("ИмяСоздания",
				?(ЗначениеЗаполнено(СтруктураРазбораЭД.НаименованиеДокументаОтправителя), 
					СтрШаблон("%1 №%2 от %3", 
						СтруктураРазбораЭД.НаименованиеДокументаОтправителя,
						СтруктураРазбораЭД.НомерДокументаОтправителя,
						Формат(СтруктураРазбораЭД.ДатаДокументаОтправителя, "ДФ=dd.MM.yyyy")),
					""));
						
			Если ЗначениеЗаполнено(СтруктураРазбораЭД.ИмяСоздания) Тогда
				СведенияОФайле.ИмяБезРасширения = СтруктураРазбораЭД.ИмяСоздания;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	СведенияОФайле.РасширениеБезТочки = РеквизитыЭДПФ.Расширение;
			
	ПодписантОтКонтрагента = Неопределено;
	ДатаПодписанияКонтрагентом = Неопределено;
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ЭДПрисоединенныйФайл);
	Если УстановленныеПодписи.Количество() Тогда
		СвойстваПодписи = УстановленныеПодписи[УстановленныеПодписи.ВГраница()];
					
		ПодписантОтКонтрагента = 
			ОбменСКонтрагентамиДОСлужебный.НайтиДобавитьКонтактноеЛицоИзСертификата(
				РеквизитыЭД.Контрагент,
				СвойстваПодписи.Сертификат);
		ДатаПодписанияКонтрагентом = СвойстваПодписи.ДатаПодписи;				
	КонецЕсли; 
	
	СведенияОФайле.Вставить("МассивДанныхОПодписях", УстановленныеПодписи);
	СведенияОФайле.Вставить("ЭДПрисоединенныйФайл", ЭДПрисоединенныйФайл);
	СведенияОФайле.Вставить("ЭлектронныйДокумент", РеквизитыЭДПФ.ВладелецФайла);
	
	МассивФайлов.Добавить(СведенияОФайле);
	
	РеквизитыДокумента.Файлы = МассивФайлов;
	
	РеквизитыДокумента.Вставить(
		"ДоступнаНепосредственнаяКорректировка", 
		Не ОбменСКонтрагентамиДОСлужебный.ВидыЭДКорректируемыеНепосредственно().Найти(РеквизитыЭД.ВидЭД) = Неопределено);
	РеквизитыДокумента.Вставить(
		"ЭтоИсправление", 
		СтруктураРазбораЭД.Свойство("НомерИсправления")
			И ЗначениеЗаполнено(СтруктураРазбораЭД.НомерИсправления));
		
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, РеквизитыЭД);
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ДополнительныеРеквизиты);
	
	// Определение вида документа и настроек ЭДО
	
	ВидДокументаОтпр = Неопределено;
	Если ДополнительныеРеквизиты.Свойство("ВидДокумента")
		И ЗначениеЗаполнено(ДополнительныеРеквизиты.ВидДокумента) Тогда
		
		ВидДокументаОтпр = ДополнительныеРеквизиты.ВидДокумента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидДокументаОтпр) ТОгда
		ВидДокументаОтпр = РеквизитыЭД.ВидЭД;
	КонецЕсли;
	
	ПараметрыДокументаПоВидуЭД = 
		РегистрыСведений.ПравилаУчетаВидовЭДДО.ПараметрыДокументаПоВидуЭД(
			ВидДокументаОтпр,
			РеквизитыЭД.Организация,
			РеквизитыЭД.Контрагент,
			РеквизитыЭД.ТипДокумента);
			
	Если Не ЗначениеЗаполнено(ПараметрыДокументаПоВидуЭД.ВидДокумента) ТОгда
		ПараметрыДокументаПоВидуЭД = 
			РегистрыСведений.ПравилаУчетаВидовЭДДО.ПараметрыДокументаПоВидуЭД(
				РеквизитыЭД.ВидЭД,
				РеквизитыЭД.Организация,
				РеквизитыЭД.Контрагент,
				РеквизитыЭД.ТипДокумента);
	КонецЕсли;		
	
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ПараметрыДокументаПоВидуЭД);
			
	Если Делопроизводство.ИспользоватьВидыВнутреннихДокументов() 
		И Не ЗначениеЗаполнено(РеквизитыДокумента.ВидДокумента) Тогда
		
		ПредставлениеВидаДокумента = "%ВидДокумента%%ТипДокумента%";
		
		ПредставлениеВидаДокумента = СтрЗаменить(ПредставлениеВидаДокумента,
			"%ВидДокумента%",
			РеквизитыЭД.ВидЭД);
		
		Если ЗначениеЗаполнено(РеквизитыЭД.ТипДокумента) Тогда
			ПредставлениеВидаДокумента = СтрЗаменить(ПредставлениеВидаДокумента,
				"%ТипДокумента%",
				СтрШаблон(НСтр("ru = ' типа %1'"), РеквизитыЭД.ТипДокумента));
		Иначе
			ПредставлениеВидаДокумента =
				СтрЗаменить(ПредставлениеВидаДокумента, "%ТипДокумента%", "");
		КонецЕсли;
		
		ОписаниеПроблемы = СтрШаблон(
			Нстр("ru = 'Для ЭД не удалось определить вид документа 1С:Документооборот.'")
			+ Символы.ПС
			+ НСтр("ru = 'Проверьте корректность указания вида документов для вида ЭД %1 в настройках ЭДО по контрагенту %2.'"),
			ПредставлениеВидаДокумента,
			РеквизитыЭД.Контрагент);
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		СтруктураВозврата.Ошибки.Добавить(Ошибка);
		
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	// Прочие реквизиты
					
	Если ДополнительныеРеквизиты.Свойство("Сумма") И 
		ЗначениеЗаполнено(ДополнительныеРеквизиты.Сумма) Тогда
		
		РеквизитыДокумента.Сумма = XMLЗначение(Тип("Число"),РеквизитыДокумента.Сумма);
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЭД.СуммаДокумента) Тогда
		
		РеквизитыДокумента.Сумма = РеквизитыЭД.СуммаДокумента;
	ИначеЕсли СтруктураРазбораЭД.Свойство("СуммаДокумента") 
		И ЗначениеЗаполнено(СтруктураРазбораЭД.СуммаДокумента) Тогда
		
		РеквизитыДокумента.Сумма = СтруктураРазбораЭД.СуммаДокумента;
	КонецЕсли;
	
	Если ДополнительныеРеквизиты.Свойство("СуммаНДС") И 
		ЗначениеЗаполнено(ДополнительныеРеквизиты.СуммаНДС) Тогда
		
		РеквизитыДокумента.СуммаНДС = XMLЗначение(Тип("Число"),РеквизитыДокумента.СуммаНДС);
	ИначеЕсли СтруктураРазбораЭД.Свойство("СуммаНДС")
		И ЗначениеЗаполнено(СтруктураРазбораЭД.СуммаНДС) Тогда
		
		РеквизитыДокумента.СуммаНДС = СтруктураРазбораЭД.СуммаНДС;
	КонецЕсли;
	
	Если ДополнительныеРеквизиты.Свойство("Валюта")
		И ЗначениеЗаполнено(ДополнительныеРеквизиты.Валюта) Тогда
		
		СписокВалют = Новый Массив; 
		СписокВалют.Добавить(ДополнительныеРеквизиты.Валюта);
		СсылкиНаВалюту = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(СписокВалют);
		
		Если ЗначениеЗаполнено(СсылкиНаВалюту) Тогда
			РеквизитыДокумента.Валюта = СсылкиНаВалюту[0];
		КонецЕсли;
		
	ИначеЕсли СтруктураРазбораЭД.Свойство("ВалютаКод")
		И ЗначениеЗаполнено(СтруктураРазбораЭД.ВалютаКод) Тогда
		
		СписокВалют = Новый Массив; 
		СписокВалют.Добавить(СтруктураРазбораЭД.ВалютаКод);
		СсылкиНаВалюту = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(СписокВалют);
		
		Если ЗначениеЗаполнено(СсылкиНаВалюту) Тогда
			РеквизитыДокумента.Валюта = СсылкиНаВалюту[0];
		КонецЕсли;
		
	ИначеЕсли СтруктураРазбораЭД.Свойство("Валюта")
		И ЗначениеЗаполнено(СтруктураРазбораЭД.Валюта) Тогда
		
		РеквизитыДокумента.Валюта = СтруктураРазбораЭД.Валюта;
		
	КонецЕсли;
	
	Если ДополнительныеРеквизиты.Свойство("ДатаНачалаДействия") И 
		ЗначениеЗаполнено(ДополнительныеРеквизиты.ДатаНачалаДействия) Тогда
		РеквизитыДокумента.ДатаНачалаДействия =
			XMLЗначение(Тип("Дата"),РеквизитыДокумента.ДатаНачалаДействия);
	КонецЕсли;
	
	Если ДополнительныеРеквизиты.Свойство("ДатаОкончанияДействия") И 
		ЗначениеЗаполнено(ДополнительныеРеквизиты.ДатаОкончанияДействия) Тогда
		РеквизитыДокумента.ДатаОкончанияДействия =
			XMLЗначение(Тип("Дата"),РеквизитыДокумента.ДатаОкончанияДействия);
	КонецЕсли;
	
	Если ДополнительныеРеквизиты.Свойство("Бессрочный") И 
		ЗначениеЗаполнено(ДополнительныеРеквизиты.Бессрочный) Тогда
		РеквизитыДокумента.Бессрочный =
			XMLЗначение(Тип("Булево"),РеквизитыДокумента.Бессрочный);
	КонецЕсли;
	
	// Заполнение реквизитов по правилам отражения в настройках ЭДО
	
	РеквизитыПоПравилу = Новый Структура("Папка, Ответственный, ВопросДеятельности");
	
	Если ЗначениеЗаполнено(ПараметрыДокументаПоВидуЭД.Шаблон) Тогда
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыДокументаПоВидуЭД.Шаблон,
			"Папка, Ответственный, ВопросДеятельности");
		
		ЗаполнитьЗначенияСвойств(РеквизитыПоПравилу, РеквизитыШаблона);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДокументаПоВидуЭД.Папка) Тогда
		РеквизитыПоПравилу.Папка = ПараметрыДокументаПоВидуЭД.Папка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДокументаПоВидуЭД.Ответственный) Тогда
		РеквизитыПоПравилу.Ответственный = ПараметрыДокументаПоВидуЭД.Ответственный;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДокументаПоВидуЭД.ВопросДеятельности) Тогда
		РеквизитыПоПравилу.ВопросДеятельности = ПараметрыДокументаПоВидуЭД.ВопросДеятельности;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, РеквизитыПоПравилу);
	
	// Заполнение строковых полей по шаблону
	
	ПараметрыЗаполненияСтроковыхПолей =
		ПараметрыЗаполненияСтроковыхПолей(РеквизитыЭД, ЭД, ЭДПрисоединенныйФайл);
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Сумма) Тогда
		ПараметрыЗаполненияСтроковыхПолей.Сумма = РеквизитыДокумента.Сумма;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Валюта) Тогда
		ПараметрыЗаполненияСтроковыхПолей.Валюта = РеквизитыДокумента.Валюта;
	КонецЕсли;
	
	ПараметрыЗаполненияСтроковыхПолей.Шаблон = ПараметрыДокументаПоВидуЭД.Шаблон;
	ПараметрыЗаполненияСтроковыхПолей.Ответственный = ПараметрыДокументаПоВидуЭД.Ответственный;
	ПараметрыЗаполненияСтроковыхПолей.Папка = ПараметрыДокументаПоВидуЭД.Папка;
	ПараметрыЗаполненияСтроковыхПолей.ВопросДеятельности = ПараметрыДокументаПоВидуЭД.ВопросДеятельности;
	
	РезультатЗаполненияНаименования = ЗаполнитьСтроковыеПараметрыПоШаблону(
		ПараметрыДокументаПоВидуЭД.ШаблонНаименования,
		ПараметрыЗаполненияСтроковыхПолей,
		"ДеревоПараметровСозданияДокумента");
	
	РезультатЗаполненияСодержания = ЗаполнитьСтроковыеПараметрыПоШаблону(
		ПараметрыДокументаПоВидуЭД.ШаблонСодержания,
		ПараметрыЗаполненияСтроковыхПолей,
		"ДеревоПараметровСозданияДокумента");
	
	Наименование = "";
	Содержание = "";
	
	Если Не РезультатЗаполненияНаименования.Успех Тогда
		ОписаниеПроблемы =
			НСтр("ru = 'Не удалось заполнить наименование по шаблону по причине:'")
			+ Символы.ПС
			+ РезультатЗаполненияНаименования.Описание
			+ Символы.ПС
			+ НСтр("ru = 'Документу будет присвоено стандартное наименование.'");
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ЭД);
		Ошибка.Вставить("Критическая", Ложь);
		
		СтруктураВозврата.Ошибки.Добавить(Ошибка);
		
	Иначе
		Наименование = РезультатЗаполненияНаименования.ЗаполненнаяСтрока;
	КонецЕсли;
	
	Если Не РезультатЗаполненияСодержания.Успех Тогда
		ОписаниеПроблемы =
			НСтр("ru = 'Не удалось заполнить содержание по шаблону по причине:'")
			+ Символы.ПС
			+ РезультатЗаполненияСодержания.Описание;
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ЭД);
		Ошибка.Вставить("Критическая", Ложь);
		
		СтруктураВозврата.Ошибки.Добавить(Ошибка);
		
	Иначе
		Содержание = РезультатЗаполненияСодержания.ЗаполненнаяСтрока;
	КонецЕсли;
	
	Если ПустаяСтрока(Наименование) Тогда
		ОписаниеПроблемы =
			НСтр("ru = 'Не заполнено наименование, документу будет присвоено стандартное наименование.'");
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ЭД);
		Ошибка.Вставить("Критическая", Ложь);
		
		СтруктураВозврата.Ошибки.Добавить(Ошибка);
		
		ПредставлениеВидаДокумента = "%ВидДокумента%%ТипДокумента%";
		
		ПредставлениеВидаДокумента = СтрЗаменить(
				ПредставлениеВидаДокумента,
				"%ВидДокумента%",
				РеквизитыЭД.ВидЭД);
		
		Если ЗначениеЗаполнено(РеквизитыЭД.ТипДокумента) Тогда
			ПредставлениеВидаДокумента = СтрЗаменить(
				ПредставлениеВидаДокумента,
				"%ТипДокумента%",
				СтрШаблон(", %1", РеквизитыЭД.ТипДокумента));
		Иначе
			ПредставлениеВидаДокумента = СтрЗаменить(
				ПредставлениеВидаДокумента,
				"%ТипДокумента%",
				"");
		КонецЕсли;
		
		Наименование = СтрШаблон(
			НСтр("ru = 'Документ ЭДО (%1) №%2 от %3'"),
			ПредставлениеВидаДокумента,
			РеквизитыЭД.НомерДокументаОтправителя,
			Формат(РеквизитыЭД.ДатаДокументаОтправителя, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	РеквизитыДокумента.Вставить("Заголовок", Наименование);
	РеквизитыДокумента.Вставить("Содержание", Содержание);
	
	РеквизитыДокумента.ДатаСоздания = ТекущаяДатаСеанса();
	
	// Заполнение сторон
	
	Стороны = Новый ТаблицаЗначений;
	Стороны.Колонки.Добавить("Сторона");
	Стороны.Колонки.Добавить("КонтактноеЛицо");
	Стороны.Колонки.Добавить("ДатаПодписи");
	Стороны.Колонки.Добавить("Подписан");
	Стороны.Колонки.Добавить("Подписал");
	
	Сторона = Стороны.Добавить();
	Сторона.Сторона = РеквизитыЭД.Организация;
	
	Сторона = Стороны.Добавить();
	Сторона.Сторона = РеквизитыЭД.Контрагент;
	Если ДополнительныеРеквизиты.Свойство("КонтактноеЛицо") И 
		ЗначениеЗаполнено(ДополнительныеРеквизиты.КонтактноеЛицо) Тогда
		
		Сторона.КонтактноеЛицо = ДополнительныеРеквизиты.КонтактноеЛицо;
	КонецЕсли;
	Сторона.ДатаПодписи = ДатаПодписанияКонтрагентом;
	Сторона.Подписан = Истина;
	Сторона.Подписал = ПодписантОтКонтрагента;

	РеквизитыДокумента.Стороны = Стороны;
	
	// Документы-основания
	
	РеквизитыДокумента.Вставить("ДокументыОснования", Неопределено);
	Если ЭД.ИдентификаторыОснованийВладельцаФайла.Количество() Тогда
		СтруктураПараметровПоиска = Новый Структура;
		СтруктураПараметровПоиска.Вставить("Организация", РеквизитыЭД.Организация);
		СтруктураПараметровПоиска.Вставить("Контрагент", РеквизитыЭД.Контрагент);
		СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
		
		ТЗПолученныхОснований =
			ОбменСКонтрагентамиВнутренний.ТаблицаЗначенийДокументовОснованийПоИдентификаторам(
				ЭД.ИдентификаторыОснованийВладельцаФайла.ВыгрузитьКолонку("ИдентификаторДокументаОснования"), 
				СтруктураПараметровПоиска);
				
		РеквизитыДокумента.Вставить("ДокументыОснования", ТЗПолученныхОснований);
	КонецЕсли;
	
	// Контроль заполнения реквизитов
	
	ОбязательноеУказаниеОтветственного =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			РеквизитыДокумента.ВидДокумента,
			"ОбязательноеУказаниеОтветственного");
	
	ОбязательныеДляЗаполненияРеквизиты = Новый Массив;
	Если ОбязательноеУказаниеОтветственного Тогда
		ОбязательныеДляЗаполненияРеквизиты.Добавить("Ответственный");
	КонецЕсли;
	ОбязательныеДляЗаполненияРеквизиты.Добавить("Папка");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		ОбязательныеДляЗаполненияРеквизиты.Добавить("ВопросДеятельности");
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	СписокНезаполненныхРеквизитов = Новый Массив;
	
	Для каждого ИмяРеквизита Из ОбязательныеДляЗаполненияРеквизиты Цикл
		Если Не ЗначениеЗаполнено(РеквизитыДокумента[ИмяРеквизита]) Тогда
			ЕстьОшибки = Истина;
			СписокНезаполненныхРеквизитов.Добавить(ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		
		ПредставлениеВидаДокумента = "%ВидДокумента%%ТипДокумента%";
		
		ПредставлениеВидаДокумента = СтрЗаменить(ПредставлениеВидаДокумента,
			"%ВидДокумента%",
			РеквизитыЭД.ВидЭД);
		
		Если ЗначениеЗаполнено(РеквизитыЭД.ТипДокумента) Тогда
			ПредставлениеВидаДокумента = СтрЗаменить(ПредставлениеВидаДокумента,
				"%ТипДокумента%",
				СтрШаблон(НСтр("ru = ' типа %1'"), РеквизитыЭД.ТипДокумента));
		Иначе
			ПредставлениеВидаДокумента =
				СтрЗаменить(ПредставлениеВидаДокумента, "%ТипДокумента%", "");
		КонецЕсли;
		
		ТекстНезаполненныхРеквизитов = СписокНезаполненныхРеквизитов[0];
		КоличествоНезаполненныхРеквизитов = СписокНезаполненныхРеквизитов.Количество();
		
		Для Индекс = 1 По КоличествоНезаполненныхРеквизитов - 2 Цикл
			ТекстНезаполненныхРеквизитов = ТекстНезаполненныхРеквизитов +
				", " + СписокНезаполненныхРеквизитов[Индекс];
		КонецЦикла;
		
		Если КоличествоНезаполненныхРеквизитов > 1 Тогда
			ТекстНезаполненныхРеквизитов = ТекстНезаполненныхРеквизитов +
				" и " + СписокНезаполненныхРеквизитов[КоличествоНезаполненныхРеквизитов - 1];
		КонецЕсли;
		
		ОписаниеПроблемы = СтрШаблон(
			Нстр("ru = 'Не удалось определить следующие реквизиты внутреннего документа: %1'")
			+ Символы.ПС
			+ НСтр("ru = 'Проверьте корректность указания этих реквизитов для вида ЭД %2 в настройках ЭДО по контрагенту %3.'"),
			ТекстНезаполненныхРеквизитов,
			ПредставлениеВидаДокумента,
			РеквизитыЭД.Контрагент);
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		СтруктураВозврата.Ошибки.Добавить(Ошибка);
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ДанныеВыполненияОперации.РеквизитыДокументаПоЭД = РеквизитыДокумента;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Формирует документ 1C:Документооборот по входящему ЭД и записывает его в ДанныеВыполненияОперации.ДанныеДокументаДО.Документ
//
// Параметры:
//  ДанныеВыполненияОперации - Структура данных по выполнению операции создания документа ДО по входящему ЭД.
//      См. НовыеДанныеСозданияДокументаДО().
// 
// Возвращаемое значение:
//  Структура - описание результата выполнения операции
//      * Успех - Булево - Указывает, была ли успешно завершена операция
//      * Ошибки - Массив из Структура:
//          * Описание - Строка - Описание возникшей проблемы.
//          * ПредметОшибки - ДокументСсылка.ЭлектронныйДокументВходящий - ЭД, при обработке которого возникла ошибка.
//          * Критическая - Булево - Является ли возникшая проблема критической, т.е. приводящей к невозможности
//                                   создать документ ДО по обрабатываему ЭД.
// 
Функция СоздатьДокументДО(ДанныеВыполненияОперации)
	
	СтруктураВозврата = Новый Структура("Успех, Ошибки", Ложь, Новый Массив);
	
	РеквизитыДокумента = ДанныеВыполненияОперации.РеквизитыДокументаПоЭД;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СозданныйДокумент = Неопределено;
	
	ФайлОснование = Неопределено;
	ДокументОснование = Неопределено;
	ЭтоИсправление = Ложь;
	
	Если ТипЗнч(РеквизитыДокумента.ДокументыОснования) = Тип("ТаблицаЗначений") 
			И РеквизитыДокумента.ДокументыОснования.Количество() Тогда
			
		Для Каждого ОписаниеОснования ИЗ РеквизитыДокумента.ДокументыОснования Цикл
			ДокументОснование = ПолучитьДокументПоВерсииФайла(ОписаниеОснования.Ссылка);
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				ФайлОснование = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						ОписаниеОснования.Ссылка,
						"Владелец");
				ЭтоИсправление =
					ОжидаетсяКорректировкаДокумента(
						ДокументОснование,
						РеквизитыДокумента.ВидДокумента);
				
				Если ЭтоИсправление Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РежимОбновления = РеквизитыДокумента.ДоступнаНепосредственнаяКорректировка И ЭтоИсправление;
	
	Если РежимОбновления Тогда
		Документ = ДокументОснование.ПолучитьОбъект();
	Иначе
		Если Делопроизводство.ИспользоватьВидыВнутреннихДокументов() 
				И Не ЗначениеЗаполнено(РеквизитыДокумента.ВидДокумента) Тогда
				
			ОписаниеПроблемы =
				НСтр("ru = 'Не указан вид документа. Проверьте корректность настроек обмена ЭДО.'");
		
			Ошибка = Новый Структура;
			Ошибка.Вставить("Описание", ОписаниеПроблемы);
			Ошибка.Вставить("ПредметОшибки", ДанныеВыполненияОперации.ДанныеЭД.ЭД);
			Ошибка.Вставить("Критическая", Истина);
			
			СтруктураВозврата.Ошибки.Добавить(Ошибка);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		Документ = Справочники.ВнутренниеДокументы.СоздатьЭлемент();
		Документ.Источник = Справочники.ИсточникиДанных.ЭДО;
	КонецЕсли;
			
	Документ.Заполнить(РеквизитыДокумента);
	Документ.Записать();
	
	Если Не РежимОбновления И ЭтоИсправление И ЗначениеЗаполнено(ДокументОснование) Тогда
		СвязиДокументов.СоздатьСвязь(
			Документ.Ссылка, 
			ДокументОснование, 
			Справочники.ТипыСвязей.ИсправлениеК);
	КонецЕсли;
	
	Для Каждого СведенияОФайле Из РеквизитыДокумента.Файлы цикл
		
		Если РежимОбновления Тогда
			РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
				ФайлОснование,
				СведенияОФайле);
			Файл = ФайлОснование;
		Иначе
			Файл = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
				Документ.Ссылка,
				СведенияОФайле);
		КонецЕсли;
		
		ВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
		
		Если СведенияОФайле.МассивДанныхОПодписях.Количество() Тогда
			СведенияОПодписи = Новый Массив;
			Для Каждого Элемент Из СведенияОФайле.МассивДанныхОПодписях Цикл
				СведенияОПодписи.Добавить(
					Новый Структура("ПодписанныйОбъект, СвойстваПодписи", Файл, Элемент));
			КонецЦикла;
			
			РаботаСЭП.ЗанестиИнформациюОПодписях(СведенияОПодписи);
		КонецЕсли;
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ЭлектронныйДокументВходящий");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СведенияОФайле.ЭлектронныйДокумент);
		
		БлокировкаДанных.Заблокировать();
		
		ВходящийЭД = СведенияОФайле.ЭлектронныйДокумент.ПолучитьОбъект();
		Если РежимОбновления Тогда
			ВходящийЭД.ДокументыОснования.Очистить();
		КонецЕсли;
		НоваяСтрока = ВходящийЭД.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = ВерсияФайла;
		ВходящийЭД.Записать();
		
		ОбменСКонтрагентамиСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(
			ВерсияФайла, СведенияОФайле.ЭлектронныйДокумент);
		
	КонецЦикла;
	
	ДанныеВыполненияОперации.ДанныеДокументаДО.Документ = Документ.Ссылка;
	
	СтруктураВозврата.Успех = Истина;
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет запись в регистры, необходимые для обработки созданного документа ДО.
// 
// Параметры:
//  ДанныеВыполненияОперации - Структура данных по выполнению операции создания документа ДО по входящему ЭД.
//      См. НовыеДанныеСозданияДокументаДО().
// 
// Возвращаемое значение:
//  Структура - описание результата выполнения операции
//      * Успех - Булево - Указывает, была ли успешно завершена операция
//      * Ошибки - Массив из Структура:
//          * Описание - Строка - Описание возникшей проблемы.
//          * ПредметОшибки - ДокументСсылка.ЭлектронныйДокументВходящий - ЭД, при обработке которого возникла ошибка.
//          * Критическая - Булево - Является ли возникшая проблема критической, т.е. приводящей к невозможности
//                                   создать документ ДО по обрабатываему ЭД.
// 
Функция ВыполнитьОперацииПослеСозданияДокументаДО(ДанныеВыполненияОперации)
	
	СтруктураВозврата = Новый Структура("Успех, Ошибки", Ложь, Новый Массив);
	
	ДокументДО = ДанныеВыполненияОперации.ДанныеДокументаДО.Документ;
	ФайлЭД = ДанныеВыполненияОперации.ДанныеЭД.ЭДПрисоединенныйФайл;
	
	Попытка
		РегистрыСведений.ОчередьПриемаСообщенийЭДО.УдалитьЗапись(ФайлЭД);
	Исключение
		ОписаниеПроблемы =
			НСтр("ru = 'Не удалось удалить присоединенный файл из очереди сообщений ЭДО по причине:'")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ДанныеВыполненияОперации.ДанныеЭД.ЭД);
		Ошибка.Вставить("Критическая", Истина);
		
		СтруктураВозврата.Ошибки.Добавить(Ошибка);
		
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	ОтветственныйЗаДокумент =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДокументДО,
			"Ответственный");
	Если Не ЗначениеЗаполнено(ОтветственныйЗаДокумент) Тогда
		Попытка
			РегистрыСведений.ПроверкаЗагруженныхДанных.УстановитьПризнакПроверки(
				ДокументДО,
				Ложь);
		Исключение
			ОписаниеПроблемы =
				НСтр("ru = 'Не удалось установить признак проверки документа по причине:'")
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
			Ошибка = Новый Структура;
			Ошибка.Вставить("Описание", ОписаниеПроблемы);
			Ошибка.Вставить("ПредметОшибки", ДанныеВыполненияОперации.ДанныеЭД.ЭД);
			Ошибка.Вставить("Критическая", Истина);
			
			СтруктураВозврата.Ошибки.Добавить(Ошибка);
			
			Возврат СтруктураВозврата;
		КонецПопытки;
	КонецЕсли;
	
	// Проверяем, поступило ли предложение на аннулирование, еще до создания документа ДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ФайлПредложенияОбАннулировании
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ЭД
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД";
	
	Запрос.УстановитьПараметр("ЭД", ДанныеВыполненияОперации.ДанныеЭД.ЭД);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПОА);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Попытка
			ОбработатьПолучениеПредложенияОбАннулировании(Выборка.ФайлПредложенияОбАннулировании);
		Исключение
			ОписаниеПроблемы =
				НСтр("ru = 'Не удалось создать документ предложения об аннулировании по причине:'")
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
			Ошибка = Новый Структура;
			Ошибка.Вставить("Описание", ОписаниеПроблемы);
			Ошибка.Вставить("ПредметОшибки", ДанныеВыполненияОперации.ДанныеЭД.ЭД);
			Ошибка.Вставить("Критическая", Истина);
			
			СтруктураВозврата.Ошибки.Добавить(Ошибка);
			
			Возврат СтруктураВозврата;
		КонецПопытки;
	КонецЕсли;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
КонецФункции

Функция ИменаПередаваемыхРеквизитов() Экспорт
	
	СтруктураИменПередаваемыхРеквизитов = Новый Структура;
	СтруктураИменПередаваемыхРеквизитов.Вставить("ВидДокумента");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КонтактноеЛицо");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Стороны");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ДатаСоздания");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("Сумма");
	СтруктураИменПередаваемыхРеквизитов.Вставить("СуммаНДС");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Валюта");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоЛистов");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоПриложений");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоЭкземпляров");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ЛистовВПриложениях");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("Папка");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Ответственный");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ВопросДеятельности");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("ДатаНачалаДействия");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ДатаОкончанияДействия");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Бессрочный");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ПорядокПродления");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("ИдентификаторДокументаДО");
	
	Возврат СтруктураИменПередаваемыхРеквизитов;
	
КонецФункции

Функция ОжидаетсяКорректировкаДокумента(Документ, ОжидаемыйВидДокумента)
	
	ОжидаетсяКорретировка = Ложь;
	
	Если Не ЗначениеЗаполнено(Документ) 
		Или Не ОжидаемыйВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента") Тогда
		
		Возврат ОжидаетсяКорретировка;
	КонецЕсли;
	
	СостяниеДокумента = ОбменСКонтрагентамиДОВызовСервера.ДанныеСостоянияДокументаПоЭДО(Документ);
	Если СостяниеДокумента = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяИсправление
			Или СостяниеДокумента = Перечисления.СостоянияВерсийЭДДО.ТребуетсяУточнитьДокумент
			Или СостяниеДокумента = Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем Тогда
			
		ОжидаетсяКорретировка = Истина;
	КонецЕсли;
	
	Возврат ОжидаетсяКорретировка;
		
КонецФункции

Функция ПолучитьДокументПоВерсииФайла(Версия)
	
	Если Не ТипЗнч(Версия) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		Возврат Неопределено;
	КонецЕсли;
				
	Документ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Версия, "Владелец.ВладелецФайла");
	Если ЗначениеЗаполнено(Документ) И ДелопроизводствоКлиентСервер.ЭтоДокумент(Документ) Тогда
		Возврат Документ;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Инициализует структуру данных выполнения операции создания документа ДО по входящему ЭД.
//
// Параметры:
//  ЭД - Документ.ЭлектронныйДокументВходящий - ссылка на электронынй документ, по которому необходимо создать документ ДО.
//      Будет помещен в ДанныеВыполненияОперации.ДанныеЭД.ЭД
//  ЭДПрисоединенныйФайл - Справочник.ЭДПрисоединенныеФайлы - ссылка на файл ЭД
//      Будет помещен в ДанныеВыполненияОперации.ДанныеЭД.ЭДПрисоединенныйФайл
//  ПопыткаОбработки - Число - Текущая попытка обработки документа в очереди приема сообщений ЭДО
// 
Функция НовыеДанныеСозданияДокументаДО(ЭД, ЭДПрисоединенныйФайл, ПопыткаОбработки)
	ДанныеВыполненияОперации = Новый Структура;
	
	//Общие
	ДанныеВыполненияОперации.Вставить("Описание",         "");
	ДанныеВыполненияОперации.Вставить("ПопыткаОбработки", ПопыткаОбработки);
	
	//Данные документа ДО
	ДанныеДокументаДО = Новый Структура;
	ДанныеДокументаДО.Вставить("Документ",           Неопределено);
	ДанныеДокументаДО.Вставить("ПрисоединенныйФайл", Неопределено);
	
	ДанныеВыполненияОперации.Вставить("ДанныеДокументаДО", ДанныеДокументаДО);
	
	//Данные ЭД
	ДанныеЭД = Новый Структура;
	ДанныеЭД.Вставить("ЭД",                   ЭД);
	ДанныеЭД.Вставить("ЭДПрисоединенныйФайл", ЭДПрисоединенныйФайл);
	
	ДанныеВыполненияОперации.Вставить("ДанныеЭД", ДанныеЭД);
	
	//Данные, заполняемые по ходу выполнения операции
	ДанныеВыполненияОперации.Вставить("РеквизитыДокументаПоЭД", Неопределено);
	
	Возврат ДанныеВыполненияОперации;
КонецФункции

// Возвращает выборку из результатов запроса Электронных документов для создания документов ДО
//
// Параметры:
//  МассивЭД - Массив элементов типа СправочникСсылка.ЭДПрисоединенныеФайлы, те ЭД, которые нужно обработать
// 
// Возвращаемое значение:
//  Выборка - Выборка из результата запроса с полями:
//      * ВходящийЭД - ДокументСсылка.ЭлектронныйДокументВходящий - Входящий ЭД.
//      * ЭДПрисоединенныйФайл - СправочникСсылка.ЭДПрисоединенныеФайлы - Присоединенный файл ЭД.
Функция ВыборкаВходящихЭДДляОбработки(МассивЭД = Неопределено)
		
	Если ТипЗнч(МассивЭД) = Тип("Массив")
		И МассивЭД.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭДПрисоединенныйФайл,
			|	ЭлектронныйДокументВходящий.Ссылка КАК ВходящийЭД
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
			|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокументВходящий.Ссылка
			|ГДЕ
			|	ЭлектронныйДокументВходящий.Ссылка В(&МассивЭД)
			|	И НЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыЭД)
			|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыПервичныхЭД)
			|	И НЕ ЭлектронныйДокументВходящий.СостояниеЭДО В (&СостоянияЭДО)";
		Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
		
		СостоянияЭДО = Новый Массив;
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.Аннулирован);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.НеСформирован);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ОшибкаПередачи);
		Запрос.УстановитьПараметр("СостоянияЭДО", СостоянияЭДО);
		
		СтатусыЭД = Новый Массив;
		СтатусыЭД.Добавить(Перечисления.СтатусыЭД.Аннулирован);
		СтатусыЭД.Добавить(Перечисления.СтатусыЭД.Отклонен);
		СтатусыЭД.Добавить(Перечисления.СтатусыЭД.ОшибкаПередачи);
		Запрос.УстановитьПараметр("СтатусыЭД", СтатусыЭД);
		
		ТипыПервичныхЭД = ОбменСКонтрагентамиСлужебный.ТипыПервичныхЭД();
		Запрос.УстановитьПараметр("ТипыПервичныхЭД", ТипыПервичныхЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВходящиеЭД.Ссылка КАК ВходящийЭД,
			|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭДПрисоединенныйФайл
			|ИЗ
			|	РегистрСведений.ОчередьПриемаСообщенийЭДО КАК ОчередьПриемаСообщенийЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ПО ОчередьПриемаСообщенийЭДО.ЭДПрисоединенныйФайл = ЭДПрисоединенныеФайлы.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ВходящиеЭД
			|		ПО (ЭДПрисоединенныеФайлы.ВладелецФайла = ВходящиеЭД.Ссылка)
			|ГДЕ
			|	НЕ ВходящиеЭД.ПометкаУдаления
			|	И НЕ ВходящиеЭД.СостояниеЭДО В (&СостоянияЭДО)
			|	И НЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыЭД)
			|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыПервичныхЭД)
			|	И ОчередьПриемаСообщенийЭДО.КоличествоПопытокОбработки < 3";
		
		СостоянияЭДО = Новый Массив;
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.Аннулирован);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.НеСформирован);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование);
		СостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
		Запрос.УстановитьПараметр("СостоянияЭДО", СостоянияЭДО);
		
		СтатусыЭД = Новый Массив;
		СтатусыЭД.Добавить(Перечисления.СтатусыЭД.Аннулирован);
		СтатусыЭД.Добавить(Перечисления.СтатусыЭД.Отклонен);
		СтатусыЭД.Добавить(Перечисления.СтатусыЭД.ОшибкаПередачи);
		
		Запрос.УстановитьПараметр("СтатусыЭД", СтатусыЭД);
		
		ТипыПервичныхЭД = ОбменСКонтрагентамиСлужебный.ТипыПервичныхЭД();
		Запрос.УстановитьПараметр("ТипыПервичныхЭД", ТипыПервичныхЭД);
						
		Выборка = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
	
	Возврат Выборка;
КонецФункции

// Обрабатывает ошибки, возникшие при создании документа 1С:Документооборот по данным входящих ЭД.
// Если количество попыток обработки меньше трех, то происходить запись ошибок в ЖР.
// Если количество попыток обработки три и больше - происходит удаление ЭД из очереди приема,
// установка ЭД и файлу ЭД статуса "ОшибкаПередачи" и добавление ошибки в список к исправлению.
// 
// Парамтеры:
//  ДанныеВыполненияОперации - Структура - Данные выполнения операции, см. НовыеДанныеСозданияДокументаДО()
//  Ошибки - Массив из Структура:
//      * Описание - Строка - Описание возникшей проблемы.
//      * ПредметОшибки - ДокументСсылка.ЭлектронныйДокументВходящий - ЭД, при обработке которого возникла ошибка.
//      * Критическая - Булево - Является ли возникшая проблема критической, т.е. приводящей к невозможности
//                               создать документ ДО по обрабатываему ЭД.
// 
Процедура ОбработатьОшибкуСозданияДокументаДО(ДанныеВыполненияОперации, Ошибки)
	
	СтрокиОшибок = Новый Массив;
	
	Для Каждого Ошибка Из Ошибки Цикл
		СтрокиОшибок.Добавить(Ошибка.Описание);
	КонецЦикла;
	
	ОписаниеПроблемы = СтрСоединить(СтрокиОшибок, Символы.ПС);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСозданияДокументовДОНаОснованииЭД(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.НайтиПоТипу(ТипЗнч(ДанныеВыполненияОперации.ДанныеЭД.ЭД)),
		ДанныеВыполненияОперации.ДанныеЭД.ЭД,
		СтрШаблон(НСтр("ru = 'При создании документа 1С:Документооборот по входящему ЭД %1 возникли проблемы:'"),
			ДанныеВыполненияОперации.ДанныеЭД.ЭД)
			+ Символы.ПС
			+ ОписаниеОшибки());
	
	Если ДанныеВыполненияОперации.ПопыткаОбработки > 2 Тогда
		
		НачатьТранзакцию();
		Попытка
			РегистрыСведений.ОшибкиЭДОКИсправлению.ДобавитьЗаписьОбОшибке(
				ДанныеВыполненияОперации.ДанныеЭД.ЭД,
				ОписаниеПроблемы);
			
			РегистрыСведений.ОчередьПриемаСообщенийЭДО.УдалитьЗапись(
				ДанныеВыполненияОперации.ДанныеЭД.ЭДПрисоединенныйФайл);
			
			УстановитьСтатусЭДОшибка(ДанныеВыполненияОперации);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Не удалось удалить ЭД из очереди приема сообщений ЭДО.'"),
				УровеньЖурналаРегистрации.Ошибка, , ,
				СтрШаблон(НСтр("ru = 'Не удалось удалить ЭД %1 из очереди приема сообщений ЭДО и сделать запись о ошибке приема по причине:'"),
					ДанныеВыполненияОперации.ДанныеЭД.ЭДПрисоединенныйФайл)
					+ Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает ЭД и файлу ЭД статус "ОшибкаПередачи"
// 
// Парамтеры:
//  ДанныеВыполненияОперации - Структура - Данные выполнения операции, см. НовыеДанныеСозданияДокументаДО()
// 
Процедура УстановитьСтатусЭДОшибка(ДанныеВыполненияОперации)
	
	ДокументОбъект = ДанныеВыполненияОперации.ДанныеЭД.ЭД.ПолучитьОбъект();
	ДокументОбъект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи;
	ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
	
	ДокументОбъект.Записать();
	
	ФайлОбъект = ДанныеВыполненияОперации.ДанныеЭД.ЭДПрисоединенныйФайл.ПолучитьОбъект();
	ФайлОбъект.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи;
	ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
	ФайлОбъект.ДополнительныеСвойства.Вставить("ПринудительнаяСменаСостоянияВерсии", Истина);
	
	ФайлОбъект.Записать();
	
КонецПроцедуры

#Область ПараметрыЗаполненияСтроковыхПолей

// Возвращает структуру параметров строковых полей
//
// Возвращаемое значение:
//  Структура - Структура параметров, доступных для заполнения строковых полей
Функция ПараметрыЗаполненияСтроковыхПолей(РеквизитыЭД, ЭД, ЭДПрисоединенныйФайл)

	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ВидЭД",								РеквизитыЭД.ВидЭД);
	ПараметрыЗаполнения.Вставить("ТипДокумента",						РеквизитыЭД.ТипДокумента);
	ПараметрыЗаполнения.Вставить("ДатаДокументаОтправителя",			РеквизитыЭД.ДатаДокументаОтправителя);
	ПараметрыЗаполнения.Вставить("НомерДокументаОтправителя",			РеквизитыЭД.НомерДокументаОтправителя);
	ПараметрыЗаполнения.Вставить("ДатаЭД",								РеквизитыЭД.Дата);
	ПараметрыЗаполнения.Вставить("НомерЭД",								РеквизитыЭД.Номер);
	ПараметрыЗаполнения.Вставить("Организация",							РеквизитыЭД.Организация);
	ПараметрыЗаполнения.Вставить("Контрагент",							РеквизитыЭД.Контрагент);
	ПараметрыЗаполнения.Вставить("НаименованиеДокументаОтправителя",	РеквизитыЭД.НаименованиеДокументаОтправителя);
	ПараметрыЗаполнения.Вставить("Сумма",								РеквизитыЭД.СуммаДокумента);
	ПараметрыЗаполнения.Вставить("ТекстЭД",								РеквизитыЭД.Текст);
	ПараметрыЗаполнения.Вставить("Валюта",								Неопределено);
	ПараметрыЗаполнения.Вставить("Шаблон",								Неопределено);
	ПараметрыЗаполнения.Вставить("Ответственный",						Неопределено);
	ПараметрыЗаполнения.Вставить("Папка",								Неопределено);
	ПараметрыЗаполнения.Вставить("ВопросДеятельности",					Неопределено);
	
	ПараметрыЗаполнения.Вставить("ВходящийЭД",							ЭД);
	ПараметрыЗаполнения.Вставить("ФайлЭД",								ЭДПрисоединенныйФайл);
	
	Возврат ПараметрыЗаполнения;

КонецФункции // ЗаполнитьСтруктуруПараметровЗаполненияСтроковыхПолей()

// Возвращает дерево параметров для заполнения строковых полей
// 
// Параметры:
//  ИмяМакета - Строка - Имя макета, содержащего описание параметров заполнения строковых полей.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево, содержащее в себе доступные параметры для вывода. Колонки:
//      Представление - Строка - то, как пользователь увидит параметр
//      ПредставлениеПолное - Строка - полный путь до параметра для пользователя
//      ИмяПоля - Строка - Имя поля структуры параметров
//      ПолучатьЗапросом - Булево - Необходимо ли получать данный параметр запросом 
//      ИмяТаблицы - Строка - имя таблицы для построения запроса
//      КлючТаблицы - Строка - имя поля, по которому наложено условие на отбор из таблицы
//      ЗначениеКлючаТаблицы - Строка - имя поля структуры парметров, по значению которого будет наложено условие
//                             см. ПараметрыЗаполненияСтроковыхПолей()
//      ДоступноДляВыбора - Булево - Доступен ли данный параметр для выбора
Функция ДеревоПараметровЗаполненияСтроковыхПолей(ИмяМакета = "ДеревоПараметровСозданияДокумента") Экспорт
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет(ИмяМакета);
	ОбластьЗаголовоков = Макет.Область("C1:C13");
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЗаголовоков);
	Построитель.Выполнить();
	
	ВыборкаДанныхМакета = Построитель.Результат.Выбрать();
	
	ДеревоПараметров = Новый ДеревоЗначений;
	
	ДеревоПараметров.Колонки.Добавить("КодСтроки");
	ДеревоПараметров.Колонки.Добавить("Представление");
	ДеревоПараметров.Колонки.Добавить("ПредставлениеПолное");
	ДеревоПараметров.Колонки.Добавить("ИмяПоля");
	ДеревоПараметров.Колонки.Добавить("ПолучатьЗапросом");
	ДеревоПараметров.Колонки.Добавить("ИмяТаблицы");
	ДеревоПараметров.Колонки.Добавить("КлючТаблицы");
	ДеревоПараметров.Колонки.Добавить("ЗначениеКлючаТаблицы");
	ДеревоПараметров.Колонки.Добавить("ДоступноДляВыбора");
	
	Пока ВыборкаДанныхМакета.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДанныхМакета.ИмяФункциональнойОпции)
			И Не ПолучитьФункциональнуюОпцию(ВыборкаДанныхМакета.ИмяФункциональнойОпции) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Родитель = ДеревоПараметров.Строки.Найти(
			ВыборкаДанныхМакета.КодСтрокиРодителя,
			"КодСтроки",
			Истина);
		
		Если Родитель = Неопределено Тогда
			СтрокаДерева = ДеревоПараметров.Строки.Добавить();
		Иначе
			СтрокаДерева = Родитель.Строки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			СтрокаДерева,
			ВыборкаДанныхМакета,
			"КодСтроки, Представление, ПредставлениеПолное, ИмяПоля");
		
		Если НРег(ВыборкаДанныхМакета.ДоступноДляВыбора) <> "да" Тогда
			СтрокаДерева.ДоступноДляВыбора = Ложь;
			Продолжить;
		Иначе
			СтрокаДерева.ДоступноДляВыбора = Истина;
		КонецЕсли;
		
		Если НРег(ВыборкаДанныхМакета.ПолучатьЗапросом) <> "да" Тогда
			СтрокаДерева.ПолучатьЗапросом = Ложь;
		Иначе
			
			СтрокаДерева.ПолучатьЗапросом = Истина;
			ЗаполнитьЗначенияСвойств(
				СтрокаДерева,
				ВыборкаДанныхМакета,
				"ИмяТаблицы, КлючТаблицы, ЗначениеКлючаТаблицы");
			
		КонецЕсли;
		
		Если НРег(ВыборкаДанныхМакета.ДобавитьРеквизиты) = "да" Тогда
			
			ДобавитьРеквизитыВСтрокуДереваЗаполненияСтроковыхПолей(
				СтрокаДерева,
				ВыборкаДанныхМакета.ИмяОбъектаМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоПараметров;
	
КонецФункции // ПолучитьДеревоЗаполненияСтроковыхПолей()

// Добавляет в дочерние строки реквизиты объекта метаданных
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева, к которой нужно добавить дочерние строки с реквизитам,
//                 см. ДеревоПараметровЗаполненияСтроковыхПолей()
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных конфигурации, реквизиты которого нужно добавить к выбору
//  ИмяТаблицы - Строка - Имя таблицы для построения запроса
Процедура ДобавитьРеквизитыВСтрокуДереваЗаполненияСтроковыхПолей(СтрокаДерева, ИмяОбъектаМетаданных);
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	
	Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		
		НовСтрДерева = СтрокаДерева.Строки.Добавить();
		НовСтрДерева.Представление				= Реквизит.Представление();
		НовСтрДерева.ПредставлениеПолное		= СтрокаДерева.ПредставлениеПолное + "|" + Реквизит.Имя;
		НовСтрДерева.ИмяПоля					= Реквизит.Имя;
		НовСтрДерева.ПолучатьЗапросом			= Истина;
		НовСтрДерева.ИмяТаблицы					= ИмяОбъектаМетаданных;
		НовСтрДерева.КлючТаблицы				= "Ссылка";
		НовСтрДерева.ЗначениеКлючаТаблицы		= СтрокаДерева.ИмяПоля;
		НовСтрДерева.ДоступноДляВыбора			= Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Выделяет параметры из шаблона
//
// Параметры:
//  ШаблонСтроковогоПоля - Строка - Строка, содержащая шаблон для подстановки параметров.
//      Параметры выделяются квадратными скобками [ и ], не могут иметь вложенной структуры, параметр не может быть пустым.
//
// Возвращаемое значение:
//  Структура - Описание результата выделения параметров:
//      Успех - Булево - определяет, успешно ли завершена операция выделения параметров
//      Описание - Строка - строковое описание результата выполнения операции
//      МассивПараметров - Массив - массив строк, которые выделены как параметры в шаблоне, т.е. заключены в квадратные скобки [].
Функция ПараметрыВШаблонеСтроковогоПоля(ШаблонСтроковогоПоля) Экспорт
	
	СтруктураВозврата = Новый Структура("Успех, МассивПараметров, Описание");
	
	МассивПараметровВСтроке = Новый Массив;
	
	Индекс = 1;
	ПоложениеОткрывающейСкобки = 0;
	ПоложениеЗакрывающейСкобки = 0;
	СкобкаОткрыта = Ложь;
	
	ДлинаСтроки = СтрДлина(ШаблонСтроковогоПоля);
	
	Пока Индекс <= ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(ШаблонСтроковогоПоля, Индекс, 1);
		
		Если ТекущийСимвол = "[" Тогда
			
			Если Не СкобкаОткрыта Тогда
				
				ПоложениеОткрывающейСкобки = Индекс;
				СкобкаОткрыта = Истина;
				
			Иначе
				
				ПроблемныйУчастокТекста = Сред(
					ШаблонСтроковогоПоля,
					ПоложениеОткрывающейСкобки,
					Индекс - ПоложениеОткрывающейСкобки + 1);
				
				СтруктураВозврата.Успех = Ложь;
				СтруктураВозврата.Описание = СтрШаблон(
					НСтр("ru = 'На участке ""%1"" отсутсвует закрывающая скобка ""]""'"),
					ПроблемныйУчастокТекста);
				
				Возврат СтруктураВозврата;
			
			КонецЕсли;
			
		ИначеЕсли ТекущийСимвол = "]" Тогда
			
			Если Не СкобкаОткрыта Тогда
				
				ПроблемныйУчастокТекста = Сред(
					ШаблонСтроковогоПоля,
					?(ПоложениеЗакрывающейСкобки = 0, 1, ПоложениеЗакрывающейСкобки),
					Индекс - ПоложениеЗакрывающейСкобки + 1);
				
				СтруктураВозврата.Успех = Ложь;
				СтруктураВозврата.Описание = СтрШаблон(
					НСтр("ru = 'На участке ""%1"" отсутствует открывающая скобка ""[""'"),
					ПроблемныйУчастокТекста);
				
				Возврат СтруктураВозврата;
				
			Иначе
			
				ПоложениеЗакрывающейСкобки = Индекс;
				СкобкаОткрыта = Ложь;
				
				Если ПоложениеЗакрывающейСкобки - ПоложениеОткрывающейСкобки <= 1 Тогда
					
					НачСимволПроблемногоУчастка = 
						?(ПоложениеОткрывающейСкобки > 5,
						ПоложениеОткрывающейСкобки - 5,
						1);
					КонСимволПроблемногоУчастка =
						?(ДлинаСтроки - ПоложениеЗакрывающейСкобки > 5,
						ПоложениеЗакрывающейСкобки + 5,
						ДлинаСтроки);
					
					ПроблемныйУчастокТекста = Сред(
						ШаблонСтроковогоПоля,
						НачСимволПроблемногоУчастка,
						КонСимволПроблемногоУчастка - НачСимволПроблемногоУчастка + 1);
					
					СтруктураВозврата.Успех = Ложь;
					СтруктураВозврата.Описание = СтрШаблон(
						НСтр("ru = 'На участке ""%1"" присутствует пустой параметр'"),
						ПроблемныйУчастокТекста);
					
					Возврат СтруктураВозврата;
					
				КонецЕсли;
				
				СтрокаПараметра = Сред(
					ШаблонСтроковогоПоля,
					ПоложениеОткрывающейСкобки + 1,
					ПоложениеЗакрывающейСкобки - ПоложениеОткрывающейСкобки - 1);
				
				МассивПараметровВСтроке.Добавить(СтрокаПараметра);
			
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если СкобкаОткрыта Тогда
		ПроблемныйУчастокТекста = Сред(
			ШаблонСтроковогоПоля,
			ПоложениеОткрывающейСкобки);
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = СтрШаблон(
			НСтр("ru = 'На участке ""%1"" отсутсвует закрывающая скобка ""]""'"),
			ПроблемныйУчастокТекста);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.Описание = НСтр("ru = 'Операция выделения параметров завершена успешно'");
	СтруктураВозврата.МассивПараметров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПараметровВСтроке);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет заполнение шаблона строки по строковым параметрам, описанным в функции ДеревоПараметровЗаполненияСтроковыхПолей()
// 
// Параметры:
//  ШаблонСтроки - Строка - Строка, содержащая шаблон для подстановки параметров.
//      Параметры выделяются квадратными скобками [ и ], не могут иметь вложенной структуры, параметр не может быть пустым,
//      все параметры должны быть описаны в дереве возвращаемом функцией ДеревоПараметровЗаполненияСтроковыхПолей()
//  ПараметрыЗаполненияСтроковыхПолей - Структура, содержащая значения для подстановки параметров,
//                                      см. ПараметрыЗаполненияСтроковыхПолей()
//  ИмяМакета - Строка - Имя макета, содержащего описание параметров заполнения строковых полей.
// 
// Возвращаемое значение:
//  Структура - результат заполнения
//      * Успех - Булево - Указывает, завершилась ли операция заполнения успехом.
//      * ЗаполненнаяСтрока - Строка, Неопределено - В случае успеха возвращает строку с заполненными параметрами, в случае неудачи - Неопределено.
//      * Описание - Строка - Описание результата выполнения операции, в случае неудачи - описание ошибки.
Функция ЗаполнитьСтроковыеПараметрыПоШаблону(ШаблонСтроки, ПараметрыЗаполненияСтроковыхПолей,
	ИмяМакета = "ДеревоПараметровСозданияДокумента")
	
	СтруктураВозврата = Новый Структура("Успех, ЗаполненнаяСтрока, Описание");
	
	РазборПараметров = ПараметрыВШаблонеСтроковогоПоля(ШаблонСтроки);
	
	Если Не РазборПараметров.Успех Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, РазборПараметров);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ЗначенияПараметров = Новый Соответствие;
	
	ТаблицаДляСоставленияЗапросов = Новый ТаблицаЗначений;
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("ИмяТаблицы");
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("КлючТаблицы");
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("ЗначениеКлючаТаблицы");
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("ОписанияПолучаемыхПараметров");
	
	ДеревоПараметров = ДеревоПараметровЗаполненияСтроковыхПолей(ИмяМакета);
	
	Для каждого ИмяПараметра Из РазборПараметров.МассивПараметров Цикл
		
		ОписаниеПараметра = ДеревоПараметров.Строки.Найти(ИмяПараметра, "ПредставлениеПолное", Истина);
		
		Если ОписаниеПараметра = Неопределено Тогда
			
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.Описание = СтрШаблон(
				НСтр("ru = 'Параметр [%1] не найден в возможных параметрах заполнения.'") +
				Символы.ПС +
				НСтр("ru = 'Пожалуйста проверьте корректность указания этого параметра,'") + 
				Символы.ПС +
				НСтр("ru = 'при необходимости перетащите его из дерева доступных параметров'"),
				ИмяПараметра);
			
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		Если Не ОписаниеПараметра.ПолучатьЗапросом Тогда
			
			ЗначенияПараметров.Вставить(
				ИмяПараметра,
				ПараметрыЗаполненияСтроковыхПолей[ОписаниеПараметра.ИмяПоля]);
			
		Иначе
			
			ОтборСтрокТаблицы = Новый Структура("ИмяТаблицы, КлючТаблицы, ЗначениеКлючаТаблицы");
			ЗаполнитьЗначенияСвойств(ОтборСтрокТаблицы, ОписаниеПараметра);
			
			СтрокиТаблицы = ТаблицаДляСоставленияЗапросов.НайтиСтроки(ОтборСтрокТаблицы);
			
			Если СтрокиТаблицы.Количество() > 0 Тогда
				СтрокаТаблицыДляЗапроса = СтрокиТаблицы[0];
			Иначе
				СтрокаТаблицыДляЗапроса = ТаблицаДляСоставленияЗапросов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыДляЗапроса, ОтборСтрокТаблицы);
				СтрокаТаблицыДляЗапроса.ОписанияПолучаемыхПараметров = Новый Массив;
			КонецЕсли;
			
			ОписаниеПолученияПараметра = Новый Структура;
			
			ОписаниеПолученияПараметра.Вставить("Представление", ИмяПараметра);
			ОписаниеПолученияПараметра.Вставить("ИмяПоля", ОписаниеПараметра.ИмяПоля);
			
			СтрокаТаблицыДляЗапроса.ОписанияПолучаемыхПараметров.Добавить(ОписаниеПолученияПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЗначенияПараметровВСоответствиеПоЗапросу(
		ЗначенияПараметров,
		ТаблицаДляСоставленияЗапросов,
		ПараметрыЗаполненияСтроковыхПолей);
	
	ЗаполненнаяСтрока = ШаблонСтроки;
	
	Для каждого Параметр Из ЗначенияПараметров Цикл
		
		СтрокаДляПодстановки = "";
		ТипЗначения = ТипЗнч(Параметр.Значение);
		
		Если ТипЗначения = Тип("Дата") Тогда
			СтрокаДляПодстановки = Формат(Параметр.Значение, "ДФ=dd.MM.yyyy")
		Иначе
			СтрокаДляПодстановки = Строка(Параметр.Значение);
		КонецЕсли;
		
		ЗаполненнаяСтрока = СтрЗаменить(
			ЗаполненнаяСтрока,
			"[" + Параметр.Ключ + "]",
			СтрокаДляПодстановки);
		
	КонецЦикла;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.Описание = НСтр("ru = 'Строка заполнена успешно'");
	СтруктураВозврата.ЗаполненнаяСтрока = ЗаполненнаяСтрока;
	
	Возврат СтруктураВозврата;
	
КонецФункции // ЗаполнитьСтрокуПоШаблону()

// Добавляет значения параметров в соответствие, получаемые из запроса
//
// Параметры:
//  ЗначенияПараметров - Соответствие - Соответствие, в которое будут добавлены значения параметров
//      Ключ - Строка - полное представление параметра,
//      Значение - Произвольный - Значение параметра
//  ТаблицаДляЗапроса - ТаблицаЗначений - Таблица, по которой будет строится запрос на получение значений параметров. Колонки:
//      * ИмяТаблицы - Строка - Имя таблица базы данных для построения запроса.
//      * КлючТаблицы - Строка - Имя поля таблицы, по которому будет производится отбор
//      * ЗначениеКлючаТаблицы - Строка - Имя поля в структуре параметров, по которому будет производиться отбор
//      * ОписанияПолучаемыхПараметров - Массив - МассивСтруктур, содержащих описание параметров, получаемых из запроса.
//          Описание структур параметров:
//              * Представление - Строка - Полное представление параметра
//              * ИмяПоля - Строка - Имя поля в таблице запроса.
//  ПараметрыЗаполненияСтроковыхПолей - Структура - Структура, содержащая значения параметров для подстановки.
//
Процедура ДобавитьЗначенияПараметровВСоответствиеПоЗапросу(ЗначенияПараметров, ТаблицаДляЗапроса,
		ПараметрыЗаполненияСтроковыхПолей)
	
	Если ТаблицаДляЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	НомерЗапроса = 0;
	
	Для каждого СтрокаДляЗапроса Из ТаблицаДляЗапроса Цикл
		
		НомерЗапроса = НомерЗапроса + 1;
		
		ТекстЗапроса = ТекстЗапроса +
			?(ТекстЗапроса = "",
			"",
			"
			|;
			|//////////////////////////////////
			|") +
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1";
		
		КоличествоПолей = СтрокаДляЗапроса.ОписанияПолучаемыхПараметров.Количество();
		
		МассивДобавленныхПолей = Новый Массив;
		
		Для Индекс = 0 По КоличествоПолей - 1 Цикл
			ПолучаемоеПоле = СтрокаДляЗапроса.ОписанияПолучаемыхПараметров[Индекс];
			ИмяПоля = ПолучаемоеПоле.ИмяПоля;
			
			Если МассивДобавленныхПолей.Найти(ИмяПоля) = Неопределено Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
					|	Таблица." + ИмяПоля + " КАК " + ИмяПоля + ?(Индекс = КоличествоПолей - 1, "", ",");
				
				МассивДобавленныхПолей.Добавить(ИмяПоля);
				
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	" + СтрокаДляЗапроса.ИмяТаблицы + " КАК Таблица
			|
			|ГДЕ
			|	Таблица." + СтрокаДляЗапроса.КлючТаблицы + " = &Параметр" + НомерЗапроса;
		
		Запрос.УстановитьПараметр("Параметр" + НомерЗапроса,
			ПараметрыЗаполненияСтроковыхПолей[СтрокаДляЗапроса.ЗначениеКлючаТаблицы]);
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Индекс = 0 По ТаблицаДляЗапроса.Количество() - 1 Цикл
		
		ТаблицаРезультатаЗапроса = МассивРезультатов[Индекс].Выгрузить();;
		СтрокаЗапроса = ТаблицаДляЗапроса[Индекс];
		
		Если ТаблицаРезультатаЗапроса.Количество() > 0 Тогда
			
			Для каждого ОписаниеПараметра Из СтрокаЗапроса.ОписанияПолучаемыхПараметров Цикл
				ЗначенияПараметров.Вставить(
					ОписаниеПараметра.Представление,
					ТаблицаРезультатаЗапроса[0][ОписаниеПараметра.ИмяПоля]);
			КонецЦикла;
			
		Иначе
			
			Для каждого ОписаниеПараметра Из СтрокаЗапроса.ОписанияПолучаемыхПараметров Цикл
				ЗначенияПараметров.Вставить(ОписаниеПараметра.Представление, Неопределено);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормированиеОбъектовЭДОНаОснованииДокументов1СДокументооборот

// Формирует исходящие ЭД по внутренним документам, стоящим в очереди на отправку.
//
// Возвращаемое значение:
//  Структура:
//      * КоличествоКОбработке - Число - Количество документов, необходимых к обработке, т.е. к созданию ЭД
//      * КоличествоСозданных - Число - Количество документов, созданных в результате выполнения
//      * КоличествоОтправленных - Число - Количество документов, отправленных оператору в результате выполнения
//      * КоличествоПодготовленных - Число - Количество документов, подготовленных к отправке в результате работы.
//      * НемедленнаяОтправка - Булево - Указывает, используется ли в настройках системы немедленная отправка документов.
Функция СформироватьЭДПоГотовымДокументамДО() Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);

	ИмяСобытия = ИмяСобытияСозданияЭДНаОснованииДокументовДО();
	
	Комментарий = Нстр("ru = 'Начато создание ЭД на основании документов 1С:Документооборот.'");
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
		
	СозданоДокументов = 0;
	
	СтруктураВозврата.Вставить("КоличествоКОбработке",     0);
	СтруктураВозврата.Вставить("КоличествоСозданных",      0);
	СтруктураВозврата.Вставить("КоличествоОтправленных",   0);
	СтруктураВозврата.Вставить("КоличествоПодготовленных", 0);
	СтруктураВозврата.Вставить("НемедленнаяОтправка",      Истина);
	
	ДанныеДляОтправки = ДокументыКОтправкеПоЭДО();
	
	СтруктураВозврата.КоличествоКОбработке = ДанныеДляОтправки.Количество();
	
	Для Каждого СтрокаКОтправке Из ДанныеДляОтправки Цикл
		
		ДанныеДляСоздания = Новый Структура(
			"Документ, ФайлДляОтправки, ВерсияДляОтправки, СформированныйЭД");
		
		ЗаполнитьЗначенияСвойств(ДанныеДляСоздания, СтрокаКОтправке);
		
		Результат = СформироватьЭДПоДокументуДО(ДанныеДляСоздания);
		
		Если Результат.Успех И Результат.НемедленнаяОтправка Тогда
			СтруктураВозврата.КоличествоОтправленных =
				СтруктураВозврата.КоличествоОтправленных + 1;
			СтруктураВозврата.КоличествоСозданных =
				СтруктураВозврата.КоличествоСозданных + 1;
		ИначеЕсли Результат.Успех И Не Результат.НемедленнаяОтправка Тогда
			СтруктураВозврата.КоличествоПодготовленных =
				СтруктураВозврата.КоличествоПодготовленных + 1;
			СтруктураВозврата.КоличествоСозданных =
				СтруктураВозврата.КоличествоСозданных + 1;
			СтруктураВозврата.НемедленнаяОтправка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Комментарий = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ОписаниеРезультатаСозданияЭДПоДокументамДО(
		СтруктураВозврата.КоличествоКОбработке,
		СтруктураВозврата.КоличествоСозданных,
		СтруктураВозврата.КоличествоПодготовленных,
		СтруктураВозврата.КоличествоОтправленных,
		СтруктураВозврата.НемедленнаяОтправка);
		
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Формирует исходящий ЭД по внутреннему документу ДО
// 
// Параметры:
//  ДанныеДляСоздания - Структура:
//      * Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому необходимо сформировать ЭД
//      * ФайлДляОтправки - СправочникСсылка.Файлы - Отрпавляемый файл документа
//      * ВерсияДляОтправки - СправочникСсылка.ВерсииФайлов - Версия файла для отправки
//      * СформированныйЭД - ДокументСсылка.ЭлектронныйДокументИсходящий - Сформированный ЭД, заполняется в дальнейшем
// 
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево - Указывает, успешно ли завершилась отправка документа
//      * НемедленнаяОтправка - Булево - Указывает, проводилась ли немедленная отправка документа
// 
Функция СформироватьЭДПоДокументуДО(ДанныеДляСоздания)
	
	СтруктураВозврата = Новый Структура("Успех, НемедленнаяОтправка");
	
	ПопыткаОбработки = 
		РегистрыСведений.ОчередьОтправкиДокументовЭДО.ДобавитьПопыткуОбработки(ДанныеДляСоздания.Документ);
	
	РегистрыСведений.ОшибкиЭДОКИсправлению.УдалитьЗаписьОбОшибке(ДанныеДляСоздания.Документ);
	
	РезультатПроверки = ВозможностьСозданияЭД(ДанныеДляСоздания);
	
	НачатьТранзакцию();
	Попытка
		
		Если Не РезультатПроверки.Успех Тогда
			
			ОтменитьТранзакцию();
			
			ОбработатьОшибкуФормированияЭД(
				ДанныеДляСоздания,
				РезультатПроверки.Описание,
				ПопыткаОбработки);
			
			СтруктураВозврата.Успех = Ложь;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		РезультатФормирования = ОбменСКонтрагентамиСлужебный.ВыполнитьДействияПоЭД(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДляСоздания.ВерсияДляОтправки),
			Новый Массив,
			"Сформировать",
			Новый Структура,
			Неопределено,
			Новый Соответствие);
		
		СформированныйЭД = Неопределено;
		
		Если РезультатФормирования <> Неопределено
			И РезультатФормирования.Свойство("МассивНовыхЭД")
			И РезультатФормирования.МассивНовыхЭД.Количество() > 0 Тогда
			
			СформированныйЭД = РезультатФормирования.МассивНовыхЭД[0];
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СформированныйЭД) Тогда
			
			ОтменитьТранзакцию();
			
			ОписаниеПроблемы = 
				НСтр("ru = 'Не удалось сформировать ЭД. Проверьте настройки обмена.'");
			
			ОбработатьОшибкуФормированияЭД(
				ДанныеДляСоздания,
				ОписаниеПроблемы,
				ПопыткаОбработки);
			
			СтруктураВозврата.Успех = Ложь;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		ДанныеДляСоздания.Вставить("СформированныйЭД", СформированныйЭД);
		
		РезультатКопированияПодписей = СкопироватьПодписиВФайлЭД(ДанныеДляСоздания);
		
		Если Не РезультатКопированияПодписей.Успех Тогда
			
			ОтменитьТранзакцию();
			
			ОписаниеПроблемы = 
				НСтр("ru = 'При копировании подписей для отправки по ЭДО возникли ошибки:'")
				+ Символы.ПС
				+ РезультатКопированияПодписей.Описание;
			
			ОбработатьОшибкуФормированияЭД(
				ДанныеДляСоздания,
				ОписаниеПроблемы,
				ПопыткаОбработки);
			
			СтруктураВозврата.Успех = Ложь;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		РезультатОтправки = ОбменСКонтрагентамиСлужебный.ВыполнитьДействияПоЭД(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДляСоздания.ВерсияДляОтправки),
			Новый Массив,
			"Отправить",
			Новый Структура("ФормироватьПакетыЭДПоПодписаннымЭД", Истина),
			Неопределено,
			Новый Соответствие);
		
		Если РезультатОтправки <> Неопределено
			И ((РезультатОтправки.КолПодготовленных > 0
				И НЕ РезультатОтправки.НемедленнаяОтправкаЭД)
			Или (РезультатОтправки.КолОтправленных > 0
				И РезультатОтправки.НемедленнаяОтправкаЭД)) Тогда
			
			НемедленнаяОтправка = РезультатОтправки.НемедленнаяОтправкаЭД;
			
		Иначе
			
			ОтменитьТранзакцию();
			
			ОписаниеПроблемы = 
				НСтр("ru = 'Не удалось отправить документ оператору ЭДО.'")
				+ Символы.ПС
				+ НСтр("ru = 'Проверьте настройки обмена с контрагентом и данные отправляемого документа.'");
			
			ОбработатьОшибкуФормированияЭД(
				ДанныеДляСоздания,
				ОписаниеПроблемы,
				ПопыткаОбработки);
			
			СтруктураВозврата.Успех = Ложь;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьОтправкиДокументовЭДО.УдалитьИзОчереди(ДанныеДляСоздания.Документ);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ОписаниеПроблемы =
			НСтр("ru = 'При отправке документа по ЭДО произошла ошибка:'")
			+ Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ОбработатьОшибкуФормированияЭД(
			ДанныеДляСоздания,
			ОписаниеПроблемы,
			ПопыткаОбработки);
		
		СтруктураВозврата.Успех = Ложь;
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.НемедленнаяОтправка = НемедленнаяОтправка;
	Возврат СтруктураВозврата;
	
КонецФункции

// Копирует подписи версии файла документа ДО в файл ЭД, созданный на основании этого ДО.
// 
// Параметры:
//  ДанныеДляСоздания - Структура:
//      * Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому необходимо сформировать ЭД
//      * ФайлДляОтправки - СправочникСсылка.Файлы - Отрпавляемый файл документа
//      * ВерсияДляОтправки - СправочникСсылка.ВерсииФайлов - Версия файла для отправки
//      * СформированныйЭД - ДокументСсылка.ЭлектронныйДокументИсходящий - Сформированный ЭД, заполняется в дальнейшем
// 
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево - Указывает, успешно ли завершилась операция
//      * Описание - Строка - Описание ошибки, если операция завершилась неудачно.
// 
Функция СкопироватьПодписиВФайлЭД(ДанныеДляСоздания)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Истина);
	СтруктураВозврата.Вставить("Описание", "");
	
	ФайлЭД = Неопределено;
	
	Если ТипЗнч(ДанныеДляСоздания.СформированныйЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ФайлЭД = ДанныеДляСоздания.СформированныйЭД;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
				"ВЫБРАТЬ
				|	ЭДПрисоединенныеФайлы.Ссылка КАК ФайлЭД
				|ИЗ
				|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
				|ГДЕ
				|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
		Запрос.УстановитьПараметр("ВладелецФайла", ДанныеДляСоздания.СформированныйЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ФайлЭД = Выборка.ФайлЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлЭД) Тогда
		
		ОписаниеПроблемы =
			НСтр("ru = 'Не найден созданный файл ЭД. Проверье содержимое файла отправляемого документа и повторите отправку.'");
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = ОписаниеПроблемы;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Попытка
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ДанныеДляСоздания.ВерсияДляОтправки);
		
		Если УстановленныеПодписи.Количество() > 0 Тогда
			
			СведенияОПодписи = Новый Массив;
			СоответствиеСертификатовПодписаннымЭД = Новый Соответствие;
			
			Для Каждого Подпись Из УстановленныеПодписи Цикл
				
				СведенияОПодписи.Добавить(
					Новый Структура("ПодписанныйОбъект, СвойстваПодписи",
						ФайлЭД,
						Подпись));
				
				СоответствиеСертификатовПодписаннымЭД.Вставить(
					ЭлектроннаяПодпись.СсылкаНаСертификат(Подпись.Сертификат),
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлЭД));
				
			КонецЦикла;
			
			РаботаСЭП.ЗанестиИнформациюОПодписях(СведенияОПодписи);
			
			КонтекстОперации = ЭлектронноеВзаимодействиеСлужебный.НовыйКонтекстОперации();
			КонтекстОперации.ЗаголовокОперации = НСтр("ru = 'Копирование подписей файла ДО в файл документа'");
			
			ОбменСКонтрагентамиСлужебный.ДействияПослеПодписанияЭДНаСервере(
				СоответствиеСертификатовПодписаннымЭД,
				КонтекстОперации);
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОписаниеПроблемы = 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = ОписаниеПроблемы;
		
		Возврат СтруктураВозврата;
		
	КонецПопытки;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.Описание = "";
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Обрабатывает ошибку, возникную в ходе формирования и отправки ЭД на основании документа ДО.
// Если количество попыток обработки менее трех, то происходит запись в журнал регистрации.
// Если количество попыток обработки три и более, то происходит удаление документа из очереди отправки ЭДО,
// состояние документа переводится в статус "ОшибкаПередачи", а также записывается ошибка в регистр ошибок ЭДО
// 
// Параметры:
//  ДанныеДляСоздания - Структура:
//      * Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому необходимо сформировать ЭД
//      * ФайлДляОтправки - СправочникСсылка.Файлы - Отрпавляемый файл документа
//      * ВерсияДляОтправки - СправочникСсылка.ВерсииФайлов - Версия файла для отправки
//      * СформированныйЭД - ДокументСсылка.ЭлектронныйДокументИсходящий - Сформированный ЭД, заполняется в дальнейшем
//  Описание - Строка - Описание возникшей ошибки.
//  ПопыткаОбрабокти - Число - Текущая попытка обработки документа
// 
Процедура ОбработатьОшибкуФормированияЭД(ДанныеДляСоздания, Описание, ПопыткаОбработки)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСозданияЭДНаОснованииДокументовДО(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВнутренниеДокументы,
		ДанныеДляСоздания.Документ,
		СтрШаблон(НСтр("ru = 'При отправке документа %1 по ЭДО возникли поблемы:'"),
				ДанныеДляСоздания.Документ)
			+ Символы.ПС
			+ Описание);
	
	Если ПопыткаОбработки > 2 Тогда
		
		НачатьТранзакцию();
		Попытка
			РегистрыСведений.ОшибкиЭДОКИсправлению.ДобавитьЗаписьОбОшибке(
				ДанныеДляСоздания.Документ,
				Описание);
			
			РегистрыСведений.ОчередьОтправкиДокументовЭДО.УдалитьИзОчереди(ДанныеДляСоздания.Документ);
			
			СостояниеДокумента = РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента(
					ДанныеДляСоздания.Документ);
			
			ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
				ДанныеДляСоздания.Документ,
				СостояниеДокумента.Контрагент,
				Перечисления.СостоянияВерсийЭДДО.ОшибкаПередачи,
				Перечисления.НаправленияЭД.Исходящий);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Не удалось удалить документ из очереди отправки сообщений ЭДО.'"),
				УровеньЖурналаРегистрации.Ошибка, , ,
				СтрШаблон(НСтр("ru = 'Не удалось удалить документ %1 из очереди отправки сообщений ЭДО и сделать запись о ошибке отправки по причине:'"),
					ДанныеДляСоздания.Документ)
					+ Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру электронного документа.
//    см. ОбменСКонтрагентамиПереопределяемый.СформироватьОписаниеЭлектронногоДокумента()
//
// Параметры:
//  ОбъектДляВыгрузки - СправочникСсылка, ДокументСсылка - объект-основание электронного документа.
//  НастройкиОбмена - Структура - настройки обмена электронными документами.
//
// Возвращаемое значение:
//  Структура - структура, содержащая описание электронного документа.
//
Функция СформироватьЭДНаОснованииДокументаДО(ОбъектДляВыгрузки, НастройкиОбмена) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Попытка
	
		СсылкаНаВерсиюФайла = ОбъектДляВыгрузки;
		Файл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДляВыгрузки, "Владелец");
		ДокументДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВнутренниеДокументыСтороны.Ссылка КАК Документ,
			|	ВнутренниеДокументыСтороны.Сторона КАК Организация,
			|	ВнутренниеДокументыСтороны.Ссылка.ВидДокумента КАК ВидДокумента
			|ПОМЕСТИТЬ ДокументСОрганизацией
			|ИЗ
			|	Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыСтороны
			|ГДЕ
			|	ВнутренниеДокументыСтороны.Ссылка = &Документ
			|	И ВнутренниеДокументыСтороны.НомерСтроки = 1
			|	И ВнутренниеДокументыСтороны.Сторона ССЫЛКА Справочник.Организации
			|	И ВнутренниеДокументыСтороны.Подписан
			|	И ВнутренниеДокументыСтороны.Подписал <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДокументСОрганизацией.Документ КАК Документ,
			|	ДокументСОрганизацией.Организация КАК Организация,
			|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
			|ПОМЕСТИТЬ УчетныеЗаписиЭДООрганизации
			|ИЗ
			|	ДокументСОрганизацией КАК ДокументСОрганизацией
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
			|		ПО ДокументСОрганизацией.Организация = УчетныеЗаписиЭДО.Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Файлы.Ссылка КАК Файл,
			|	Файлы.ПолноеНаименование КАК ПолноеИмяФайла,
			|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
			|ПОМЕСТИТЬ ФайлыДокумента
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
			|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
			|ГДЕ
			|	Файлы.ВладелецФайла = &Документ
			|	И НЕ Файлы.ПометкаУдаления
			|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ФайлыДокумента.Файл КАК Файл,
			|	ФайлыДокумента.ПолноеИмяФайла КАК ПолноеИмяФайла,
			|	ФайлыДокумента.ТекущаяВерсия КАК ТекущаяВерсия,
			|	ЭлектронныеПодписи.УникальныйИдентификатор КАК УникальныйИдентификатор,
			|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
			|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
			|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
			|	ЭлектронныеПодписи.СертификатДействителен КАК СертификатДействителен
			|ПОМЕСТИТЬ ПодписиФайловДокумента
			|ИЗ
			|	ФайлыДокумента КАК ФайлыДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|		ПО ФайлыДокумента.ТекущаяВерсия = ЭлектронныеПодписи.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УчетныеЗаписиЭДООрганизации.Документ КАК Документ,
			|	УчетныеЗаписиЭДООрганизации.Организация КАК Организация,
			|	УчетныеЗаписиЭДООрганизации.ИдентификаторЭДО КАК ИдентификаторЭДО,
			|	СертификатыУчетныхЗаписейЭДО.Сертификат КАК Сертификат,
			|	СертификатыУчетныхЗаписейЭДО.Сертификат.Отпечаток КАК Отпечаток
			|ПОМЕСТИТЬ СертификатыДляОбменаЭДО
			|ИЗ
			|	УчетныеЗаписиЭДООрганизации КАК УчетныеЗаписиЭДООрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
			|		ПО УчетныеЗаписиЭДООрганизации.ИдентификаторЭДО = СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СертификатыДляОбменаЭДО.Документ КАК ДокументДО,
			|	ПодписиФайловДокумента.Файл КАК Файл,
			|	ПодписиФайловДокумента.ТекущаяВерсия КАК ФайлТекущаяВерсия,
			|	ПодписиФайловДокумента.ПолноеИмяФайла КАК ПолноеИмяФайла,
			|	ПодписиФайловДокумента.ТекущаяВерсия.Расширение КАК ФайлРасширение,
			|	МАКСИМУМ(ПодписиФайловДокумента.ДатаПодписи) КАК ДатаПодписи
			|ИЗ
			|	ПодписиФайловДокумента КАК ПодписиФайловДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СертификатыДляОбменаЭДО КАК СертификатыДляОбменаЭДО
			|		ПО ПодписиФайловДокумента.Отпечаток = СертификатыДляОбменаЭДО.Отпечаток
			|ГДЕ
			|	ПодписиФайловДокумента.ПодписьВерна
			|	И ПодписиФайловДокумента.СертификатДействителен
			|
			|СГРУППИРОВАТЬ ПО
			|	СертификатыДляОбменаЭДО.Документ,
			|	ПодписиФайловДокумента.Файл,
			|	ПодписиФайловДокумента.ТекущаяВерсия,
			|	ПодписиФайловДокумента.ПолноеИмяФайла,
			|	ПодписиФайловДокумента.ТекущаяВерсия.Расширение";
		
		Запрос.УстановитьПараметр("Документ", ДокументДО);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтруктураЭД = ОбменСКонтрагентамиВнутренний.СтруктураЭлектронногоДокумента(ОбъектДляВыгрузки, НастройкиОбмена);
			СтруктураЭД.Вставить("ВерсияФайла", Выборка.ФайлТекущаяВерсия);
			СтруктураЭД.Вставить("ВерсияРегламентаЭДО", НастройкиОбмена.ВерсияРегламентаЭДО);
			
			ПараметрыФайлаЭД = Новый Структура;
			ПараметрыФайлаЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			ПараметрыФайлаЭД.Вставить("ЗаполнитьДокумент", Истина);
			ПараметрыФайлаЭД.Вставить("ФайлДанныхСсылка",
				РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(Выборка.ФайлТекущаяВерсия));
			ПараметрыФайлаЭД.Вставить("ВыводитьСообщенияОбОшибках", Ложь);
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДО,
				"РегистрационныйНомер, ДатаРегистрации, ДатаСоздания, ВидДокумента, Сумма, Контрагент, Организация");
			
			НастройкиОтправки = РегистрыСведений.НастройкиОтправкиДокументовПоЭДО.НастройкиОтправкиВидаДокумента(
				РеквизитыДокумента.Организация,
				РеквизитыДокумента.Контрагент,
				РеквизитыДокумента.ВидДокумента);
			
			Если НастройкиОтправки = Неопределено Тогда
				ВызватьИсключение
					СтрШаблон(НСтр("ru = 'Не найдены настройки отправки документа.
							|Проверьте наличие настроек отправки документов вида %1,
							|от организации %2 контрагенту %3'"),
						РеквизитыДокумента.Организация,
						РеквизитыДокумента.Контрагент,
						РеквизитыДокумента.ВидДокумента);
			КонецЕсли;
			
			ДанныеЭлектронногоДокумента = ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИзФайла(ПараметрыФайлаЭД);
			
			ФайлПрочитанКакЭД =
				ТипЗнч(ДанныеЭлектронногоДокумента) = Тип("Структура")
				И ДанныеЭлектронногоДокумента.Свойство("ЭДПрочитан")
				И ДанныеЭлектронногоДокумента.ЭДПрочитан;
			
			Если Не ЗначениеЗаполнено(НастройкиОтправки.ВидЭД) Тогда
				
				Если Не ФайлПрочитанКакЭД Тогда
					НастройкиОтправки.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
				Иначе
					НастройкиОтправки.ВидЭД = ДанныеЭлектронногоДокумента.ВидЭД;
				КонецЕсли;
				
			ИначеЕсли НастройкиОтправки.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				
				Если Не ФайлПрочитанКакЭД Тогда
					ВызватьИсключение
						СтрШаблон(НСтр("ru = 'Не удалось прочитать файл документа.
								|В настройках отправки ЭДО указано, что документ отправляется как вид ЭД %1.
								|Проверьте, что приложенный файл является файлом xml и не поврежден.'"),
							НастройкиОтправки.ВидЭД);
				КонецЕсли;
				
				Если ДанныеЭлектронногоДокумента.ВидЭД <> НастройкиОтправки.ВидЭД Тогда
					ВызватьИсключение
						СтрШаблон(НСтр("ru = 'Неверный формат файла.
								|В настройках отправки ЭДО указано, что документ отправляется как вид ЭД %1.
								|Приложенный к документу файл является ЭД вида %2.'"),
							НастройкиОтправки.ВидЭД,
							ДанныеЭлектронногоДокумента.ВидЭД);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НастройкиОтправки.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				
				СтруктураЭД.Вставить("ВидЭД", ДанныеЭлектронногоДокумента.ВидЭД);
				СтруктураЭД.Вставить("НомерЭД", ДанныеЭлектронногоДокумента.НомерЭД);
				СтруктураЭД.Вставить("ДатаЭД", ДанныеЭлектронногоДокумента.ДатаДокументаОтправителя);
				СтруктураЭД.Вставить("НомерДокументаОтправителя", ДанныеЭлектронногоДокумента.НомерДокументаОтправителя);
				СтруктураЭД.Вставить("ДатаДокументаОтправителя", ДанныеЭлектронногоДокумента.ДатаДокументаОтправителя);
				СтруктураЭД.Вставить("НомерВерсииЭД", ДанныеЭлектронногоДокумента.НомерВерсииЭД);
				СтруктураЭД.Вставить("СуммаДокумента", ДанныеЭлектронногоДокумента.СуммаДокумента);
				СтруктураЭД.Вставить("СуммаДокумента", ДанныеЭлектронногоДокумента.СуммаДокумента);
				Если ТипЗнч(НастройкиОтправки) = Тип("Структура") Тогда
					НастройкиОбмена.Вставить("ТребуетсяИзвещение", НастройкиОтправки.ТребуетсяИзвещениеОПолучении);
					НастройкиОбмена.Вставить("ТребуетсяПодтверждение", НастройкиОтправки.ТребуетсяОтветнаяПодпись);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ТипЭлементаВерсииЭД) Тогда
					СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", ДанныеЭлектронногоДокумента.ТипЭлементаВерсииЭД);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ИдВладельцаЭД) Тогда
					ИдВладельцаЭД = Прав(СокрП(ДанныеЭлектронногоДокумента.ИдВладельцаЭД), 36);
					Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдВладельцаЭД) Тогда
						СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор(ИдВладельцаЭД));
					КонецЕсли;
				КонецЕсли;
			
			Иначе
				
				СтруктураЭД.Вставить("ВидЭД", НастройкиОтправки.ВидЭД);
				СтруктураЭД.Вставить("ТипДокумента", НастройкиОтправки.ТипЭД);
				
				НастройкиОбмена.Вставить("ТребуетсяИзвещение", НастройкиОтправки.ТребуетсяИзвещениеОПолучении);
				НастройкиОбмена.Вставить("ТребуетсяПодтверждение", НастройкиОтправки.ТребуетсяОтветнаяПодпись);
				
				СтруктураЭД.Вставить("НомерДокументаОтправителя", РеквизитыДокумента.РегистрационныйНомер);
				СтруктураЭД.Вставить("ДатаДокументаОтправителя",
					?(ЗначениеЗаполнено(РеквизитыДокумента.ДатаРегистрации),
						РеквизитыДокумента.ДатаРегистрации,
						РеквизитыДокумента.ДатаСоздания));
				СтруктураЭД.Вставить("СуммаДокумента", РеквизитыДокумента.Сумма);
				
			КонецЕсли;
			
			// Данные об документах-основаниях
			СтруктураЭД.Вставить(
				"ИдентификаторыДокументовИЭДОснований",
				ПолучитьТаблицуИдентификаторовДокументовОснований(ДокументДО));
			
			// Данные об ЭП
			ВыборкаЭП = РаботаСЭП.ПолучитьЭлектронныеПодписи(Выборка.ФайлТекущаяВерсия, ,Выборка.ДатаПодписи);
			
			МассивЭП = Новый Массив;
			Пока ВыборкаЭП.Следующий() Цикл
				СтруктураЭП = Новый Структура;
				СтруктураЭП.Вставить("НоваяПодписьДвоичныеДанные", ВыборкаЭП.Подпись.Получить());
				СтруктураЭП.Вставить("Отпечаток", ВыборкаЭП.Отпечаток);
				СтруктураЭП.Вставить("ДатаПодписи", ВыборкаЭП.ДатаПодписи);
				СтруктураЭП.Вставить("Комментарий", ВыборкаЭП.Комментарий);
				СтруктураЭП.Вставить("ИмяФайлаПодписи", ВыборкаЭП.ИмяФайлаПодписи);
				СтруктураЭП.Вставить("КомуВыданСертификат", ВыборкаЭП.КомуВыданСертификат);
				СтруктураЭП.Вставить("ДвоичныеДанныеСертификата", ВыборкаЭП.Сертификат.Получить());
				СтруктураЭП.Вставить("ПодписьВерна", ВыборкаЭП.ПодписьВерна);
				СтруктураЭП.Вставить("ДатаПроверкиПодписи", ВыборкаЭП.ДатаПроверкиПодписи);
				СтруктураЭП.Вставить("УникальныйИдентификатор", ВыборкаЭП.УникальныйИдентификатор);
				
				МассивЭП.Добавить(СтруктураЭП);
			КонецЦикла;
			
			Если ТипЗнч(МассивЭП) = Тип("Массив") И МассивЭП.Количество() Тогда
				СтруктураЭД.Вставить("ЭПФайла", МассивЭП);
				СтруктураЭД.Вставить("СостояниеЭДО", Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка);
			КонецЕсли;
			
			АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(,
				Выборка.ФайлТекущаяВерсия.УникальныйИдентификатор());
			
			ПолноеИмяФайла = СтрШаблон("%1%2.%3",
				АдресКаталога,
				?(ТипЗнч(ДанныеЭлектронногоДокумента) = Тип("Структура")
					И ДанныеЭлектронногоДокумента.Свойство("ИдВладельцаЭД")
					И ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ИдВладельцаЭД),
					ДанныеЭлектронногоДокумента.ИдВладельцаЭД,
					Выборка.ПолноеИмяФайла),
				Выборка.ФайлРасширение);
				
			КопироватьФайл(
				ФайловыеФункцииПереопределяемый.ПолучитьИмяФайлаСПутемКДвоичнымДанным(Выборка.ФайлТекущаяВерсия),
				ПолноеИмяФайла);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктураЭД",				СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",					СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла",			ПолноеИмяФайла);
			СтруктураПараметров.Вставить("УникальныйИдентификатор",	СтруктураЭД.УникальныйИдентификатор);
			
			ВозвращаемоеЗначение = СтруктураПараметров;
			
		КонецЕсли;
	Исключение
		ОписаниеОшибки =
			НСтр("ru = 'Не удалось создать ЭД на основании документа 1С:Документооборот по причине:'") +
			Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТаблицуИдентификаторовДокументовОснований(ДокументДО) Экспорт
	
	ТаблицаИдентификаторовОснований = Новый ТаблицаЗначений;
	ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
	ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторЭДДокументаОснования");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СвязиДокументов.СвязанныйДокумент КАК Документ
		|ПОМЕСТИТЬ ДокументыОснования
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ = &Документ
		|	И СвязиДокументов.ТипСвязи В(&ТипыСвязей)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииФайлов.Ссылка КАК Версия
		|ИЗ
		|	ДокументыОснования КАК ДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ДокументыОснования.Документ = Файлы.ВладелецФайла
		|			И (НЕ Файлы.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО (Файлы.Ссылка = ВерсииФайлов.Владелец)
		|			И (НЕ ВерсииФайлов.ПометкаУдаления)");
	
	ТипыСвязей = Новый Массив;
	ТипыСвязей.Добавить(Справочники.ТипыСвязей.ИсправлениеК);
	ТипыСвязей.Добавить(Справочники.ТипыСвязей.КорректировкаК);
	
	Запрос.УстановитьПараметр("ТипыСвязей", ТипыСвязей);
	Запрос.УстановитьПараметр("Документ", ДокументДО);
	
	ДокументыОснования = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Версия");
	
	Если Не ЗначениеЗаполнено(ДокументыОснования) Тогда
		Возврат ТаблицаИдентификаторовОснований;		
	КонецЕсли;
	
	ОбменСКонтрагентамиВнутренний.ПолучитьПараметрыДокументовОснований(ДокументыОснования, ТаблицаИдентификаторовОснований);
		
	Возврат ТаблицаИдентификаторовОснований;
	
КонецФункции

// Возвращает внутренние документы, которые необходимо отправить по ЭДО.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//      * Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому необходимо сформировать ЭД
//      * ФайлДляОтправки - СправочникСсылка.Файлы - Отрпавляемый файл документа
//      * ВерсияДляОтправки - СправочникСсылка.ВерсииФайлов - Версия файла для отправки
// 
Функция ДокументыКОтправкеПоЭДО()
	
	// В запросе в конце группируем по документу, выбирая максимум из ссылочных данных.
	//   Если в конечном запросе для одного документа до группировки было более одной строки - это поймает
	//   проверка в ф-ии ВозможностьСозданияЭД(). Если запись одна - то результат от группировки не зависит.
	Запрос = Новый Запрос;
	Запрос.Текст =
			"ВЫБРАТЬ
			|	ОчередьОтправкиДокументовЭДО.Документ КАК Документ
			|ПОМЕСТИТЬ втДокументыВОчереди
			|ИЗ
			|	РегистрСведений.ОчередьОтправкиДокументовЭДО КАК ОчередьОтправкиДокументовЭДО
			|ГДЕ
			|	ОчередьОтправкиДокументовЭДО.КоличествоПопытокОбработки < 3
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втДокументыВОчереди.Документ КАК Документ,
			|	МАКСИМУМ(Файлы.Ссылка) КАК ФайлДляОтправки,
			|	МАКСИМУМ(Файлы.ТекущаяВерсия) КАК ВерсияДляОтправки
			|ИЗ
			|	втДокументыВОчереди КАК втДокументыВОчереди
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
			|			ПО Файлы.Ссылка = СлужебныеФайлыДокументов.Файл
			|		ПО втДокументыВОчереди.Документ = Файлы.ВладелецФайла
			|			И (НЕ Файлы.ПометкаУдаления)
			|ГДЕ
			|	СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	втДокументыВОчереди.Документ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверяет возможность создания ЭД на основании документа ДО и возвращает результат проверки с описанием ошибок
// 
// Параметры:
//  ДанныеДляСоздания - Структура:
//      * Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому необходимо сформировать ЭД
//      * ФайлДляОтправки - СправочникСсылка.Файлы - Отрпавляемый файл документа
//      * ВерсияДляОтправки - СправочникСсылка.ВерсииФайлов - Версия файла для отправки
//      * СформированныйЭД - ДокументСсылка.ЭлектронныйДокументИсходящий - Сформированный ЭД, заполняется в дальнейшем
// 
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево - Указывает, завершилась ли проверка успешно, возможно ли формировант ЭД.
//      * Описание - Строка - Описание возникшей ошибки.
Функция ВозможностьСозданияЭД(ДанныеДляСоздания)
	
	СтруктураВозврата = Новый Структура(
		"Успех, Описание");
	
	ПараметрыПроверки = Новый Структура;
	
	ТаблицыПроверки = ТаблицыДляПроверкиВозможностиФормирования(ДанныеДляСоздания.Документ);
	
	Организации = ТаблицыПроверки.Организации;
	
	Если Организации.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В первой строке таблицы сторон не указана организация.
				|Пожалуйста, проверьте корректность заполнения таблицы сторон и повторите отправку документа.'");
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Организация", Организации[0].Организация);
	КонецЕсли;
	
	Если ТаблицыПроверки.УчетныеЗаписиЭДО.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'Для организации документа нет учетных записей ЭДО.
				|Пожалуйста, проверьте наличие учетных записей ЭДО и повторите отправку документа.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Контрагенты = ТаблицыПроверки.Контрагенты;
	
	Если Контрагенты.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В таблицы сторон не указан контрагент, которому необходимо отправить документ.
				|Пожалуйста, проверьте корректность заполнения таблицы сторон и повторите отправку документа.'");
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Организация", Контрагенты[0].Организация);
		ПараметрыПроверки.Вставить("Контрагент", Контрагенты[0].Контрагент);
		ПараметрыПроверки.Вставить("ВидДокумента", Контрагенты[0].ВидДокумента);
	КонецЕсли;
	
	НастройкиОтправкиДО = ТаблицыПроверки.НастройкиОтправкиДО;
	
	Если НастройкиОтправкиДО.Количество() = 0
		Или ТаблицыПроверки.НастройкиОтправки.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			СтрШаблон(
				НСтр("ru = 'Не найдены настройки отправки по ЭДО документов вида %1 от организации %2 контрагенту %3.
					|Пожалуйста, проверьте настройки отправки ЭДО и повторите отправку.'"),
				ПараметрыПроверки.Организация,
				ПараметрыПроверки.Контрагент,
				ПараметрыПроверки.ВидДокумента);
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Организация", НастройкиОтправкиДО[0].Организация);
		ПараметрыПроверки.Вставить("Контрагент", НастройкиОтправкиДО[0].Контрагент);
	КонецЕсли;
	
	ДействующиеНастройкиОтправки = ТаблицыПроверки.ДействующиеНастройкиОтправки;
	
	Если ДействующиеНастройкиОтправки.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			СтрШаблон(
				НСтр("ru = 'Приглашение к обмену между организацией %1 и контрагентом %2 не принято.
					|Пожалуйста, проверьте статус приглашения к обмену ЭДО и повторите отправку.'"),
				ПараметрыПроверки.Организация,
				ПараметрыПроверки.Контрагент);
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Организация", ДействующиеНастройкиОтправки[0].Организация);
		ПараметрыПроверки.Вставить("Контрагент", ДействующиеНастройкиОтправки[0].Контрагент);
	КонецЕсли;
	
	ФайлыДокумента = ТаблицыПроверки.ФайлыДокумента;
	
	Если ФайлыДокумента.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В документе нет файла для отправки.
				|Пожалуйста, проверьте наличие актуального файла и повторите отправку.'");
		
		Возврат СтруктураВозврата;
	ИначеЕсли ФайлыДокумента.Количество() > 1 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В документе более одного файла для отправки. Отправлять по ЭДО можно только один файл.
				|Пожалуйста, удалите лишние файлы и повторите отправку.'");
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Файл", ФайлыДокумента[0].Файл);
		ПараметрыПроверки.Вставить("ВерсияФайла", ФайлыДокумента[0].ТекущаяВерсия);
	КонецЕсли;
	
	ПодписиФайлов = ТаблицыПроверки.ПодписиФайлов;
	
	Если ПодписиФайлов.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'Не найдены электронные подписи, установленные на файл документа.
				|Пожалуйста, проверьте наличие подписей на файле документа и повторите отправку.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Для Каждого СтрокаЭП Из ПодписиФайлов Цикл
		
		Если Не СтрокаЭП.ПодписьВерна Или Не СтрокаЭП.СертификатДействителен Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.Описание =
				НСтр("ru = 'Среди подписей файла есть неверные подписи или подписи с недействительным сертификатом.
					|Пожалуйста, проверьте действительность подписей и повторите отправку.'");
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицыПроверки.ОтпечаткиДляОтправки.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'Среди подписей файла нет тех, которые разрешены к обмену ЭДО.
				|Пожалуйста, проверьте список сертификатов, используемых для обмена в учетной записи ЭДО.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВозможностиСозданияЭД

// Определяет готовность документа документооборота к ЭДО.
// 
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы  - Ссылка на документ.
//  ВыводитьСообщение - Булево - Признак выводить ли сообщения о не выполнении условий.
//  КонтрагентыГотовыеКЭДО - Массив из Справочник.Контрагенты - Заполняется массивом контрагентов
//                                                с которыми возможен обмен по ЭДО данным документом.
//  ПроверятьПодписанДокумент - Булево - Проверять подписание документа в таблице сторон.
//  НаправлениеЭД - Перечисление.НаправленияЭД - Направление ЭД. Если не задано, то считается исходящим документом.
// 
// Возвращаемое значение:
//  Булево - признак готовности.
//
Функция ДокументГотовКФормированиюЭД(Документ, ВыводитьСообщения = Ложь,
	КонтрагентыГотовыеКЭДО = Неопределено, ПроверятьПодписаниеДокумента = Истина,
	НаправлениеЭД = Неопределено) Экспорт
	
	ЭтоВходящийДокумент = Ложь;
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ЭтоВходящийДокумент = Истина;
	КонецЕсли;
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		
		СообщитьОНевозможностиФормирования(Документ,
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД"),
			ВыводитьСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТаблицыДляПроверки = ТаблицыДляПроверкиВозможностиФормирования(Документ, НаправлениеЭД);
	
	Если ТаблицыДляПроверки.Организации.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В первой строке таблицы сторон не указана организация.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьПодписаниеДокумента
		И (Не ЗначениеЗаполнено(ТаблицыДляПроверки.Организации[0].Подписант)
		Или ТаблицыДляПроверки.Организации[0].Подписан <> Истина) Тогда
		
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'Документ не подписан с нашей стороны.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Организация = ТаблицыДляПроверки.Организации[0].Организация;
	
	Если ТаблицыДляПроверки.УчетныеЗаписиЭДО.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			СтрШаблон(НСтр("ru = 'У организации %1 нет учетных записей ЭДО.'"), Организация),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТаблицыДляПроверки.Контрагенты.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В таблице сторон не указаны контрагенты.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Контрагент = ТаблицыДляПроверки.Контрагенты[0].Контрагент;
	ВидДокумента = ТаблицыДляПроверки.Контрагенты[0].ВидДокумента;
	
	Если ЭтоВходящийДокумент Тогда
		
		Если ТаблицыДляПроверки.НастройкиПриемаДО.Количество() = 0
			Или ТаблицыДляПроверки.НастройкиПриема.Количество() = 0 Тогда
			
			СообщитьОНевозможностиФормирования(Документ,
				СтрШаблон(НСтр("ru = 'Нет правил приема документов вида %1 от контрагента %2'"),
					ВидДокумента, Контрагент),
				ВыводитьСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		ИДКонтрагента = ТаблицыДляПроверки.НастройкиПриема[0].ИдентификаторКонтрагента;
		ИДОрганизации = ТаблицыДляПроверки.НастройкиПриема[0].ИдентификаторОрганизации;
		
		Если (ЗначениеЗаполнено(ИДКонтрагента) Или ЗначениеЗаполнено(ИДОрганизации))
			И ТаблицыДляПроверки.ДействующиеНастройкиПриема.Количество() = 0 Тогда
			
			СообщитьОНевозможностиФормирования(Документ,
				СтрШаблон(НСтр("ru = 'Соглашение по обмену документами между %1 и %2 не действует.'"),
					Организация, Контрагент),
				ВыводитьСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ТаблицыДляПроверки.НастройкиОтправкиДО.Количество() = 0
			Или ТаблицыДляПроверки.НастройкиОтправки.Количество() = 0 Тогда
			
			СообщитьОНевозможностиФормирования(Документ,
				СтрШаблон(НСтр("ru = 'Нет правил отправки документов вида %1 контрагенту %2.'"),
					ВидДокумента, Контрагент),
				ВыводитьСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		Если ТаблицыДляПроверки.ДействующиеНастройкиОтправки.Количество() = 0 Тогда
			
			СообщитьОНевозможностиФормирования(Документ,
				СтрШаблон(НСтр("ru = 'Соглашение по обмену документами между %1 и %2 не действует.'"),
					Организация, Контрагент),
				ВыводитьСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицыДляПроверки.ФайлыДокумента.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В документе нет файла для отправки.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	ИначеЕсли ТаблицыДляПроверки.ФайлыДокумента.Количество() > 1 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В документе более одного файла для отправки. Отправлять по ЭДО можно только один файл.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТаблицыДляПроверки.ПодписиФайлов.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'Нет подписей файла документа.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаЭП Из ТаблицыДляПроверки.ПодписиФайлов Цикл
		
		Если Не СтрокаЭП.ПодписьВерна Или Не СтрокаЭП.СертификатДействителен Тогда
			СообщитьОНевозможностиФормирования(Документ,
				НСтр("ru = 'Среди подписей файла есть неверные подписи или подписи с недействительным сертификатом.'"),
				ВыводитьСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицыДляПроверки.ОтпечаткиДляОтправки.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'Среди подписей файла нет тех, которые разрешены к обмену ЭДО.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоВходящийДокумент Тогда
		
		Если (ЗначениеЗаполнено(ИДКонтрагента) Или ЗначениеЗаполнено(ИДОрганизации)) Тогда
			
			КонтрагентыГотовыеКЭДО = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
				ТаблицыДляПроверки.ДействующиеНастройкиПриема.ВыгрузитьКолонку("Контрагент"));
			
		Иначе
			
			КонтрагентыГотовыеКЭДО = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
				ТаблицыДляПроверки.НастройкиПриема.ВыгрузитьКолонку("Контрагент"));
			
		КонецЕсли;
		
	Иначе
		
		КонтрагентыГотовыеКЭДО = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			ТаблицыДляПроверки.ДействующиеНастройкиОтправки.ВыгрузитьКолонку("Контрагент"));
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СообщитьОНевозможностиФормирования(Документ, Причина, ВыводитьСообщения)
	
	Если Не ВыводитьСообщения Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = 
		СтрШаблон(НСтр("ru = 'Документ %1 не может быть отправленным по ЭДО, поскольку:'"), Документ)
		+ Символы.ПС
		+ Причина;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Возвращает таблицы для проверки возможности формирования ЭД по документу ДО.
// 
// Параметры:
//  Документ - Справочник.ВнутренниеДокументы - Ссылка на документ ДО для которого необходимо проверить
//                                              возможность обмена по ЭДО.
//  НаправлениеЭД - Перечисление.НаправленияЭД - Направление обмена ЭДО. Если не указано, то считается
//                                               что идет проверка на возможность отправки по ЭДО.
// 
// Возвращаемое значение:
//  Структура - таблицы для проверки:
//      * Организации - ТаблицаЗначений:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация документа.
//          * ВидДокумента - Справочник.ВидыВнутреннихДокументов - Вид документа ДО.
//          * Подписан - Булево - Стоит ли отметка о нашем подписании в таблице сторон.
//          * Подписант - Справочник.Пользователи - Подписант с нашей стороны.
//      * УчетныеЗаписиЭДО - ТаблицаЗначений:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация документа.
//          * ИдентификаторЭДО - Строка - Идентификатор ЭДО организации.
//      * Контрагенты - ТаблицаЗначений:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация документа.
//          * Контрагент - Справочник.Контрагенты - Контрагент документа.
//          * ВидДокумента - Справочник.ВидыВнутреннихДокументов - Вид документа ДО.
//      * НастройкиОтправкиДО - ТаблицаЗначений - Присутствует только если
//                                                направление ЭД - исходящий или не задано.:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки ДО.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки ДО.
//          * ВидЭД - Перечисление.ВидыЭД - Вид ЭД указанный в настройках отправки.
//      * НастройкиОтправки - ТаблицаЗначений - Присутствует только если
//                                                направление ЭД - исходящий или не задано.:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки.
//          * ИдентификаторОрганизации - Строка - ИД оператора ЭДО организации для отправки документа.
//          * ИдентификаторКонтрагента - Строка - ИД оператора ЭДО контрагента.
//      * ДействующиеНастройкиОтправки - ТаблицаЗначений - Присутствует только если
//                                                направление ЭД - исходящий или не задано.:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки.
//          * ИдентификаторОрганизации - Строка - ИД оператора ЭДО организации для отправки документа.
//          * ИдентификаторКонтрагента - Строка - ИД оператора ЭДО контрагента.
//          * Статус - Перечисление.СтатусыПриглашений - Статус соглашения об обмене ЭДО.
//      * НастройкиПриемаДО - ТаблицаЗначений - Присутствует только если направление ЭД - входящий:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки.
//          * ВидЭД - Перечисление.ВидыЭД - Вид ЭД настройки.
//      * НастройкиПриема - ТаблицаЗначений - Присутствует только если направление ЭД - входящий:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки.
//          * ИдентификаторОрганизации - Строка - ИД оператора ЭДО организации для получения документа.
//          * ИдентификаторКонтрагента - Строка - ИД оператора ЭДО контрагента.
//      * ДействующиеНастройкиПриема - ТаблицаЗначений - Присутствует только если направление ЭД - входящий:
//          * Документ - Справочник.ВнутренниеДокументы - Документ ДО.
//          * Организация - Справочник.Организации - Организация настройки.
//          * Контрагент - Справочник.Контрагенты - Контрагент настройки.
//          * ИдентификаторОрганизации - Строка - ИД оператора ЭДО организации для получения документа.
//          * ИдентификаторКонтрагента - Строка - ИД оператора ЭДО контрагента.
//          * Статус - Перечисление.СтатусыПриглашений - Статус соглашения об обмене ЭДО.
//      * ФайлыДокумента - ТаблицаЗначений:
//          * Файл - Справочник.Файлы - Файл документа.
//          * ТекущаяВерсия - Справочник.ВерсииФайлов - Текущая версия файла.
//      * ПодписиФайлов - ТаблицаЗначений:
//          * Файл - Справочник.Файлы - Файл документа.
//          * ТекущаяВерсия - Справочник.ВерсииФайлов - Текущая версия файла.
//          * Отпечаток - Строка - Отпечаток сертификата подписи.
//          * ПодписьВерна - Булево - Указывает, верна ли подпись файла.
//          * СертификатДействителен - Булево - Указывает, действителен ли сертификат подписи файла.
//      * ОтпечаткиДляОтправки - ТаблицаЗначений:
//          * Файл - Справочник.Файлы - Файл документа.
//          * ТекущаяВерсия - Справочник.ВерсииФайлов - Текущая версия файла.
//          * Отпечаток - Строка - Отпечаток сертификата подписи.
Функция ТаблицыДляПроверкиВозможностиФормирования(Документ, НаправлениеЭД = Неопределено)
	
	ПолучатьНастройкиОтправки = Истина;
	ПолучатьНастройкиПриема = Ложь;
	
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПолучатьНастройкиОтправки = Ложь;
		ПолучатьНастройкиПриема = Истина;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВнутренниеДокументыСтороны.Ссылка КАК Документ,
		|	ВнутренниеДокументыСтороны.Сторона КАК Организация,
		|	ВнутренниеДокументыСтороны.Ссылка.ВидДокумента КАК ВидДокумента,
		|	ВнутренниеДокументыСтороны.Подписан КАК Подписан,
		|	ВнутренниеДокументыСтороны.Подписал КАК Подписант
		|ПОМЕСТИТЬ ДокументСОрганизацией
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыСтороны
		|ГДЕ
		|	ВнутренниеДокументыСтороны.Ссылка = &Документ
		|	И ВнутренниеДокументыСтороны.НомерСтроки = 1
		|	И ВнутренниеДокументыСтороны.Сторона ССЫЛКА Справочник.Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументСОрганизацией.Документ КАК Документ,
		|	ДокументСОрганизацией.Организация КАК Организация,
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ПОМЕСТИТЬ УчетныеЗаписиЭДООрганизации
		|ИЗ
		|	ДокументСОрганизацией КАК ДокументСОрганизацией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ДокументСОрганизацией.Организация = УчетныеЗаписиЭДО.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументСОрганизацией.Документ КАК Документ,
		|	ДокументСОрганизацией.Организация КАК Организация,
		|	ВнутренниеДокументыСтороны.Сторона КАК Контрагент,
		|	ДокументСОрганизацией.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ ДокументСоСторонами
		|ИЗ
		|	ДокументСОрганизацией КАК ДокументСОрганизацией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Стороны КАК ВнутренниеДокументыСтороны
		|		ПО ДокументСОрганизацией.Документ = ВнутренниеДокументыСтороны.Ссылка
		|ГДЕ
		|	ВнутренниеДокументыСтороны.Сторона ССЫЛКА Справочник.Контрагенты";
	
	Если ПолучатьНастройкиОтправки Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////"
			+
			"
			|ВЫБРАТЬ
			|	ДокументСоСторонами.Документ КАК Документ,
			|	ДокументСоСторонами.Организация КАК Организация,
			|	ДокументСоСторонами.Контрагент КАК Контрагент,
			|	НастройкиОтправкиДО.ВидЭД КАК ВидЭД
			|ПОМЕСТИТЬ НастройкиОтправкиДО
			|ИЗ
			|	ДокументСоСторонами КАК ДокументСоСторонами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиДокументовПоЭДО КАК НастройкиОтправкиДО
			|		ПО ДокументСоСторонами.Организация = НастройкиОтправкиДО.Отправитель
			|			И ДокументСоСторонами.Контрагент = НастройкиОтправкиДО.Получатель
			|			И ДокументСоСторонами.ВидДокумента = НастройкиОтправкиДО.ВидДокумента
			|ГДЕ
			|	НастройкиОтправкиДО.Отправлять
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиОтправкиДО.Документ КАК Документ,
			|	НастройкиОтправкиДО.Организация КАК Организация,
			|	НастройкиОтправкиДО.Контрагент КАК Контрагент,
			|	НастройкиОтправки.ИдентификаторОтправителя КАК ИдентификаторОрганизации,
			|	НастройкиОтправки.ИдентификаторПолучателя КАК ИдентификаторКонтрагента
			|ПОМЕСТИТЬ НастройкиОтправки
			|ИЗ
			|	НастройкиОтправкиДО КАК НастройкиОтправкиДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправки
			|		ПО НастройкиОтправкиДО.Организация = НастройкиОтправки.Отправитель
			|			И НастройкиОтправкиДО.Контрагент = НастройкиОтправки.Получатель
			|			И (НастройкиОтправкиДО.ВидЭД = НастройкиОтправки.ВидДокумента
			|				ИЛИ НастройкиОтправкиДО.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПустаяСсылка))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиОтправки.Документ КАК Документ,
			|	НастройкиОтправки.Организация КАК Организация,
			|	НастройкиОтправки.Контрагент КАК Контрагент,
			|	НастройкиОтправки.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	НастройкиОтправки.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	ПриглашенияКОбмену.Статус КАК Статус
			|ПОМЕСТИТЬ ДействующиеНастройкиОтправки
			|ИЗ
			|	НастройкиОтправки КАК НастройкиОтправки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбмену
			|		ПО НастройкиОтправки.ИдентификаторОрганизации = ПриглашенияКОбмену.ИдентификаторОрганизации
			|			И НастройкиОтправки.ИдентификаторКонтрагента = ПриглашенияКОбмену.ИдентификаторКонтрагента
			|ГДЕ
			|	ПриглашенияКОбмену.Статус В(&СтатусыДействующегоПриглашения)";
	КонецЕсли;
	
	Если ПолучатьНастройкиПриема Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////"
			+
			"
			|ВЫБРАТЬ
			|	ДокументСоСторонами.Документ КАК Документ,
			|	ДокументСоСторонами.Организация КАК Организация,
			|	ДокументСоСторонами.Контрагент КАК Контрагент,
			|	ПравилаУчетаВидовЭДДО.ВидЭД КАК ВидЭД
			|ПОМЕСТИТЬ НастройкиПолученияДО
			|ИЗ
			|	ДокументСоСторонами КАК ДокументСоСторонами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаУчетаВидовЭДДО КАК ПравилаУчетаВидовЭДДО
			|		ПО ДокументСоСторонами.Организация = ПравилаУчетаВидовЭДДО.Организация
			|			И ДокументСоСторонами.Контрагент = ПравилаУчетаВидовЭДДО.Контрагент
			|			И ДокументСоСторонами.ВидДокумента = ПравилаУчетаВидовЭДДО.ВидДокумента
			|ГДЕ
			|	ПравилаУчетаВидовЭДДО.Принимать
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиПолученияДО.Документ КАК Документ,
			|	НастройкиПолученияДО.Организация КАК Организация,
			|	НастройкиПолученияДО.Контрагент КАК Контрагент,
			|	НастройкиПолучения.ИдентификаторОтправителя КАК ИдентификаторКонтрагента,
			|	НастройкиПолучения.ИдентификаторПолучателя КАК ИдентификаторОрганизации
			|ПОМЕСТИТЬ НастройкиПолучения
			|ИЗ
			|	НастройкиПолученияДО КАК НастройкиПолученияДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолучения
			|		ПО НастройкиПолученияДО.Организация = НастройкиПолучения.Получатель
			|			И НастройкиПолученияДО.Контрагент = НастройкиПолучения.Отправитель
			|			И НастройкиПолученияДО.ВидЭД = НастройкиПолучения.ВидДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиПолучения.Документ КАК Документ,
			|	НастройкиПолучения.Организация КАК Организация,
			|	НастройкиПолучения.Контрагент КАК Контрагент,
			|	НастройкиПолучения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	НастройкиПолучения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	ПриглашенияКОбмену.Статус КАК Статус
			|ПОМЕСТИТЬ ДействующиеНастройкиПолучения
			|ИЗ
			|	НастройкиПолучения КАК НастройкиПолучения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбмену
			|		ПО НастройкиПолучения.ИдентификаторОрганизации = ПриглашенияКОбмену.ИдентификаторОрганизации
			|			И НастройкиПолучения.ИдентификаторКонтрагента = ПриглашенияКОбмену.ИдентификаторКонтрагента
			|ГДЕ
			|	ПриглашенияКОбмену.Статус В(&СтатусыДействующегоПриглашения)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////"
		+ 
		"
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
		|ПОМЕСТИТЬ ФайлыДокумента
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И НЕ Файлы.ПометкаУдаления
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДокумента.Файл КАК Файл,
		|	ФайлыДокумента.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
		|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
		|	ЭлектронныеПодписи.СертификатДействителен КАК СертификатДействителен
		|ПОМЕСТИТЬ ПодписиФайловДокумента
		|ИЗ
		|	ФайлыДокумента КАК ФайлыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО ФайлыДокумента.ТекущаяВерсия = ЭлектронныеПодписи.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭДООрганизации.Документ КАК Документ,
		|	УчетныеЗаписиЭДООрганизации.Организация КАК Организация,
		|	УчетныеЗаписиЭДООрганизации.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	СертификатыУчетныхЗаписейЭДО.Сертификат КАК Сертификат,
		|	СертификатыУчетныхЗаписейЭДО.Сертификат.Отпечаток КАК Отпечаток
		|ПОМЕСТИТЬ СертификатыДляОбменаЭДО
		|ИЗ
		|	УчетныеЗаписиЭДООрганизации КАК УчетныеЗаписиЭДООрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|		ПО УчетныеЗаписиЭДООрганизации.ИдентификаторЭДО = СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодписиФайловДокумента.Файл КАК Файл,
		|	ПодписиФайловДокумента.ТекущаяВерсия КАК ТекущаяВерсия,
		|	СертификатыДляОбменаЭДО.Отпечаток КАК Отпечаток
		|ПОМЕСТИТЬ ПодписиПоДоступнымСертификатам
		|ИЗ
		|	ПодписиФайловДокумента КАК ПодписиФайловДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СертификатыДляОбменаЭДО КАК СертификатыДляОбменаЭДО
		|		ПО ПодписиФайловДокумента.Отпечаток = СертификатыДляОбменаЭДО.Отпечаток
		|ГДЕ
		|	ПодписиФайловДокумента.ПодписьВерна
		|	И ПодписиФайловДокумента.СертификатДействителен";
	
	НеобходимыеТаблицы = Новый Структура;
	НеобходимыеТаблицы.Вставить("Организации",                      "ДокументСОрганизацией");
	НеобходимыеТаблицы.Вставить("УчетныеЗаписиЭДО",                 "УчетныеЗаписиЭДООрганизации");
	НеобходимыеТаблицы.Вставить("Контрагенты",                      "ДокументСоСторонами");
	
	Если ПолучатьНастройкиОтправки Тогда
		НеобходимыеТаблицы.Вставить("НастройкиОтправкиДО",          "НастройкиОтправкиДО");
		НеобходимыеТаблицы.Вставить("НастройкиОтправки",            "НастройкиОтправки");
		НеобходимыеТаблицы.Вставить("ДействующиеНастройкиОтправки", "ДействующиеНастройкиОтправки");
	КонецЕсли;
	
	Если ПолучатьНастройкиПриема Тогда
		НеобходимыеТаблицы.Вставить("НастройкиПриемаДО",            "НастройкиПолученияДО");
		НеобходимыеТаблицы.Вставить("НастройкиПриема",              "НастройкиПолучения");
		НеобходимыеТаблицы.Вставить("ДействующиеНастройкиПриема",   "ДействующиеНастройкиПолучения");
	КонецЕсли;
	
	НеобходимыеТаблицы.Вставить("ФайлыДокумента",                   "ФайлыДокумента");
	НеобходимыеТаблицы.Вставить("ПодписиФайлов",                    "ПодписиФайловДокумента");
	НеобходимыеТаблицы.Вставить("ОтпечаткиДляОтправки",             "ПодписиПоДоступнымСертификатам");
	
	Для Каждого Элемент Из НеобходимыеТаблицы Цикл
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	*
			|ИЗ
			|	" + Элемент.Значение + " КАК " + Элемент.Значение;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("СтатусыДействующегоПриглашения", Перечисления.СтатусыПриглашений.Принято);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = РезультатыЗапроса.Количество();
	КоличествоТаблиц = НеобходимыеТаблицы.Количество();
	
	Итератор = 0;
	
	ТаблицыДляПроверки = Новый Структура;
	
	Для Каждого Элемент Из НеобходимыеТаблицы Цикл
		Таблица = РезультатыЗапроса[КоличествоПакетов - КоличествоТаблиц + Итератор].Выгрузить();
		ТаблицыДляПроверки.Вставить(Элемент.Ключ, Таблица);
		
		Итератор = Итератор + 1;
	КонецЦикла;
	
	Возврат ТаблицыДляПроверки;
	
КонецФункции

#КонецОбласти

#Область АннулированиеДокументов

// Создает новый внутренний документ аннулирования
// 
// Параметры:
//   Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому инициировано аннулирование
//   ЭД - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий -
//                     ЭД по которому запущено аннулирование и по которому необходимо
//                     создать документ предложения об аннулировании
//   ПараметрыДокументаАннулирования - Структура из:
//       * ВидДокументаАннулирования - СправочникСсылка.ВидыВнутреннихДокументов - Вид документа,
//                                        которым учитывается аннулирование ЭДО
//       * ВопросДеятельности - СправочникСсылка.ВопросыДеятельности - Вопрос деятельности документа аннулирования
//       * Ответственный - СправочникСсылка.Пользователи - Ответственный документа аннулирования
//       * Папка - СправочникСсылка.ПапкиВнутреннихДокументов - Папка документа аннулирования
//       * ШаблонНаименования - Строка - Шаблон наименования для создаваемого документа
//       * ШаблонСодержания - Строка - Шаблон содержания для создаваемого документа
// 
// Возвращаемое значение:
//  Структура из:
//      * Документ - СправочникСсылка.ВнутренниеДокументы - Документ аннулирования
//      * Файл - СправочникСсылка.Файлы - Файл предложения об аннулировании
Функция СоздатьДокументАннулирования(Документ, ЭД, ПараметрыДокументаАннулирования) Экспорт
	
	РеквизитыДокумента = РеквизитыДляСозданияДокументаАннулирования(Документ, ЭД,
		ПараметрыДокументаАннулирования);
	
	ДокументАннулирования = Справочники.ВнутренниеДокументы.СоздатьЭлемент();
	ДокументАннулирования.Источник = Справочники.ИсточникиДанных.ЭДО;
	
	ДокументАннулирования.Заполнить(РеквизитыДокумента);
	ДокументАннулирования.Записать();
	
	Для Каждого СведенияОФайле Из РеквизитыДокумента.Файлы Цикл
		Файл = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ДокументАннулирования.Ссылка, СведенияОФайле);
		
		Если СведенияОФайле.МассивДанныхОПодписях.Количество() > 0 Тогда
			
			ПодписиФайла = Новый Массив;
			
			Для Каждого СвойстваПодписи Из СведенияОФайле.МассивДанныхОПодписях Цикл
				ПодписиФайла.Добавить(
					Новый Структура("ПодписанныйОбъект, СвойстваПодписи", Файл, СвойстваПодписи));
			КонецЦикла;
			
			РаботаСЭП.ЗанестиИнформациюОПодписях(ПодписиФайла);
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Документ", ДокументАннулирования.Ссылка);
	СтруктураВозврата.Вставить("Файл", Файл);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция РеквизитыДляСозданияДокументаАннулирования(Документ, ЭД, ПараметрыДокументаАннулирования)
	
	РеквизитыАннулирования = Новый Структура;
	
	РеквизитыАннулирования.Вставить("ВидДокумента");
	РеквизитыАннулирования.Вставить("ВопросДеятельности");
	РеквизитыАннулирования.Вставить("ДатаНачалаДействия");
	РеквизитыАннулирования.Вставить("ДатаОкончанияДействия");
	РеквизитыАннулирования.Вставить("ДатаСоздания");
	РеквизитыАннулирования.Вставить("Заголовок");
	РеквизитыАннулирования.Вставить("КоличествоЛистов");
	РеквизитыАннулирования.Вставить("КоличествоПриложений");
	РеквизитыАннулирования.Вставить("КоличествоЭкземпляров");
	РеквизитыАннулирования.Вставить("КонтактноеЛицо");
	РеквизитыАннулирования.Вставить("ЛистовВПриложениях");
	РеквизитыАннулирования.Вставить("Ответственный");
	РеквизитыАннулирования.Вставить("Папка");
	РеквизитыАннулирования.Вставить("ПорядокПродления");
	РеквизитыАннулирования.Вставить("Содержание");
	РеквизитыАннулирования.Вставить("Стороны");
	РеквизитыАннулирования.Вставить("Файлы");
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
		"ВопросДеятельности, Ответственный, Папка");
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД,
		"Организация, Контрагент");
	
	ЗаполнитьЗначенияСвойств(РеквизитыАннулирования, РеквизитыДокумента);
	
	Для Каждого Элемент Из ПараметрыДокументаАннулирования Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) И РеквизитыАннулирования.Свойство(Элемент.Ключ) Тогда
			РеквизитыАннулирования[Элемент.Ключ] = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыАннулирования.ВидДокумента = ПараметрыДокументаАннулирования.ВидДокументаАннулирования;
	
	// Заполнение сторон
	
	Стороны = Новый ТаблицаЗначений;
	Стороны.Колонки.Добавить("Сторона");
	Стороны.Колонки.Добавить("КонтактноеЛицо");
	Стороны.Колонки.Добавить("ДатаПодписи");
	Стороны.Колонки.Добавить("Подписан");
	Стороны.Колонки.Добавить("Подписал");
	
	Сторона = Стороны.Добавить();
	Сторона.Сторона = РеквизитыЭД.Организация;
	
	Сторона = Стороны.Добавить();
	Сторона.Сторона = РеквизитыЭД.Контрагент;

	РеквизитыАннулирования.Стороны = Стороны;
	
	// Файл предложения об аннулировании
	
	ЗаполнитьСведенияОФайлеИПодписях(РеквизитыАннулирования, ЭД, Документ);
	
	// Заполнение шаблонов строковых полей
	
	ЗаполнитьНаименованиеИСодержаниеАннулирования(РеквизитыАннулирования, Документ,
		ПараметрыДокументаАннулирования);
	
	Возврат РеквизитыАннулирования;
	
КонецФункции

Процедура ЗаполнитьСведенияОФайлеИПодписях(РеквизитыАннулирования, ЭД, Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ФайлПредложенияОбАннулировании,
		|	ЭДПрисоединенныеФайлы.НаименованиеФайла КАК НаименованиеФайла,
		|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ЭД
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД";
	
	Запрос.УстановитьПараметр("ЭД", ЭД);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПОА);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Файлы = Новый Массив;
	
	ДанныеФайла = Новый Структура("ФайлПредложенияОбАннулировании, НаименованиеФайла, Расширение");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Выборка);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеФайла.ФайлПредложенияОбАннулировании) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить файл предложения об аннулировании.'");
	КонецЕсли;
	
	ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ДанныеФайла.ФайлПредложенияОбАннулировании);
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = СсылкаНаДвоичныеДанныеФайла;
	ЗаполнитьЗначенияСвойств(СведенияОФайле, ДанныеФайла.ФайлПредложенияОбАннулировании);
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ИмяБезРасширения = 
		СтрШаблон(НСтр("ru = 'Предложение об аннулировании ""%1""'"),
			Документ);
	СведенияОФайле.РасширениеБезТочки = ДанныеФайла.Расширение;
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ДанныеФайла.ФайлПредложенияОбАннулировании);
	
	СведенияОФайле.Вставить("МассивДанныхОПодписях", УстановленныеПодписи);
	
	Файлы.Добавить(СведенияОФайле);
	
	РеквизитыАннулирования.Файлы = Файлы;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеИСодержаниеАннулирования(РеквизитыАннулирования, Документ,
	ПараметрыДокументаАннулирования)
	
	ПараметрыСтроковыхПолей = Новый Структура("АннулируемыйДокумент", Документ);
	
	РезультатЗаполненияНаименования = ЗаполнитьСтроковыеПараметрыПоШаблону(
		ПараметрыДокументаАннулирования.ШаблонНаименования,
		ПараметрыСтроковыхПолей,
		"ДеревоПараметровДокументаАннулирования");
	
	РезультатЗаполненияСодержания = ЗаполнитьСтроковыеПараметрыПоШаблону(
		ПараметрыДокументаАннулирования.ШаблонСодержания,
		ПараметрыСтроковыхПолей,
		"ДеревоПараметровДокументаАннулирования");
	
	Наименование = "";
	Содержание = "";
	
	Если РезультатЗаполненияНаименования.Успех Тогда
		Наименование = РезультатЗаполненияНаименования.ЗаполненнаяСтрока;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Наименование = СтрШаблон(НСтр("ru = 'Предложение об аннулировании %1'"),
			Документ);
	КонецЕсли;
	
	Если РезультатЗаполненияСодержания.Успех Тогда
		Содержание = РезультатЗаполненияСодержания.ЗаполненнаяСтрока;
	КонецЕсли;
	
	РеквизитыАннулирования.Заголовок = Наименование;
	РеквизитыАннулирования.Содержание = Содержание;
	
КонецПроцедуры

// Копирует подписи документа аннулирования
// 
// Параметры:
//  ФайлЭДАннулирования - СправочникСсылка.ЭДПрисоединенныеФайлы - ЭД предложения об аннулировании
// 
Процедура СкопироватьПодписиДокументаАннулирования(ФайлЭДАннулирования, ФайлСоглашенияОбАннулировании) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.Подпись КАК Подпись,
		|	ЭлектронныеПодписи.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ЭлектронныеПодписи.УстановившийПодпись КАК УстановившийПодпись,
		|	ЭлектронныеПодписи.Комментарий КАК Комментарий,
		|	ЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
		|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
		|	ЭлектронныеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
		|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
		|	ЭлектронныеПодписи.Сертификат КАК Сертификат,
		|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
		|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
		|	ЭлектронныеПодписи.Версия КАК Версия,
		|	ЭлектронныеПодписи.СертификатДействителен КАК СертификатДействителен,
		|	ЭлектронныеПодписи.ТекстОшибкиПроверкиПодписи КАК ТекстОшибкиПроверкиПодписи,
		|	ЭлектронныеПодписи.ТекстОшибкиПроверкиСертификата КАК ТекстОшибкиПроверкиСертификата,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
		|			ТОГДА 0
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
		|			ТОГДА 1
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
		|			ТОГДА 2
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
		|			ТОГДА 3
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЭлектронныеПодписи.Объект.ПодписанЭП
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК СтатусПроверкиЭП
		|ПОМЕСТИТЬ ЭПФайлаЭДАннулирования
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЭлектронныеПодписи.Объект = КешИнформацииОбОбъектах.Объект
		|ГДЕ
		|	ЭлектронныеПодписи.Объект = &ФайлЭДАннулирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныеПодписи.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
		|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток
		|ПОМЕСТИТЬ ЭПФайлаСоглашенияОбАннулировании
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО Файлы.ТекущаяВерсия = ЭлектронныеПодписи.Объект
		|ГДЕ
		|	Файлы.Ссылка = &ФайлСоглашенияОбАннулировании
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭПФайлаЭДАннулирования.Подпись КАК Подпись,
		|	ЭПФайлаЭДАннулирования.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ЭПФайлаЭДАннулирования.УстановившийПодпись КАК УстановившийПодпись,
		|	ЭПФайлаЭДАннулирования.Комментарий КАК Комментарий,
		|	ЭПФайлаЭДАннулирования.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
		|	ЭПФайлаЭДАннулирования.ДатаПодписи КАК ДатаПодписи,
		|	ЭПФайлаЭДАннулирования.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
		|	ЭПФайлаЭДАннулирования.ПодписьВерна КАК ПодписьВерна,
		|	ЭПФайлаЭДАннулирования.Сертификат КАК Сертификат,
		|	ЭПФайлаЭДАннулирования.Отпечаток КАК Отпечаток,
		|	ЭПФайлаЭДАннулирования.КомуВыданСертификат КАК КомуВыданСертификат,
		|	ЭПФайлаЭДАннулирования.Версия КАК Версия,
		|	ЭПФайлаЭДАннулирования.СертификатДействителен КАК СертификатДействителен,
		|	ЭПФайлаЭДАннулирования.ТекстОшибкиПроверкиПодписи КАК ТекстОшибкиПроверкиПодписи,
		|	ЭПФайлаЭДАннулирования.ТекстОшибкиПроверкиСертификата КАК ТекстОшибкиПроверкиСертификата,
		|	ЭПФайлаЭДАннулирования.СтатусПроверкиЭП КАК СтатусПроверкиЭП
		|ИЗ
		|	ЭПФайлаЭДАннулирования КАК ЭПФайлаЭДАннулирования
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЭПФайлаСоглашенияОбАннулировании КАК ЭПФайлаСоглашенияОбАннулировании
		|		ПО ЭПФайлаЭДАннулирования.Отпечаток = ЭПФайлаСоглашенияОбАннулировании.Отпечаток
		|			И ЭПФайлаЭДАннулирования.ДатаПодписи = ЭПФайлаСоглашенияОбАннулировании.ДатаПодписи
		|ГДЕ
		|	ЭПФайлаСоглашенияОбАннулировании.УникальныйИдентификатор ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ФайлЭДАннулирования", ФайлЭДАннулирования);
	Запрос.УстановитьПараметр("ФайлСоглашенияОбАннулировании", ФайлСоглашенияОбАннулировании);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	СведенияОПодписях = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваПодписи = Новый Структура(
			"УникальныйИдентификатор, ДатаПодписи, УстановившийПодпись,
			|ДатаПроверкиПодписи, ИмяФайлаПодписи, Комментарий, КомуВыданСертификат,
			|Отпечаток, Подпись, ПодписьВерна, Сертификат, Версия, СертификатДействителен,
			|ТекстОшибкиПроверкиПодписи, ТекстОшибкиПроверкиСертификата, СтатусПроверкиЭП");
		
		ЗаполнитьЗначенияСвойств(СвойстваПодписи, Выборка);
		СвойстваПодписи.Подпись = СвойстваПодписи.Подпись.Получить();
		СвойстваПодписи.Сертификат = СвойстваПодписи.Сертификат.Получить();
		
		СведенияОПодписях.Добавить(
			Новый Структура("ПодписанныйОбъект, СвойстваПодписи",
				ФайлСоглашенияОбАннулировании, СвойстваПодписи));
		
	КонецЦикла;
	
	РаботаСЭП.ЗанестиИнформациюОПодписях(СведенияОПодписях);
	
КонецПроцедуры

// Обрабатывает событие записи предложения об аннулировании и при необходимости выполняет нужные действия
// 
// Параметры:
//  ФайлЭДАннулирования - СправочникОбъект.ЭДПрисоединенныеФайлы - ЭД предложения об аннулировании
// 
Процедура ОбработатьЗаписьПредложенияАннулирования(ФайлЭДАннулирования) Экспорт
	
	Если ФайлЭДАннулирования.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
		
		ОбработатьПолучениеПредложенияОбАннулировании(ФайлЭДАннулирования.Ссылка);
		
	КонецЕсли;
	
	Если (ФайлЭДАннулирования.СтатусЭД = Перечисления.СтатусыЭД.Подписан
			И ФайлЭДАннулирования.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий)
		ИЛИ (ФайлЭДАннулирования.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение
			И ФайлЭДАннулирования.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий) Тогда
		
		ОбработатьПолучениеНовыхПодписейЭДАннулирования(ФайлЭДАннулирования.Ссылка);
		
	КонецЕсли;
	
	ЗаписатьСтатусЭДОДокументаАннулирования(ФайлЭДАннулирования.Ссылка);
	
КонецПроцедуры

Процедура ОбработатьПолучениеПредложенияОбАннулировании(ФайлЭДАннулирования)
	
	ДанныеАннулирования = ДанныеДокументаАннулированияПоФайлуЭД(ФайлЭДАннулирования);
	
	Если Не ЗначениеЗаполнено(ДанныеАннулирования.ДокументДО) Тогда
		РегистрыСведений.ДокументыАннулирования.ЗаписатьСведенияОбАннулировании(
			Неопределено,
			ДанныеАннулирования.ЭД,
			Неопределено);
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеАннулирования.СоглашениеОбАннулировании) Тогда
		
		Если Не ДанныеАннулирования.ПараметрыАннулирования.АннулироватьОтдельнымДокументом Тогда
			
			РегистрыСведений.ДокументыАннулирования.ЗаписатьСведенияОбАннулировании(
				ДанныеАннулирования.ДокументДО,
				ДанныеАннулирования.ЭД,
				ДанныеАннулирования.ДокументДО);
			
			ДанныеАннулирования.СоглашениеОбАннулировании = ДанныеАннулирования.ДокументДО;
			
		Иначе
			
			// Сначала запишем в РС пустой документ аннулирования для того, чтобы обозначить, что аннулирование инициировано
			РегистрыСведений.ДокументыАннулирования.ЗаписатьСведенияОбАннулировании(
				ДанныеАннулирования.ДокументДО,
				ДанныеАннулирования.ЭД,
				Неопределено);
			
			НачатьТранзакцию();
			Попытка
				
				Результат = ОбменСКонтрагентамиДОСервер.СоздатьДокументАннулирования(
					ДанныеАннулирования.ДокументДО,
					ДанныеАннулирования.ЭД,
					ДанныеАннулирования.ПараметрыАннулирования.ПараметрыДокументаАннулирования);
				
				РегистрыСведений.ДокументыАннулирования.ЗаписатьСведенияОбАннулировании(
					ДанныеАннулирования.ДокументДО,
					ДанныеАннулирования.ЭД,
					Результат.Документ,
					Результат.Файл);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ВызватьИсключение
					СтрШаблон(НСтр("ru = 'Не удалось создать аннулирование документа %1 по причине:'"),
						ДанныеАннулирования.ДокументДО)
					+ Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
			КонецПопытки;
			
			ДанныеАннулирования.СоглашениеОбАннулировании = Результат.Документ;
			ДанныеАннулирования.ФайлСоглашенияОбАннулировании = Результат.Файл;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАннулирования.ФайлСоглашенияОбАннулировании)
		И ДанныеАннулирования.СоглашениеОбАннулировании <> ДанныеАннулирования.ДокументДО Тогда
		
		СкопироватьПодписиДокументаАннулирования(
			ДанныеАннулирования.ФайлЭДАннулирования,
			ДанныеАннулирования.ФайлСоглашенияОбАннулировании);
		
	КонецЕсли;
	
	ЗаписатьСтатусЭДОДокументаАннулирования(ФайлЭДАннулирования);
	
КонецПроцедуры

Функция ДанныеДокументаАннулированияПоФайлуЭД(ФайлЭДАннулирования)
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("ФайлЭДАннулирования", ФайлЭДАннулирования);
	СтруктураВозврата.Вставить("ЭД");
	СтруктураВозврата.Вставить("ДокументДО");
	СтруктураВозврата.Вставить("СоглашениеОбАннулировании");
	СтруктураВозврата.Вставить("ФайлСоглашенияОбАннулировании");
	
	ПараметрыАннулирования = Новый Структура;
	ПараметрыАннулирования.Вставить("ВидДокумента");
	ПараметрыАннулирования.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	ПараметрыАннулирования.Вставить("УчитыватьНедействующиеДокументы", Ложь);
	ПараметрыАннулирования.Вставить("ВариантУказанияОтменяющегоДокумента");
	ПараметрыАннулирования.Вставить("ОбязательноУказаниеОтменяющегоДокумента", Истина);
	ПараметрыАннулирования.Вставить("АннулироватьОтдельнымДокументом", Ложь);
	
	ПараметрыДокументаАннулирования = Новый Структура;
	ПараметрыДокументаАннулирования.Вставить("ВидДокументаАннулирования");
	ПараметрыДокументаАннулирования.Вставить("ВопросДеятельности");
	ПараметрыДокументаАннулирования.Вставить("Ответственный");
	ПараметрыДокументаАннулирования.Вставить("Папка");
	ПараметрыДокументаАннулирования.Вставить("ШаблонНаименования");
	ПараметрыДокументаАннулирования.Вставить("ШаблонСодержания");
	
	ПараметрыАннулирования.Вставить("ПараметрыДокументаАннулирования", ПараметрыДокументаАннулирования);
	
	СтруктураВозврата.Вставить("ПараметрыАннулирования", ПараметрыАннулирования);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭДПредложенияАннулирования,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ЭД
		|ПОМЕСТИТЬ ДанныеЭДИФайла
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка = &ЭДАннулирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЭДИФайла.ЭДПредложенияАннулирования КАК ЭДПредложенияАннулирования,
		|	ДанныеЭДИФайла.ЭД КАК ЭД,
		|	ВЫРАЗИТЬ(СостоянияЭД.СсылкаНаОбъект КАК Справочник.ВерсииФайлов).Владелец.ВладелецФайла КАК ДокументДО
		|ПОМЕСТИТЬ ЭДИДокументДО
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЭДИФайла КАК ДанныеЭДИФайла
		|		ПО СостоянияЭД.ЭлектронныйДокумент = ДанныеЭДИФайла.ЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутренниеДокументы.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ ВидДокументаДО
		|ИЗ
		|	ЭДИДокументДО КАК ЭДИДокументДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ПО ЭДИДокументДО.ДокументДО = ВнутренниеДокументы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭДИДокументДО.ЭДПредложенияАннулирования КАК ЭДПредложенияАннулирования,
		|	ЭДИДокументДО.ЭД КАК ЭД,
		|	ЭДИДокументДО.ДокументДО КАК ДокументДО
		|ИЗ
		|	ЭДИДокументДО КАК ЭДИДокументДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭДИДокументДО.ЭДПредложенияАннулирования КАК ЭДПредложенияАннулирования,
		|	ЭДИДокументДО.ЭД КАК ЭД,
		|	ЭДИДокументДО.ДокументДО КАК ДокументДО,
		|	ДокументыАннулирования.СоглашениеОбАннулировании КАК СоглашениеОбАннулировании,
		|	ДокументыАннулирования.ФайлСоглашенияОбАннулировании КАК ФайлСоглашенияОбАннулировании
		|ИЗ
		|	ЭДИДокументДО КАК ЭДИДокументДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыАннулирования КАК ДокументыАннулирования
		|		ПО ЭДИДокументДО.ДокументДО = ДокументыАннулирования.Документ
		|			И ЭДИДокументДО.ЭД = ДокументыАннулирования.ЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидДокументаДО.ВидДокумента КАК ВидДокумента,
		|	ВидыВнутреннихДокументов.УчитыватьНедействующиеДокументы КАК УчитыватьНедействующиеДокументы,
		|	ВидыВнутреннихДокументов.ВариантУказанияОтменяющегоДокумента КАК ВариантУказанияОтменяющегоДокумента,
		|	НЕ НастройкиСозданияДокументовАннулирования.ВидДокумента ЕСТЬ NULL КАК АннулироватьОтдельнымДокументом,
		|	НастройкиСозданияДокументовАннулирования.ВидДокументаАннулирования КАК ВидДокументаАннулирования,
		|	НастройкиСозданияДокументовАннулирования.ВопросДеятельности КАК ВопросДеятельности,
		|	НастройкиСозданияДокументовАннулирования.Ответственный КАК Ответственный,
		|	НастройкиСозданияДокументовАннулирования.Папка КАК Папка,
		|	НастройкиСозданияДокументовАннулирования.ШаблонНаименования КАК ШаблонНаименования,
		|	НастройкиСозданияДокументовАннулирования.ШаблонСодержания КАК ШаблонСодержания
		|ИЗ
		|	ВидДокументаДО КАК ВидДокументаДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|		ПО ВидДокументаДО.ВидДокумента = ВидыВнутреннихДокументов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСозданияДокументовАннулирования КАК НастройкиСозданияДокументовАннулирования
		|		ПО ВидДокументаДО.ВидДокумента = НастройкиСозданияДокументовАннулирования.ВидДокумента
		|			И (НастройкиСозданияДокументовАннулирования.Направление = &НаправлениеЭДАннулирования)";
	
	Запрос.УстановитьПараметр("ЭДАннулирования", ФайлЭДАннулирования);
	Запрос.УстановитьПараметр("НаправлениеЭДАннулирования", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлЭДАннулирования, "НаправлениеЭД"));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	КолвоРезультатов = РезультатыЗапроса.Количество();
	ВыборкаДокументаДО = РезультатыЗапроса[КолвоРезультатов - 3].Выбрать();
	
	Если Не ВыборкаДокументаДО.Следующий() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.ЭД = ВыборкаДокументаДО.ЭД;
	СтруктураВозврата.ДокументДО = ВыборкаДокументаДО.ДокументДО;
	
	ВыборкаДокументаАннулирования = РезультатыЗапроса[КолвоРезультатов - 2].Выбрать();
	
	Если ВыборкаДокументаАннулирования.Следующий() Тогда
		СтруктураВозврата.СоглашениеОбАннулировании = ВыборкаДокументаАннулирования.СоглашениеОбАннулировании;
		СтруктураВозврата.ФайлСоглашенияОбАннулировании = ВыборкаДокументаАннулирования.ФайлСоглашенияОбАннулировании;
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ВыборкаПараметровАннулирования = РезультатыЗапроса[КолвоРезультатов - 1].Выбрать();
	
	Если ВыборкаПараметровАннулирования.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата.ПараметрыАннулирования, ВыборкаПараметровАннулирования);
		
		СтруктураВозврата.ПараметрыАннулирования.ОбязательноУказаниеОтменяющегоДокумента =
			ВыборкаПараметровАннулирования.ВариантУказанияОтменяющегоДокумента = ПредопределенноеЗначение(
				"Перечисление.ВариантыУказанияОтменяющегоДокумента.Обязательное");
		
		Если ВыборкаПараметровАннулирования.ВариантУказанияОтменяющегоДокумента = ПредопределенноеЗначение(
				"Перечисление.ВариантыУказанияОтменяющегоДокумента.БезУказания") Тогда
			
			СтруктураВозврата.ПараметрыАннулирования.АннулироватьОтдельнымДокументом = Ложь;
		КонецЕсли;
		
		Если ВыборкаПараметровАннулирования.АннулироватьОтдельнымДокументом Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата.ПараметрыАннулирования.ПараметрыДокументаАннулирования,
				ВыборкаПараметровАннулирования);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает состояние для соглашения об аннулировании по статусу файла ЭД аннулирования
// 
// Параметры:
//  СтатусЭД - Перечисление.СтатусЭД - Статус предложения об аннулировании
//  НаправлениеЭД - Перечисление.НаправленияЭД - Направление предложения об аннулировании
// 
// Возвращаемое значение:
//  Перечисление.СостоянияВерсийЭДДО - Состояние соглашения об аннулировании
Функция СостояниеСоглашенияАннулированияПоСтатусуЭД(СтатусЭД, НаправлениеЭД) Экспорт
	
	СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ПустаяСсылка();
	
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Если СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
			СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.НаУтверждении;
		ИначеЕсли СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
			СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.НаПодписи;
		ИначеЕсли СтатусЭД = Перечисления.СтатусыЭД.Подписан
			Или СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			
			СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяОтправка;
		ИначеЕсли СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОбменЗавершен;
		ИначеЕсли СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
			СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем;
		КонецЕсли;
		
	Иначе
		
		Если СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
			СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.НаПодписи;
		ИначеЕсли СтатусЭД = Перечисления.СтатусыЭД.Подписан
			Или СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
			
			СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяОтправка;
		ИначеЕсли СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
			СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.Отправлен;
		ИначеЕсли СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
			СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОбменЗавершен;
		ИначеЕсли СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
			СостояниеЭДО = Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СостояниеЭДО;
	
КонецФункции

Процедура ОбработатьПолучениеНовыхПодписейЭДАннулирования(ФайлЭДАннулирования)
	
	ДанныеАннулирования = ДанныеДокументаАннулированияПоФайлуЭД(ФайлЭДАннулирования);
	
	Если Не ЗначениеЗаполнено(ДанныеАннулирования.ДокументДО) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАннулирования.ФайлСоглашенияОбАннулировании)
		И ДанныеАннулирования.СоглашениеОбАннулировании <> ДанныеАннулирования.ДокументДО Тогда
		
		СкопироватьПодписиДокументаАннулирования(
			ДанныеАннулирования.ФайлЭДАннулирования,
			ДанныеАннулирования.ФайлСоглашенияОбАннулировании);
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает статус внутреннего документа ДО для предложения об аннулировании, ести таковой имеется
// 
// Параметры:
//  ФайлЭДАннулирования - СправочникОбъект.ЭДПрисоединенныеФайлы - ЭД предложения об аннулировании
// 
Процедура ЗаписатьСтатусЭДОДокументаАннулирования(ФайлЭДАннулирования) Экспорт
	
	ДанныеАннулирования = ДанныеДокументаАннулированияПоФайлуЭД(ФайлЭДАннулирования.Ссылка);
	
	Если Не (ЗначениеЗаполнено(ДанныеАннулирования.СоглашениеОбАннулировании)
		И ДанныеАннулирования.СоглашениеОбАннулировании <> ДанныеАннулирования.ДокументДО) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
		|	ВЫБОР
		|		КОГДА ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|			ТОГДА ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ЭлектронныйДокументВходящий).Контрагент
		|		КОГДА ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
		|			ТОГДА ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ЭлектронныйДокументИсходящий).Контрагент
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ КАК Контрагент
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка = &ФайлЭД";
	Запрос.УстановитьПараметр("ФайлЭД", ФайлЭДАннулирования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	ДокументАннулирования =  ДанныеАннулирования.СоглашениеОбАннулировании;
	НаправлениеЭД = Выборка.НаправлениеЭД;
	Контрагент = Выборка.Контрагент;
	
	Состояние = СостояниеСоглашенияАннулированияПоСтатусуЭД(
		ФайлЭДАннулирования.СтатусЭД, ФайлЭДАннулирования.НаправлениеЭД);
	
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеЗаписанное = РегистрыСведений.СостояниеДокументовПоЭДО.ДанныеСостоянияДокументаПоЭДО(
		ДокументАннулирования,
		Контрагент);
	
	Если СостояниеЗаписанное = Состояние Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(
		ДокументАннулирования,
		Контрагент,
		Состояние,
		НаправлениеЭД,
		НСтр("ru = 'Изменено в соответствии с изменением статуса предложения об аннулировании'"));
	
	Если Состояние = Перечисления.СостоянияВерсийЭДДО.ОбменЗавершен Тогда
		ЗаписатьНедействительностьДокумента(ДанныеАннулирования.ДокументДО, ДокументАннулирования);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает файл ЭД предлодения об аннулировании электронного документа
// 
// Параметры:
//   ЭД - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий -
//                     ЭД для которого необходимо получить файл предложения об аннулировании
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы, Неопределено - Файл ЭД предложения об аннулировании,
//                                                         если таковой имеется.
//                                                         Неопределено - ином случае.
Функция ФайлЭДАннулированияДокумента(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ФайлПредложенияОбАннулировании
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ЭД
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД";
	
	Запрос.УстановитьПараметр("ЭД", ЭД);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПОА);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ФайлПредложенияОбАннулировании;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьНедействительностьДокумента(Документ, ДокументАннулирования)
	
	НачатьТранзакцию();
	Попытка
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		
		ДокументОбъект.НеДействует = Истина;
		
		ДокументОбъект.Записать();
		
		СвязиДокументов.УстановитьСвязь(Документ, Неопределено,
			ДокументАннулирования, Справочники.ТипыСвязей.НеДействуетВСоответствии);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение
			СтрШаблон(НСтр("ru = 'Не удалось указать недействительность документа %1 на основании документа %2 по причине:'"),
				Документ, ДокументАннулирования)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьСобытиеВЖурналРегистрации(Событие, Уровень, Комментарий)
	
	ЗаписьЖурналаРегистрации(Событие, Уровень, , , Комментарий);
	
КонецПроцедуры

Функция ИмяСобытияСозданияДокументовДОНаОснованииЭД()
	
	Возврат НСтр("ru = 'ЭДО.Создание документов 1С:ДО на основании ЭД'");
	
КонецФункции

Функция ИмяСобытияСозданияЭДНаОснованииДокументовДО()
	
	Возврат НСтр("ru = 'ЭДО.Создание ЭД на основании документов 1С:ДО'");
	
КонецФункции

Функция ИмяСобытияОтправкиУведомленийЭДО()
	
	Возврат НСтр("ru = 'Рассылка уведомлений о проблемах обмена ЭДО.'");
	
КонецФункции

#КонецОбласти


#Область ПрограммныйИнтерфейс

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания ОтправкаPushУведомлений
Процедура ОтправкаPushУведомлений() Экспорт

	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаPushУведомлений, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьPushУведомления") = Ложь Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОтправкуPushУведомленийМобильнымУстройствам();

КонецПроцедуры

// Обработчик регламентного задания СозданиеСообщенийPushУведомленийОНовыхПисьмах
//
Процедура СозданиеPushУведомленийОНовыхПисьмах() Экспорт

	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СозданиеPushУведомленийОНовыхПисьмах, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьPushУведомления") = Ложь Тогда
		Возврат;
	КонецЕсли;

	СоздатьPushУведомленияОНовыхПисьмах();

КонецПроцедуры

#КонецОбласти

// Процедура - Записать сообщение в регистр PushУведомления
//
// Параметры:
//  Пользовать	 - СправочникСсылка.Пользователи - Ссылка на пользователя для которого формируется сообщение
//  Объект		 - СправочникСсылка - Ссылка на объект уведомления
//  Дата		 - Дата - Планируемая дата отправки уведомления
//  Сообщение	 - Строка - Текст сообщения
//
Процедура ЗаписатьСообщениеВРегистрPushУведомления(Пользователь, Объект, Дата, Сообщение) Экспорт

	Запись = РегистрыСведений.СообщенияPushУведомлений.СоздатьМенеджерЗаписи();

	Запись.Пользователь = Пользователь;
	Запись.ОбъектУведомления = Объект;
	Запись.ДатаОтправки = Дата;
	Запись.Сообщение = Сообщение;

	Запись.Записать(Истина);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создание сообщений push уведомлений о новых письмах
Процедура СоздатьPushУведомленияОНовыхПисьмах()

	// Читаем данные одним запросом.
	УстановитьПривилегированныйРежим(Истина);

	// Выбираем всех пользователей у которых есть узлы мобильных с установленным флагом 
	// идентификатора Push. Выбираем все учетные записи по пользователям.
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиМобильногоПриложения.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ СписокПользователей
		|ИЗ
		|	Справочник.ПользователиМобильногоПриложения КАК ПользователиМобильногоПриложения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ПользователиМобильногоПриложения.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	НЕ ПользователиМобильногоПриложения.ПометкаУдаления
		|	И ПользователиМобильногоПриложения.ИдентификаторУстановлен
		|	И НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
		|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
		|	ЛОЖЬ КАК Уведомлять,
		|	ЕСТЬNULL(ОбработкаНовыхПисемДляОтправкиPushУведомлений.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПроверки
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработкаНовыхПисемДляОтправкиPushУведомлений КАК ОбработкаНовыхПисемДляОтправкиPushУведомлений
		|		ПО УчетныеЗаписиЭлектроннойПочты.Пользователь = ОбработкаНовыхПисемДляОтправкиPushУведомлений.Пользователь
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И НЕ УчетныеЗаписиЭлектроннойПочты.Ссылка.ПометкаУдаления
		|	И УчетныеЗаписиЭлектроннойПочты.Пользователь В
		|			(ВЫБРАТЬ
		|				СписокПользователей.Пользователь
		|			ИЗ
		|				СписокПользователей КАК СписокПользователей)";

	ТаблицаДанных = Запрос.Выполнить().Выгрузить();

	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МинимальнаяДата = ТекущаяДатаСеанса() - 86400;

	// Обходим всех пользователей и проверяем есть ли у них настройка отправки Push уведомлений
	// о письмах. Устанавливаем дату с которой нужно уведомлять о новых письмах для каждой
	// учетной записи.
	Для каждого СтрокаТЧ Из ТаблицаДанных Цикл

		СтрокаТЧ.ДатаПроверки = Макс(МинимальнаяДата, СтрокаТЧ.ДатаПроверки);
		СтрокаТЧ.Уведомлять = 
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"ВстроеннаяПочта/ОтправлятьОповещениеОПриходеПисьмаИспользуяPush",
				Строка(СтрокаТЧ.УчетнаяЗапись), Ложь, ,Строка(СтрокаТЧ.Пользователь));

	КонецЦикла;

	// Проверка входящих писем.
	ЗапросПисьма = Новый Запрос;
	ЗапросПисьма.УстановитьПараметр("Дата", МинимальнаяДата);
	ЗапросПисьма.УстановитьПараметр("Пользователи", ТаблицаДанных.ВыгрузитьКолонку("Пользователь"));
	ЗапросПисьма.УстановитьПараметр("ТаблицаЗаписей", ТаблицаДанных);
	ЗапросПисьма.Текст =
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.Пользователь КАК Пользователь,
		|	ТаблицаЗаписей.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ТаблицаЗаписей.Уведомлять,
		|	ТаблицаЗаписей.ДатаПроверки
		|ПОМЕСТИТЬ ТаблицаЗаписей
		|ИЗ
		|	&ТаблицаЗаписей КАК ТаблицаЗаписей
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пользователь,
		|	УчетнаяЗапись
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Пользователь,
		|	ТаблицаЗаписей.УчетнаяЗапись,
		|	ТаблицаЗаписей.Уведомлять,
		|	ТаблицаЗаписей.ДатаПроверки
		|ИЗ
		|	ТаблицаЗаписей КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Уведомлять
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Пользователь,
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Папка
		|ПОМЕСТИТЬ СинхронизируемыеПапки
		|ИЗ
		|	РегистрСведений.СинхронизацияПапокПисемСМобильнымКлиентом 
		|		КАК СинхронизацияПапокПисемСМобильнымКлиентом
		|ГДЕ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Пользователь В(&Пользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВходящееПисьмо.Ссылка КАК Ссылка,
		|	ВходящееПисьмо.Дата КАК Дата,
		|	ВходящееПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ВходящееПисьмо.Тема КАК Тема,
		|	ВходящееПисьмо.ОтправительАдресат КАК ОтправительАдресат,
		|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) КАК Прочтено,
		|	ВЫБОР
		|		КОГДА ВходящееПисьмо.Важность = ЗНАЧЕНИЕ(Перечисление.ВажностьПисем.Высокая)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Важное,
		|	ТаблицаЗаписей.Пользователь,
		|	ПисьмаВПапках.Папка
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО (СведенияОПрочтении.Объект = ВходящееПисьмо.Ссылка)
		|			И (СведенияОПрочтении.Пользователь В
		|				(ВЫБРАТЬ
		|					ТаблицаЗаписей.Пользователь
		|				ИЗ
		|					ТаблицаЗаписей КАК ТаблицаЗаписей))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗаписей КАК ТаблицаЗаписей
		|		ПО ВходящееПисьмо.УчетнаяЗапись = ТаблицаЗаписей.УчетнаяЗапись
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПисьмаВПапках КАК ПисьмаВПапках
		|		ПО ВходящееПисьмо.Ссылка = ПисьмаВПапках.Письмо
		|ГДЕ
		|	ВходящееПисьмо.Дата > &Дата
		|	И НЕ ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ)
		|	И ВходящееПисьмо.УчетнаяЗапись В
		|			(ВЫБРАТЬ
		|				ТаблицаЗаписей.УчетнаяЗапись
		|			ИЗ
		|				ТаблицаЗаписей КАК ТаблицаЗаписей)
		|	И НЕ ВходящееПисьмо.ПометкаУдаления
		|	И ПисьмаВПапках.Папка В
		|			(ВЫБРАТЬ
		|				СинхронизируемыеПапки.Папка
		|			ИЗ
		|				СинхронизируемыеПапки КАК СинхронизируемыеПапки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";

	Выборка = ЗапросПисьма.Выполнить().Выбрать();
	
	ДатаСеанса = ТекущаяДатаСеанса();

	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура("Пользователь, УчетнаяЗапись", 
			Выборка.Пользователь, Выборка.УчетнаяЗапись);

		Строки = ТаблицаДанных.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Выборка.Дата <= Строки[0].ДатаПроверки Тогда
			Продолжить;
		КонецЕсли;

		Сообщение = СтрШаблон("%1 от %2, %3",
			?(Выборка.Важное, НСтр("ru = 'Важное письмо'"), Нстр("ru = 'Письмо'")),
			Выборка.ОтправительАдресат, Выборка.Тема);

		ЗаписатьСообщениеВРегистрPushУведомления(Выборка.Пользователь, 
			Выборка.Ссылка, ТекущаяДата() + 10, Сообщение);

	КонецЦикла;

	ТаблицаДанных.Свернуть("Пользователь");
	Для каждого СтрокаТЧ Из ТаблицаДанных Цикл

		МенеджерЗаписи = 
			РегистрыСведений.ОбработкаНовыхПисемДляОтправкиPushУведомлений.СоздатьМенеджерЗаписи();

		МенеджерЗаписи.Пользователь = СтрокаТЧ.Пользователь;
		МенеджерЗаписи.Дата = ДатаСеанса;

		МенеджерЗаписи.Записать();

	КонецЦикла;

КонецПроцедуры

// Отправляет Push уведомления мобильным устройства
Процедура ВыполнитьОтправкуPushУведомленийМобильнымУстройствам(Протокол = "");

	// Если параметры не настроены, тогда выходим/
	ИспользоватьPushУведомления = Константы.ВариантИспользованияPushУведомлений.Получить();

	Протокол = Протокол + "Использовать push-уведомления: " + ИспользоватьPushУведомления;

	ИмяСобытия = НСтр("ru = 'Push-уведомления'");

	Если Не ЗначениеЗаполнено(ИспользоватьPushУведомления) Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
			, , НСтр("ru = 'Отправка push-уведомлений невозможна т.к. не задан способ отправки.'"));
		Возврат;
	КонецЕсли;

	Если ИспользоватьPushУведомления = Перечисления.ВариантыPushУведомлений.НеИспользовать Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
			, , НСтр("ru = 'Отправка push-уведомлений невозможна т.к. установленый способ отправки: ''Не ипользовать'' '"));
		Возврат;
	КонецЕсли;

	// Получаем дату последней отправки уведомлений.
	ДатаПоследнейОтправки = Константы.ДатаПоследнейОтправкиPushУведомлений.Получить();
	ТекущаяДата = ТекущаяДатаСеанса();
	ПакетЗапросов =ДанныеДляУдаленияИОтправки(ДатаПоследнейОтправки, ТекущаяДата);

	Протокол = Протокол + "
		|Дата последней отправки: " + ДатаПоследнейОтправки;
	Протокол = Протокол + "
		|Текущая дата: " + ТекущаяДата;

	// Обрабатываем сообщения.
	ДанныеОтправки = ОтправитьСообщенияИспользуяPushУведомления(
		ПакетЗапросов[1], ИспользоватьPushУведомления, Протокол);
		
	ДанныеУдаления = УдалитьНеактуальныеСообщенияPushУведомлений(
		ПакетЗапросов[0], Протокол);

	// Обновляем дату последней отправки.
	Константы.ДатаПоследнейОтправкиPushУведомлений.Установить(ТекущаяДата);

	СообщениеОбОшибкеОтправкеPush(ДанныеОтправки);
	
	ЗаписатьСтатистикуОтправкиPush(ТекущаяДата,
		ДанныеУдаления.Удалено, ДанныеОтправки.Отправлено, ДанныеОтправки.Ошибок, Протокол);

КонецПроцедуры

// Получает данные аутентификации для отправки Push-уведомления
//
// Параметры:
//  Использовать1С   - Булево - Ипользовать для отправки сервис 1С
//  ИспользоватьAPNS - Булево - Ипользовать для отправки сервис Apple
//  ИспользоватьGCM  - Булево - Ипользовать для отправки сервис Google
// 
// Возвращаемое значение:
//  ДанныеАутентификации - Строка или соответствие данных аутентификации
//
Функция ДанныеАутентификацииДляОтправкиPushУведомления(
	Использовать1С, ИспользоватьAPNS, ИспользоватьFCM)

	// по умолчанию никаких данных нет
	ДанныеАутентификации = Неопределено;

	Если Использовать1С = Истина Тогда
		ДанныеАутентификации = СокрЛП(Константы.ЛогинСервисаПередачиУведомлений1С.Получить());
	Иначе

		Если ИспользоватьFCM Тогда
			
			ДанныеАутентификации = Новый Соответствие();
			
			КлючСервераОтправки = СокрЛП(Константы.КлючCервераОтправителяFCM.Получить());
			
			ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.FCM] = КлючСервераОтправки;
			
		КонецЕсли;

		Если ИспользоватьAPNS Тогда

			Если ДанныеАутентификации = Неопределено Тогда
				ДанныеАутентификации = Новый Соответствие();
			КонецЕсли;

			ДанныеСертификата = Константы.СертификатМобильногоПриложенияДляiOS.Получить().Получить();

			Если ТипЗнч(ДанныеСертификата) = Тип("Структура") Тогда

				Сертификат = ДанныеСертификата.Сертификат;

				Если ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
					ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.APNS] = Сертификат;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Возврат ДанныеАутентификации;

КонецФункции

// Получает пакет результатов запроса с данными уведомлений для удаления и отправки
//
// Параметры:
//  ДатаПоследнейОтправки - Дата - ДатаПоследнего сеанса отправки уведомлений
//  ТекущаяДата			  - Дата - Дата начала текущего еанса отправки
// 
// Возвращаемое значение:
//  Массив - Массив содержащший пакет запросов с данными
//
Функция ДанныеДляУдаленияИОтправки(ДатаПоследнейОтправки, ТекущаяДата)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаПоследнейОтправки", ДатаПоследнейОтправки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияPushУведомлений.Пользователь КАК Пользователь,
		|	СообщенияPushУведомлений.ОбъектУведомления КАК ОбъектУведомления,
		|	СообщенияPushУведомлений.ДатаОтправки КАК ДатаОтправки,
		|	СообщенияPushУведомлений.Сообщение КАК Сообщение
		|ИЗ
		|	РегистрСведений.СообщенияPushУведомлений КАК СообщенияPushУведомлений
		|ГДЕ
		|	СообщенияPushУведомлений.ДатаОтправки <= &ДатаПоследнейОтправки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщенияPushУведомлений.Пользователь КАК Пользователь,
		|	СообщенияPushУведомлений.ОбъектУведомления КАК ОбъектУведомления,
		|	СообщенияPushУведомлений.ДатаОтправки КАК ДатаОтправки,
		|	СообщенияPushУведомлений.Сообщение КАК Сообщение,
		|	ПользователиМобильногоПриложения.ИдентификаторКлиента КАК ИдентификаторКлиента,
		|	СведенияОМобильныхКлиентах.Описание КАК ОписаниеПользователяМП
		|ИЗ
		|	Справочник.ПользователиМобильногоПриложения КАК ПользователиМобильногоПриложения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СообщенияPushУведомлений КАК СообщенияPushУведомлений
		|		ПО (СообщенияPushУведомлений.Пользователь = ПользователиМобильногоПриложения.Пользователь)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОМобильныхКлиентах КАК СведенияОМобильныхКлиентах
		|		ПО (СведенияОМобильныхКлиентах.МобильныйКлиент = ПользователиМобильногоПриложения.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ПользователиМобильногоПриложения.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	СообщенияPushУведомлений.ДатаОтправки > &ДатаПоследнейОтправки
		|	И НЕ ПользователиМобильногоПриложения.ПометкаУдаления
		|	И ПользователиМобильногоПриложения.ИдентификаторУстановлен
		|	И СообщенияPushУведомлений.ДатаОтправки <= &ТекущаяДата
		|	И НЕ Пользователи.Недействителен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОтправки
		|ИТОГИ
		|	МАКСИМУМ(ДатаОтправки)
		|ПО
		|	ОбъектУведомления,
		|	Сообщение";

	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Удаляет неактуальные сообщения Push-уведомлений
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - выборка по неактуальным сообщениям
//
Функция УдалитьНеактуальныеСообщенияPushУведомлений(РезультатЗапроса, Протокол)

	ВыборкаУдаляемых = РезультатЗапроса.Выбрать();

	ВозвращаемоеЗначение = Новый Структура("Всего, Удалено", 0,0);
	ВозвращаемоеЗначение.Всего = ВыборкаУдаляемых.Количество();
	
	Протокол = Протокол + "
		|Записей к удалению: " + ВозвращаемоеЗначение.Всего;

	Пока ВыборкаУдаляемых.Следующий() Цикл

		Набор = РегистрыСведений.СообщенияPushУведомлений.СоздатьНаборЗаписей();

		Набор.Отбор.Пользователь.Установить(ВыборкаУдаляемых.Пользователь);
		Набор.Отбор.ОбъектУведомления.Установить(ВыборкаУдаляемых.ОбъектУведомления);

		// Если ошибка - переходим к следующей записи, эту удалим в следующий раз
		Попытка
			Набор.Записать(Истина);
			ВозвращаемоеЗначение.Удалено = ВозвращаемоеЗначение.Удалено + 1;
		Исключение
		КонецПопытки;

	КонецЦикла;

	Протокол = Протокол + "
		|Записей удалено: " + ВозвращаемоеЗначение.Удалено;

	Возврат ВозвращаемоеЗначение

КонецФункции

// Удаляет идентификаторы получателей уведомлений у устройств для которых не возможна доставка
//
// Параметры:
//  Токены - Массив - Массив идентификаторов получаетелей уведомлений
//
Процедура УдалитьИдентификаторыДляНеАктивныхУстройств(Токены)

	Если Токены.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиМобильногоПриложения.ИдентификаторКлиента КАК ИдентификаторКлиента,
		|	ПользователиМобильногоПриложения.Ссылка КАК МобильноеПриложение
		|ИЗ
		|	Справочник.ПользователиМобильногоПриложения КАК ПользователиМобильногоПриложения
		|ГДЕ
		|	ПользователиМобильногоПриложения.ИдентификаторУстановлен = ИСТИНА
		|	И НЕ ПользователиМобильногоПриложения.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ИдентификаторКлиента = Выборка.ИдентификаторКлиента.Получить();
		
		МобильноеПриложение = Выборка.МобильноеПриложение;
		
		Если Не ИдентификаторКлиента = Неопределено
			И Токены.Найти(ИдентификаторКлиента.ИдентификаторУстройства) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;

		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ПользователиМобильногоПриложения");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			МобильноеПриложениеОбъект = МобильноеПриложение.ПолучитьОбъект();
			МобильноеПриложениеОбъект.ИдентификаторКлиента = Неопределено;
			МобильноеПриложениеОбъект.ИдентификаторУстановлен = Ложь;
			МобильноеПриложениеОбъект.Записать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// Отправляет сообщения через сервис Push-уведомлений
//
// Параметры:
//  Сообщения                   - РезультатЗапроса - выборка по сообщениям для отправки
//  Узлы                        - РезультатЗапроса - выборка по всем активным узлам обмена
//  ИспользоватьPushУведомления - ПеречислениеСсылка.ВариантыPushУведомлений - Вид используемого сервиса отправки
//
Функция ОтправитьСообщенияИспользуяPushУведомления(Сообщения, ИспользоватьPushУведомления, Протокол)

	ВозвращаемоеЗначение = 
		Новый Структура("Всего, Отправлено, Ошибок, ОписанияОшибок", 0, 0, 0, Новый Массив);

	//Получаем параметры отправки 
	ИспользоватьAPNS = Константы.ИспользоватьAPNS.Получить();
	ИспользоватьFCM = Константы.ИспользоватьFCM.Получить();
	Использовать1С = ИспользоватьPushУведомления =
		Перечисления.ВариантыPushУведомлений.ИспользоватьВспомогательныйСервис1С;

	ДанныеАутентификации = ДанныеАутентификацииДляОтправкиPushУведомления(Использовать1С,
		ИспользоватьAPNS, ИспользоватьFCM);
		
	// Если данные аутентификации не указаны - выходим
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	// Кэшируем сертификат Apple для получения не работающих идентификаторов
	Сертификат = Неопределено;
	Если ТипЗнч(ДанныеАутентификации) = Тип("Соответствие") И ИспользоватьAPNS Тогда
		Сертификат = ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.APNS];
	КонецЕсли;

	// Получаем заголовок Push-уведомления
	Заголовок = Константы.ЗаголовокСистемы.Получить();
	Если Не ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = НСтр("ru = '1С:Документооборот'");
	КонецЕсли;

	// Перебираем все доступные сообщения
	ВыборкаОбъектов = Сообщения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		ОбъектУведомления = ВыборкаОбъектов.ОбъектУведомления;
		
		Протокол = Протокол +"
			|Объект уведомления: " + ВыборкаОбъектов.ОбъектУведомления;
		
		// проверяем - можем ли мы отправить объект на мобильный
		ТипСсылки = ТипЗнч(ОбъектУведомления);
		Если МП_СлужебныйПовтИсп.ТипыДанныхPUSH().Найти(ТипСсылки) = Неопределено Тогда
			
			Протокол = Протокол + "
				|не поддерживается мобильным приложением";
			Продолжить;
		КонецЕсли;
		
		ПустаяСтруктураОбъектаУведомления = МП_СлужебныйПовтИсп.ПустаяСтруктураОбъектаУведомления();
		
		СтруктураОбъектаУведомления = Новый Структура;
		
		Для Каждого КлючИЗначение Из ПустаяСтруктураОбъектаУведомления Цикл
			СтруктураОбъектаУведомления.Вставить(КлючИЗначение.Ключ);
		КонецЦикла;
		
		СвойстваУведомления = Новый Массив;
		СвойстваУведомления.Добавить(МП_СлужебныйПовтИсп.ТипПоСсылке(ОбъектУведомления));
		СвойстваУведомления.Добавить(XMLСтрока(ОбъектУведомления));
		СвойстваУведомления.Добавить(XMLСтрока(ТекущаяДатаСеанса()));
		
		ДанныеJS = Новый ЗаписьJSON;
		ДанныеJS.УстановитьСтроку();
		ЗаписатьJSON(ДанныеJS, СвойстваУведомления);
		СериализованныеДанные = ДанныеJS.Закрыть();
		
		Протокол = Протокол + "
			|Данные уведомления: " + СериализованныеДанные;

		ВыборкаСообщений = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ИдентификаторыПолучателейFCM = Новый Массив;
		Пока ВыборкаСообщений.Следующий() Цикл
			
			Уведомление = Новый ДоставляемоеУведомление();
			Уведомление.Заголовок = Заголовок;
			Уведомление.Текст = СтрШаблон(НСтр("ru = '%1'"), ВыборкаСообщений.Сообщение);
			Уведомление.Данные = СериализованныеДанные;
			
			ВыборкаДетальныеЗаписи = ВыборкаСообщений.Выбрать();
			
			ПолучателиУведомлений = Новый Массив;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Протокол = Протокол + "
					|Пользователь: " + ВыборкаДетальныеЗаписи.Пользователь + "
					|Описание приложения:" + ВыборкаДетальныеЗаписи.ОписаниеПользователяМП;
				
				// флаг отправки может быть поднят, но идентификатор не установлен
				Идентификатор = ВыборкаДетальныеЗаписи.ИдентификаторКлиента.Получить();
				
				Если Идентификатор = Неопределено Тогда
					Протокол = Протокол + "
					|Идентификатор установлен: Нет";
					Продолжить;
				КонецЕсли;
				
				ДобавитьИдентификатор = Ложь;
				
				Если Использовать1С Или
					(ИспользоватьAPNS И Идентификатор.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.APNS) Тогда
					
					ДобавитьИдентификатор = Истина;
					
				КонецЕсли;
				
				Если ИспользоватьFCM И Идентификатор.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.FCM Тогда
					
					ДобавитьИдентификатор = Истина;
					
					ИдентификаторыПолучателейFCM.Добавить(Идентификатор);
					
				КонецЕсли;
				
				Если ДобавитьИдентификатор Тогда
					
					Уведомление.Получатели.Добавить(Идентификатор);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Уведомление.Получатели.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
		ВозвращаемоеЗначение.Всего = ВозвращаемоеЗначение.Всего + Уведомление.Получатели.Количество();
		
		Попытка
			УдаленныеТокены = Новый Массив;

			ИнформацияОПроблемахОтправки = Новый Массив;
			
			ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ДанныеАутентификации,
				УдаленныеТокены, Использовать1С, ИнформацияОПроблемахОтправки);
			
			ВозвращаемоеЗначение.Отправлено = ВозвращаемоеЗначение.Отправлено + Уведомление.Получатели.Количество();
			
			// обход ошибки отправки для Android:
			Если ИдентификаторыПолучателейFCM.Количество() > 0 И ИнформацияОПроблемахОтправки.Количество() > 0 Тогда
				
				ОтправитьПоАдресно = Ложь;
				
				Для Каждого ЭлементИнформацииОПроблеме Из ИнформацияОПроблемахОтправки Цикл
					
					Если СтрНайти(ЭлементИнформацииОПроблеме.Описание, "Уведомление превысило максимальные размеры") > 0 Тогда
						ОтправитьПоАдресно = Истина;
						
						//Обнуляем информацию о проблемах отправки
						ИнформацияОПроблемахОтправки = Новый Массив;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ОтправитьПоАдресно Тогда
					
					Для Каждого ИдентификаторПолучателяFCM Из ИдентификаторыПолучателейFCM Цикл
						
						УведомлениеПоАдресно = Новый ДоставляемоеУведомление;
						
						ЗаполнитьЗначенияСвойств(УведомлениеПоАдресно, Уведомление);
						
						УведомлениеПоАдресно.Получатели.Очистить();
						
						//Только 1 получатель
						УведомлениеПоАдресно.Получатели.Добавить(ИдентификаторПолучателяFCM);
						
						ОтправкаДоставляемыхУведомлений.Отправить(УведомлениеПоАдресно, ДанныеАутентификации,
							УдаленныеТокены, Использовать1С, ИнформацияОПроблемахОтправки);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИнформацияОПроблемахОтправки.Количество() > 0 Тогда
				
				ИнформацияОПроблемахСтрокой = "";
				
				Для Каждого ЭлементИнформацииОПроблеме Из ИнформацияОПроблемахОтправки Цикл
					ИнформацияОПроблемахСтрокой = ИнформацияОПроблемахСтрокой + ЭлементИнформацииОПроблеме.Описание +
						";" + Символы.ПС;
					ВозвращаемоеЗначение.Ошибок = ВозвращаемоеЗначение.Ошибок + 1;
				КонецЦикла;
				
				ВозвращаемоеЗначение.ОписанияОшибок.Добавить(ИнформацияОПроблемахСтрокой);
				
				Протокол = СтрШаблон("%1%2%3", Протокол, Символы.ПС, ИнформацияОПроблемахСтрокой);
				
				Протокол = Протокол + "
					|Сообщение отправлено: Нет";
				
			Иначе
				
				Протокол = Протокол + "
					|Сообщение отправлено: Да";

			КонецЕсли;
				
			УдалитьИдентификаторыДляНеАктивныхУстройств(УдаленныеТокены);

		Исключение
			
			ВозвращаемоеЗначение.Ошибок = ВозвращаемоеЗначение.Ошибок + Уведомление.Получатели.Количество();
			
			Инфо = Строка(ОписаниеОшибки());
			
			Если ВозвращаемоеЗначение.ОписанияОшибок.Найти(Инфо) = Неопределено Тогда
				ВозвращаемоеЗначение.ОписанияОшибок.Добавить(Инфо);
			КонецЕсли;
			
			Протокол = Протокол + "
				|Сообщение отправлено: Нет" + "
				|" + Инфо;
				
		КонецПопытки;
		
		Протокол = Протокол + "
			|Всего получателей: " + Уведомление.Получатели.Количество();
		
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;

КонецФункции

Процедура СообщениеОбОшибкеОтправкеPush(ДанныеОтправки)
	
	Если ДанныеОтправки.Ошибок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПользователей = РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
			Перечисления.РазделыУведомленийОПроблемах.ОбменСМобильными);
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиОписания = Новый Массив();
	СтрокиОписания.Добавить(
		СтрШаблон(
			НСтр("ru ='При отправке push-уведомлений произошли ошибки (%1)'"),
			ДанныеОтправки.Количество()));
	
	СтрокиОписания.Добавить(Символы.ПС);
	СтрокиОписания.Добавить(Символы.ПС);
	
	Для каждого Ошибка Из ДанныеОтправки.ОписанияОшибок Цикл
		
		СтрокиОписания.Добавить(Символы.ПС);
		СтрокиОписания.Добавить(Ошибка);
		
	КонецЦикла;
	
	Описание = СтрСоединить(СтрокиОписания, "");
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
			Описание,
			Пользователь);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьСтатистикуОтправкиPush(Дата, Удалено, Отправлено, Ошибок, Протокол);

	Если Удалено = 0
		И Отправлено = 0
		И Ошибок = 0 Тогда
		Возврат;
	КонецЕсли;

	Запись = РегистрыСведений.СтатистикаОтправкаPushУведомлений.СоздатьМенеджерЗаписи();
	
	Запись.Период = Дата;
	Запись.Окончание = ТекущаяДата();
	Запись.Удалено = Удалено;
	Запись.Отправлено = Отправлено;
	Запись.Ошибок = Ошибок;
	Запись.ПротоколОтправки = Протокол;
	Запись.Записать(Истина);

КонецПроцедуры

#КонецОбласти

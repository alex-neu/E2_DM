
#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьОтклонениеАннулированиеДокументаДО(ДокументДО, ПараметрыЭД, ОтклонитьАннулирование = Ложь, ДоступнаКорректировкаЭД = Ложь) Экспорт
	
	МассивФайловЭД = ОбменСКонтрагентамиДОВызовСервера.ВернутьМассивФайловЭДПоДокументДО(ДокументДО);
	Если МассивФайловЭД.Количество() > 0 Тогда
		СсылкаНаЭД = МассивФайловЭД[0].ФайлЭД;
		ПараметрыЭД.Вставить("МасивФайловЭД", МассивФайловЭД);
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если ПараметрыЭД.Отклонить Тогда
		ФормироватьЭД = Ложь;
		ПродолжитьОбработку = ОбменСКонтрагентамиДОВызовСервера.МожноОтклонитьЭтотЭД(СсылкаНаЭД, ФормироватьЭД);
		Если ОтклонитьАннулирование Тогда
			Заголовок = НСтр("ru = 'Укажите причины отклонения предложения об аннулировании'");
		Иначе
			Если ОбменСКонтрагентамиДОВызовСервера.ЭтоСчетФактура(СсылкаНаЭД)
				ИЛИ Не ДоступнаКорректировкаЭД Тогда
				Заголовок = НСтр("ru = 'Укажите текст запроса на уточнение'");
			Иначе
				Заголовок = НСтр("ru = 'Укажите причины отклонения документа'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ФормироватьЭД = Истина;
		ПродолжитьОбработку = ОбменСКонтрагентамиДОВызовСервера.МожноАннулироватьЭтотЭД(СсылкаНаЭД);
		Заголовок = НСтр("ru = 'Укажите причины аннулирования документа'");
	КонецЕсли;
	
	Если ПродолжитьОбработку Тогда
		ТекстУточнения = "";
		ПараметрыЭД.Вставить("ФормироватьЭД", ФормироватьЭД);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтклонениеАннулированиеЭДЗавершить", ЭтотОбъект, ПараметрыЭД);
		ПоказатьВводСтроки(ОписаниеОповещения, ТекстУточнения, Заголовок, , Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УтвердитьЭД(ДокументДО, ОбработчикЗавершения) Экспорт
	
	МассивФайловЭД = ОбменСКонтрагентамиДОВызовСервера.ВернутьМассивФайловЭДПоДокументДО(ДокументДО);
	
	Если МассивФайловЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для Каждого СтруктураМассиваФайловЭД Из МассивФайловЭД Цикл
	
		МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(СтруктураМассиваФайловЭД.ЭД);
		Если МассивСсылок = Неопределено Тогда
			Если СтруктураМассиваФайловЭД.ФайлЭД = Неопределено Тогда
				Возврат;
			Иначе
				МассивСсылок = Новый Массив;
			КонецЕсли;
		КонецЕсли;
	
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "Утвердить", ,
			СтруктураМассиваФайловЭД.ФайлЭД, ОбработчикЗавершения);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПодготовитьДокументККорректировке(Форма) Экспорт
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ПодготовитьДокументККорректировкеПродолжение", ЭтотОбъект, Новый Структура("Форма", Форма));
		
	Если Форма.Объект.ПодписанЭП Или Форма.Файлы.НайтиСтроки(Новый Структура("ПодписанЭП", Истина)).Количество() > 0 Тогда
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Чтобы вернуть документ в режим редактирования, необходимо удалить электронные подписи документа и файлов.
						|Удалить электронные подписи?'"), 
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗапроситьСогласиеСформироватьДокументЭДО(Объект, Отказ, Форма) Экспорт
	
	Если Форма.ЕстьЭДО Тогда
		
		СостояниеВерсииДокументаПоЭДО = ОбменСКонтрагентамиДОВызовСервера.ДанныеСостоянияДокументаПоЭДО(Объект.Ссылка);
		Если Не ЗначениеЗаполнено(СостояниеВерсииДокументаПоЭДО) Тогда
			
			КонтрагентыГотовыеКЭДО = Неопределено;
			Если ОбменСКонтрагентамиДОВызовСервера.ДокументГотовКФормированиюЭД(Объект.Ссылка, Ложь, КонтрагентыГотовыеКЭДО) Тогда
				
				ПараметрыОбработчика = Новый Структура();
				ПараметрыОбработчика.Вставить("ЭтаФорма", Форма);
				ПараметрыОбработчика.Вставить("Объект", Объект);
				ПараметрыОбработчика.Вставить("КонтрагентыГотовыеКЭДО", КонтрагентыГотовыеКЭДО);
				
				Оповещение = Новый ОписаниеОповещения("ВопросОтправкиПоЭДОЗавершение", ЭтотОбъект, ПараметрыОбработчика);
				Отказ = Истина;
				ТекстВопроса = НСтр("ru = 'Документ готов к отправке по ЭДО. 
					|Поставить в очередь на отправку по ЭДО сейчас?'");
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПоставитьДокументВОчередьНаОтправкуПоЭДО(
			Документ, 
			КонтрагентыГотовыеКЭДО = Неопределено, 
			НаправлениеЭД, 
			ПроверятьПодписанДокумент = Истина, 
			УстановитьСостояниеПодписан = Ложь, 
			ВыводитьСообщение = Истина) Экспорт
	
	Если ОбменСКонтрагентамиДОВызовСервера.ПоставитьДокументВОчередьНаОтправкуПоЭДО(
			Документ, 
			КонтрагентыГотовыеКЭДО, 
			НаправлениеЭД, 
			ПроверятьПодписанДокумент, 
			УстановитьСостояниеПодписан, 
			ВыводитьСообщение) = Истина Тогда

		Текст = НСтр("ru = 'Документ поставлен в очередь на отправку контрагентам по ЭДО.'");
		Состояние(Текст, , , БиблиотекаКартинок.ЭмблемаСервиса1СЭДО);
		
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

// Ставит документы в очередь на отправку документов ЭДО и оповещает о изменении статуса ЭДО документов ДО
// 
// Параметры:
//  МассивДокументов - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО,
//                     которые необходимо поставить в очередь на отправку
// 
// Возвращаемое значение:
//  Булево - Результат выполнения операции, истина, если операция завершилась успешно, Ложь - в противтом случае.
// 
Функция ПоставитьДокументыВОчередьНаОтправкуПоЭДО(МассивДокументов) Экспорт
	
	РезультатПостановкиВОчередь =
		ОбменСКонтрагентамиДОВызовСервера.ПоставитьДокументыВОчередьНаОтправкуПоЭДО(МассивДокументов);
	
	Если РезультатПостановкиВОчередь.ПоставленныеВОчередь.Количество() > 0 Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Документы",
			РезультатПостановкиВОчередь.ПоставленныеВОчередь);
		
		Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
	КонецЕсли;
	
	Возврат РезультатПостановкиВОчередь.Успех;
	
КонецФункции

Процедура ПодписатьЭДНаСторонеПолучателя(ДокументДО, ОбработчикЗавершения) Экспорт
	
	МассивФайловЭД = ОбменСКонтрагентамиДОВызовСервера.ВернутьМассивФайловЭДПоДокументДО(ДокументДО);
	
	Если МассивФайловЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для Каждого СтруктураМассиваФайловЭД Из МассивФайловЭД Цикл
		
		МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(СтруктураМассиваФайловЭД.ЭД);
		Если МассивСсылок = Неопределено Тогда
			Если СтруктураМассиваФайловЭД.ФайлЭД = Неопределено Тогда
				Возврат;
			Иначе
				МассивСсылок = Новый Массив;
			КонецЕсли;
		КонецЕсли;
	
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(
			МассивСсылок, 
			"УтвердитьПодписатьОтправить", 
			, 
			СтруктураМассиваФайловЭД.ФайлЭД, 
			ОбработчикЗавершения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьОбъекты1СДокументооборотИЭДО() Экспорт
	
	ТекстСостояния =
		НСтр("ru = 'Формирование документов ЭДО на основании созданных внутренних документов 1С:Документооборот.'");
	Состояние( , , ТекстСостояния);
	
	РезультатФормированияЭД = ОбменСКонтрагентамиДОВызовСервера.СформироватьЭДПоГотовымДокументамДО();
	
	ТекстРезультатаФормированияЭД =
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ОписаниеРезультатаСозданияЭДПоДокументамДО(
			РезультатФормированияЭД.КоличествоКОбработке,
			РезультатФормированияЭД.КоличествоСозданных,
			РезультатФормированияЭД.КоличествоПодготовленных,
			РезультатФормированияЭД.КоличествоОтправленных,
			РезультатФормированияЭД.НемедленнаяОтправка);
	
	ТекстСостояния =
		НСтр("ru = 'Формирование документов 1С:Документооборот на основании входящих электронных документов.'");
	Состояние( , , ТекстСостояния);
	
	ПараметрыСозданияДОПоДаннымЭД = Новый Структура;
	ПараметрыСозданияДОПоДаннымЭД.Вставить("ВыдаватьСообщенияПоОшибкам", Истина);
	
	РезультатСозданияДокДО =
		ОбменСКонтрагентамиДОВызовСервера.СформироватьДокументыДОНаОснованииВходящихЭД(ПараметрыСозданияДОПоДаннымЭД);
	
	ТекстРезультатаСозданияДокДО =
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ОписаниеРезультатаСозданияДокументовДОПоВходящимЭД(
			РезультатСозданияДокДО.КоличествоКСозданию,
			РезультатСозданияДокДО.КоличествоСоздано,
			РезультатСозданияДокДО.КоличествоСозданоСОшибками);
	
	ТекстСостояния = 
		ТекстРезультатаФормированияЭД +
		Символы.ПС + Символы.ПС +
		ТекстРезультатаСозданияДокДО;
	ПоказатьОповещениеПользователя(НСтр("ru = 'Завершено формирование документов ЭДО и 1С:Документооборот'"), , ТекстСостояния);
	
	Для Каждого Ошибка Из РезультатСозданияДокДО.Ошибки Цикл
		ТекстСообщения =
			СтрШаблон(НСтр("ru = 'При создании документа 1С:Документооборот по входящему ЭД %1 возникли проблемы:'"),
				Ошибка.ПредметОшибки)
				+ Символы.ПС
				+ Ошибка.Описание;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПризнакиПодписанияЭД(Документ, МассивСертификатов, ПараметрыПодписи) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Документ) Тогда
		АдресХраненияСертификата = 
			ПоместитьВоВременноеХранилище(МассивСертификатов, Новый УникальныйИдентификатор);
			
		Если ОбменСКонтрагентамиДОВызовСервера.ДоступноВыполнениеДействийПоЭДО(Документ, АдресХраненияСертификата) Тогда
			ПараметрыПодписи.Вставить("ПараметрыВыполнения", Новый Структура("ПодписатьЭД, НаправлениеЭД", 
					Истина, ОбменСКонтрагентамиДОВызовСервера.ПолучитьНаправлениеЭД(Документ)));
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресХраненияСертификата);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру принудительного закрытия обмена ЭДО документов ДО
// 
// Параметры:
//  ДокументыДО - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО,
//                     которые необходимо закрыть принудительно
//  ОбработчикЗавершения - ОписаниеОповещения - Описание обработчика завершения операции
// 
Процедура ЗакрытьДокументыПринудительно(ДокументыДО, ОбработчикЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Документы", ДокументыДО);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Обработчик = Новый ОписаниеОповещения(
		"ЗакрытьДокументыПринудительноПослеВводаПричины",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ТекстПричины = "";
	ПоказатьВводСтроки(
		Обработчик,
		ТекстПричины,
		НСтр("ru = 'Укажите причину закрытия документов'"), ,
		Истина);
	
КонецПроцедуры

// Ставит документы в очередь приема документов ЭДО и опопвещает о изменении статусов ЭД
// 
// Параметры:
//  ЭД - Массив из ДокументСсылка.ЭлектронныйДокументВходящий - Массив ЭД, которые необходимо
//                                                              поставить в очередь приема
// 
// Возвращаемое значение:
//  Булево - Результат выполнения операции, истина, если операция завершилась успешно, ложь - в противном случае
// 
Функция ПоставитьЭДВОчередьПриема(ЭД) Экспорт
	
	Результат = ОбменСКонтрагентамиДОВызовСервера.ПоставитьЭДВОчередьПриема(ЭД);
	
	Если Результат.ИзмененныеЭД.Количество() > 0
		ИЛИ Результат.ИзмененныеФайлыЭД.Количество() > 0 Тогда
		
		ПараметрыОповещения = Новый Структура;
		
		Если Результат.ИзмененныеЭД.Количество() > 0 Тогда
			ПараметрыОповещения.Вставить("ДокументыВладельцы", Результат.ИзмененныеЭД);
		КонецЕсли;
		
		Если Результат.ИзмененныеФайлыЭД.Количество() > 0 Тогда
			ПараметрыОповещения.Вставить("ЭлектронныеДокументы", Результат.ИзмененныеФайлыЭД);
		КонецЕсли;
		
		Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	КонецЕсли;
	
	Если Результат.ПоставленныеВОчередь.Количество() > 0 Тогда
		ТекстОповещения =
			СтрШаблон(НСтр("ru = 'В очередь приема сообщений ЭДО %1.'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';поставлен %1 документ;;поставлены %1 документа;поставлено %1 документов;поставлено %1 документов'"),
					Результат.ПоставленныеВОчередь.Количество()));
	Иначе
		ТекстОповещения =
			НСтр("ru = 'В очередь не поставлено ни одного документа'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Изменение очереди приема ЭДО'"), ,
		ТекстОповещения, ,
		?(Результат.ПоставленныеВОчередь.Количество() > 0,
			СтатусОповещенияПользователя.Информация,
			СтатусОповещенияПользователя.Важное));
	
	Для Каждого ОписаниеОшибки Из Результат.Ошибки Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	КонецЦикла;
	
	Возврат (Результат.Ошибки.Количество() = 0);
	
КонецФункции

// Вызывает процедуру принудительного закрытия ЭД
// 
// Параметры:
//  ЭД - Массив из ДокументСсылка.ЭлектронныйДокументВходящий - Массив ЭД, которые необходимо
//                                                              закрыть принудительно
//  ОбработчикЗавершения - ОписаниеОповещения - Описание обработчика завершения операции
// 
Процедура ЗакрытьПринудительноЭД(ЭД, ОбработчикЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭД", ЭД);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Обработчик = Новый ОписаниеОповещения(
		"ЗакрытьПринудительноЭДПослеВводаПричины",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ТекстПричины = "";
	ПоказатьВводСтроки(
		Обработчик,
		ТекстПричины,
		НСтр("ru = 'Укажите причину закрытия документов'"), ,
		Истина);
	
КонецПроцедуры

// Обрабатывает входящее аннулирование ЭДО документа
// 
// Параметры:
//  ДокументДО - СправочникСсылка.ВнутренниеДокументы - Документ ДО, по которому необходимо
//                                обработать входящее аннулирование.
//                                Может быть как первичным документом, так и документом аннулирования.
//  ЭтоАннулированиеДокумента - Булево - Указывает, является ли документ ДО соглашением об аннулировании.
//  ОтклонитьАннулирование - Булево - Необходимо отклонить или принять аннулирование.
//  ОбработчикЗавершения - ОписаниеОповещения - Обработчик, который необходимо выполнить после окончания операции.
// 
Процедура ОбработатьВходящееАннулированиеЭДО(ДокументДО,
	ЭтоАннулированиеДокумента, ОтклонитьАннулирование, ОбработчикЗавершения = Неопределено) Экспорт
	
	Если Не ЭтоАннулированиеДокумента Тогда
		
		МассивФайловЭД = ОбменСКонтрагентамиДОВызовСервера.ВернутьМассивФайловЭДПоДокументДО(ДокументДО);
		Если МассивФайловЭД.Количество() > 0 Тогда
			ФайлПервичногоЭД = МассивФайловЭД[0].ФайлЭД;
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		
		АннулируемыйДокумент = ОбменСКонтрагентамиДОВызовСервера.АннулируемыйДокумент(ДокументДО);
		
		Если Не ЗначениеЗаполнено(АннулируемыйДокумент) Тогда
			Возврат;
		КонецЕсли;
		
		МассивФайловЭД = ОбменСКонтрагентамиДОВызовСервера.ВернутьМассивФайловЭДПоДокументДО(
			АннулируемыйДокумент);
		Если МассивФайловЭД.Количество() > 0 Тогда
			ФайлПервичногоЭД = МассивФайловЭД[0].ФайлЭД;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВходящееАннулированиеЭДОЗавершить",
		ЭтотОбъект);
	
	СтруктураЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьСсылкиНаЭДДляПОА(ФайлПервичногоЭД);
	Если ЗначениеЗаполнено(СтруктураЭД) Тогда
		Если ОтклонитьАннулирование Тогда
			ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(
				СтруктураЭД.ПОА,
				Истина,
				ОтклонитьАннулирование,
				Оповещение);
		Иначе
			
			МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(
				СтруктураЭД.ВладелецФайла);
			Если МассивСсылок = Неопределено Тогда
				Если СтруктураЭД.ПОА = Неопределено Тогда
					Возврат;
				Иначе
					МассивСсылок = Новый Массив;
				КонецЕсли;
			КонецЕсли;
			
			ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(
				МассивСсылок,
				"УтвердитьПодписатьОтправить", ,
				СтруктураЭД.ПОА,
				Оповещение);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьВходящееАннулированиеЭДО.
Процедура ОбработатьВходящееАннулированиеЭДОЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Оповестить("ОбновитьСостояниеЭД", ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДокументГотовКФормированиюЭД(
		Документ, 
		ВыводитьСообщение = Ложь, 
		КонтрагентыГотовыеКЭДО = Неопределено, 
		ПроверятьПодписанДокумент = Истина) Экспорт
	
	Возврат ОбменСКонтрагентамиДОВызовСервера.ДокументГотовКФормированиюЭД(
		Документ, 
		ВыводитьСообщение, 
		КонтрагентыГотовыеКЭДО, 
		ПроверятьПодписанДокумент);

КонецФункции

Процедура ОбработатьОтклонениеАннулированиеЭДЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Текст = НСтр("ru = '%1, %2:
			|%3'");
		ТекстУточнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст,
			ДополнительныеПараметры.Организация, ПользователиКлиентСервер.ТекущийПользователь(), Результат);
		
		Если ДополнительныеПараметры.Отклонить Тогда
			ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.УведомлениеОбУточнении");
		Иначе
			ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПредложениеОбАннулировании");
		КонецЕсли;
		// При аннулировании параметр ФормироватьЭД всегда имеет значение Истина,
		// при отклонении может иметь значение как Истина, так и Ложь.
		ОписаниеОповещения = Неопределено;
		ДополнительныеПараметры.Свойство("ОписаниеОповещения", ОписаниеОповещения);
		ФормироватьЭД = Ложь;
		Для Каждого СтруктураМассиваФайловЭД Из ДополнительныеПараметры.МасивФайловЭД Цикл
			
			Если НЕ (ДополнительныеПараметры.Свойство("ФормироватьЭД", ФормироватьЭД) И ФормироватьЭД = Истина) Тогда
				НовыйСтатусЭД = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Отклонен");
				СтруктураПараметров = Новый Структура("СтатусЭД, ПричинаОтклонения", НовыйСтатусЭД, Результат);
				ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныеФайлы(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураМассиваФайловЭД.ФайлЭД), СтруктураПараметров, Ложь);
			Иначе
				ОбменСКонтрагентамиСлужебныйКлиент.СформироватьПодписатьСлужебныйЭД(СтруктураМассиваФайловЭД.ФайлЭД,
					ВидСлужебногоЭД, ТекстУточнения, , ОписаниеОповещения);
			КонецЕсли;
		
		КонецЦикла;
		
	ИначеЕсли Результат <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Причина не указана, действие отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДокументККорректировкеПродолжение(Результат, Параметры) Экспорт
		
	Форма = Параметры.Форма;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПодготовитьДокументККорректировкеЗавершение", 
			ЭтотОбъект, 
			Новый Структура("Форма, УдалитьЭП", Форма, Результат = КодВозвратаДиалога.Да));
	
	Если Не ЗначениеЗаполнено(Форма.Параметры.Ключ) Или Форма.Модифицированность Тогда  
		ТекстВопроса = Форма.ТекстВопросаНезаписанныхДанных(НСтр("ru = 'Подготовка документа к корректировке'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодготовитьДокументККорректировкеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	ОбменСКонтрагентамиДОВызовСервера.ПодготовитьДокументККорректировке(
		Форма.Объект.Ссылка, 
		Форма.Объект.Стороны[1].Сторона,
		ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий"),
		Параметры.УдалитьЭП,
		Форма.УникальныйИдентификатор);
			
	Форма.Прочитать();	
	Форма.ДокументПодписанНами = Ложь;
	
	Оповестить("ОбновитьДанныеФормыПослеПодготовкиДокументаККорректировке", Форма.Объект.Ссылка);
	
КонецПроцедуры	

Процедура ВопросОтправкиПоЭДОЗавершение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПоставитьДокументВОчередьНаОтправкуПоЭДО(
			ПараметрыОбработчика.Объект.Ссылка, 
			ПараметрыОбработчика.КонтрагентыГотовыеКЭДО, 
			ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий"));
			
		ПараметрыОбработчика.ЭтаФорма.ПоказанВопросОбОтправкеПоЭДО = Истина;
		ПараметрыОбработчика.ЭтаФорма.Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		ПараметрыОбработчика.ЭтаФорма.ПоказанВопросОбОтправкеПоЭДО = Истина;
		ОбменСКонтрагентамиДОВызовСервера.УдалитьСостояниеДокументаЭДО(ПараметрыОбработчика.Объект.Ссылка);
		ПараметрыОбработчика.ЭтаФорма.Закрыть();
		
	КонецЕсли;
		
КонецПроцедуры

// Продолжение процедуры ЗакрытьДокументыПринудительно()
// 
Процедура ЗакрытьДокументыПринудительноПослеВводаПричины(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для принудительного закрытия документов необходимо указать причину.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	РезультатЗакрытия = ОбменСКонтрагентамиДОВызовСервера.ЗакрытьДокументыПринудительно(
		ДополнительныеПараметры.Документы,
		Результат);
	
	Если РезультатЗакрытия.ЗакрытыеДокументы.Количество() > 0 Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Документы",
			РезультатЗакрытия.ЗакрытыеДокументы);
		
		Оповестить("ОбновленоСостояниеЭДДО", ПараметрыОповещения);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЗакрытьПринудительноЭД()
// 
Процедура ЗакрытьПринудительноЭДПослеВводаПричины(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для принудительного закрытия документов необходимо указать причину.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	КоличествоОбработанныхЭД = 0;
	
	ОбменСКонтрагентамиСлужебныйВызовСервера.ЗакрытьДокументыПринудительно(
		ДополнительныеПараметры.ЭД,
		Результат,
		КоличествоОбработанныхЭД);
	
	
	Если КоличествоОбработанныхЭД > 0 Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ДокументыВладельцы", ДополнительныеПараметры.ЭД);
		Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
		
	КонецЕсли;
	
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("Ошибки", Новый Массив);
	
	Если КоличествоОбработанныхЭД < ДополнительныеПараметры.ЭД.Количество() Тогда
		РезультатЗакрытия.Ошибки.Добавить(
				СтрШаблон(НСтр("ru = 'Удалось принудительно закрыть только %1 из %2.'"),
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документов'"),
						КоличествоОбработанныхЭД),
					ДополнительныеПараметры.ЭД.Количество()));
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Распознавание
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область CuneiForm

// Функция нижнего уровня - вызывается для версии файла
Функция РаспознатьСПомощьюCuneiForm(ТекущаяВерсия, РасширениеФайлаРезультата, ОписаниеОшибки, РаспознанныйТекст, ПутьКФайлу) Экспорт
	
	ТипПлатформыСервера = ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера();
	Если ТипПлатформыСервера <> ТипПлатформы.Windows_x86 И ТипПлатформыСервера <> ТипПлатформы.Windows_x86_64 Тогда
		ВызватьИсключение НСтр("ru = 'Распознавание с помощью CuneiForm возможно только на платформах MS Windows.'");
	КонецЕсли;	
	
	РеквизитыВерсии = "СтатусРаспознаванияТекста,
		|ТипХраненияФайла,
		|Расширение,
		|Том,
		|ПутьКФайлу,
		|Владелец.ЯзыкРаспознавания";
	
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяВерсия, РеквизитыВерсии);
	
	ЯзыкРаспознавания = РеквизитыВерсии.ВладелецЯзыкРаспознавания;
	
	Если Не СтатусРаспознаванияКорректенДляНачалаРаспознавания(
		РеквизитыВерсии.СтатусРаспознаванияТекста) Тогда
		
		Возврат "Ошибка"; // не нужно распознавать - не должны были нас тут вызвать
	КонецЕсли;
	
	ИмяФайлаСПутем = ВременныйФайлДляРаспознавания(
		ТекущаяВерсия,
		РеквизитыВерсии.ТипХраненияФайла,
		РеквизитыВерсии.Расширение,
		РеквизитыВерсии.Том,
		РеквизитыВерсии.ПутьКФайлу);
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла(РасширениеФайлаРезультата);
	ФорматРезультата = 2; // txt
	Если РасширениеФайлаРезультата = "html" Тогда
		ФорматРезультата = 8192; // html
	КонецЕсли;	
	Кодировка = 2; // ANSI
	
	ПриложениеЗапускаCuneiForm = ПолучитьОбщийМакет("ПриложениеЗапускаCuneiForm");
	ИмяEXEФайла = ПолучитьИмяВременногоФайла("exe");
	ПриложениеЗапускаCuneiForm.Записать(ИмяEXEФайла);
	
	КомпонентаЗагрузкиCuneiForm = Неопределено;
	Попытка
		КодВозврата = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаЗагрузкиCuneiForm", "CuneiFormLoaderAddIn", ТипВнешнейКомпоненты.Native);
		КомпонентаЗагрузкиCuneiForm = Новый("AddIn.CuneiFormLoaderAddIn.AddInNativeExtension");	
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Не удалось загрузить компоненту загрузки CuneiForm'");
		Возврат "Ошибка";
	КонецПопытки;
	
	ВремяОжиданияРаспознавания = 30; // секунды
	ПутьКПрограммеКонвертацииPDF = РаботаСФайламиВызовСервера.ПолучитьПутьКПрограммеКонвертацииPDF();
	
	ЯзыкРаспознаванияЧисло = РаботаСФайламиВызовСервера.ЯзыкРаспознаванияCuneiFormПоУмолчанию();
	Если ЗначениеЗаполнено(ЯзыкРаспознавания) Тогда
		ЯзыкРаспознаванияЧисло = Число(ЯзыкРаспознавания);
	КонецЕсли;
	
	КодВозврата = КомпонентаЗагрузкиCuneiForm.РаспознатьКартинку(ИмяEXEФайла, ИмяФайлаСПутем, ИмяФайлаРезультата, 
		ЯзыкРаспознаванияЧисло, ВремяОжиданияРаспознавания, ПутьКПрограммеКонвертацииPDF);
	
	УдалитьФайлы(ИмяФайлаСПутем);
	
	Если КодВозврата = Истина Тогда
		
		Текст = "";
		
		Если РасширениеФайлаРезультата = "html" Тогда
			
			Текст = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекст(ИмяФайлаРезультата);
			
		Иначе
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ИмяФайлаРезультата); // если в формате TXT
			Текст = ТекстовыйДокумент.ПолучитьТекст();
		КонецЕсли;	
		
		ПутьКФайлу = ИмяФайлаРезультата;
		РаспознанныйТекст = Текст;
		Возврат "Успешно";
	КонецЕсли;	
	
	УдалитьФайлы(ИмяФайлаРезультата);
	
	ОписаниеОшибки = НСтр("ru = 'Не удалось распознать картинку. Возможно она не содержит текста для распознавания. '");
	
	Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + Символы.ПС + НСтр("ru = 'Описание ошибки: '") + Строка(КодВозврата);
	КонецЕсли;
	
	Возврат "Ошибка";
	
КонецФункции // РаспознатьФайл()

#КонецОбласти

#Область СервисРаспознавания

#Область ОбщегоНазначения

// Возвращает идентификатор сервиса распознавания.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторСервисаРаспознавания() Экспорт
	
	Возврат "СервисРаспознавания";
	
КонецФункции

// Возвращает имя события журнала регистрации.
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'СервисРаспознаванияДокументов'");
	
КонецФункции

#КонецОбласти

#Область Авторизация

// Возвращает признак авторизации базы в сервисе распознавания.
//
// Возвращаемое значение:
//  Булево
//
Функция БазаАвторизированаВСервисеРаспознавания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	
	Возврат АвторизацияВыполнена(ПараметрыАвторизации);
	
КонецФункции

// Выполняет авторизацию базы в сервисе распознавания, используя параметры ИТС.
//
Процедура ВыполнитьАвторизациюЧерезИТС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	Если АвторизацияВыполнена(ПараметрыАвторизации) Тогда
		ВызватьИсключение НСтр("ru = 'Авторизация в сервисе распознавания уже пройдена.'");
	КонецЕсли;
	
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		ВызватьИсключение
			НСтр("ru = 'База не подключена к ИТС. Авторизация в сервисе распознавания невозможна.'");
	КонецЕсли;
	
	ВладелецТикета = "DocumentRecognition";
	РезультатПолученияТикета = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
	Если ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не удалось получить тикет авторизации с Портала 1С:ИТС
			           |по причине:
			           |%1'"),
			РезультатПолученияТикета.СообщениеОбОшибке);
	КонецЕсли;
	
	Область = ОбластьАвторизации();
	
	РезультатАвторизации = ВыполнитьАвторизациюПоТикетуИТС(
		РезультатПолученияТикета.Тикет,
		Область,
		ПараметрыАвторизации.ИдентификаторИБ);
	
	ПараметрыАвторизации.ИдентификаторИБ = РезультатАвторизации.ИдентификаторИБ;
	ПараметрыАвторизации.ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыАутентификацииИТС = 
			ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		ПараметрыАвторизации.ЛогинПользователяИТС = ПараметрыАутентификацииИТС.Логин;
	КонецЕсли;
	
	ЗаписатьПараметрыАвторизации(ПараметрыАвторизации);
	
КонецПроцедуры

// Удаляет данные авторизации текущей базы в сервисе распознавания ИТС.
//
Процедура УдалитьДанныеАвторизации(УдалитьИдентификаторИБ = Ложь) Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение НСтр("ru = 'Удаление данных авторизации доступно только Администратору.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	
	ПараметрыАвторизации.ТокенДоступа = "";
	Если УдалитьИдентификаторИБ Тогда
		ПараметрыАвторизации.ИдентификаторИБ = "";
	КонецЕсли;
	
	ПараметрыАвторизации.ЛогинПользователяИТС = "";
	
	ЗаписатьПараметрыАвторизации(ПараметрыАвторизации);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Биллинг

// Возвращает количество страниц, которые можно распознать под текущей учетной записью ИТС.
//
// Возвращаемое значение:
//  Число
//
Функция ЛимитСтраницРаспознавания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ЛимитСтраниц", 0);
	Результат.Вставить("ОписаниеОшибки", "");
	
	КомандаСервису = НоваяКомандаСервиса();
	КомандаСервису.URLЗапроса = БазовыйURL() + "/users/limits";
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервису);
	
	ОписаниеСтандартнойОшибки = ОписаниеКодаОстановкиРаспознаванияВСервисе(
		РезультатКоманды.ОтветСервиса.КодСостояния);
	Если ЗначениеЗаполнено(ОписаниеСтандартнойОшибки) Тогда
		Результат.ОписаниеОшибки = ОписаниеСтандартнойОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатКоманды.ОтветСервиса.КодСостояния = КодСостояния_200_ОК() Тогда
		Результат.ЛимитСтраниц = РезультатКоманды.ОтветСервиса.ДесериализованноеЗначение["plain_text_pages"];
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОписаниеОшибки = 
		СтрШаблон(НСтр("ru = 'Не удалось получить лимит страниц распознавания.
			|Код состояния сервиса распознавания: %1'"),
		РезультатКоманды.ОтветСервиса.КодСостояния);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаспознаваниеФайлов

// Начинает распознавание версии файла с помощью сервиса.
//
// Параметры:
//  ТекущаяВерсия - СправочникСсылка.ВерсииФайлов
//
// Возвращаемое значение:
//  Структура
//   * СтрокаВозврата - Строка - строка описывающия результат.
//                      "Ошибка", "НачатоРаспознавание".
//   * ОписаниеОшибки - Строка - содержит текст ошибки.
//   * ИдентификаторЗадания - Строка - содержит идентификатор задания распознавания в сервисе.
//
Функция НачатьРаспознаваниеСПомощьюСервиса(ТекущаяВерсия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("СтрокаВозврата", "НачатоРаспознавание");
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ИдентификаторЗадания", "");
	
	Если Не РаботаСФайламиВызовСервера.ПолучитьИспользоватьРаспознавание()
		
		Или РаботаСФайламиВызовСервера.ПрограммаРаспознавания() <>
			Перечисления.ПрограммыРаспознавания.СервисРаспознавания Тогда
		
		Результат.СтрокаВозврата = "Ошибка";
		Результат.ОписаниеОшибки = НСтр("ru = 'Отключено распознавание при помощи сервиса распознавания документов.'");
		Возврат Результат;
	КонецЕсли;
	
	РеквизитыВерсии = "СтатусРаспознаванияТекста, Расширение";
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяВерсия, РеквизитыВерсии);
	
	Если Не СтатусРаспознаванияКорректенДляНачалаРаспознавания(
		РеквизитыВерсии.СтатусРаспознаванияТекста) Тогда
		
		// не нужно распознавать - не должны были нас тут вызвать
		
		Результат.СтрокаВозврата = "Ошибка";
		Результат.ОписаниеОшибки = НСтр("ru = 'Статус распознавания не корректен для начала распознавания.'");
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ВыполнитьАвторизациюПриНеобходимости();
	Исключение
		Результат.СтрокаВозврата = "Ошибка";
		Результат.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось выполнить авторизацию в сервисе распознавания документов:
			|%1'"),
			ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	ИмяФайла = ИмяВременногоФайла(ТекущаяВерсия.УникальныйИдентификатор(), РеквизитыВерсии.Расширение);
	
	РезультатСоздания = СоздатьЗаданиеРаспознаванияТекстаФайла(ИмяФайла);
	Если Не ЗначениеЗаполнено(РезультатСоздания.ИдентификаторЗадания) Тогда
		Результат.СтрокаВозврата = "Ошибка";
		Результат.ОписаниеОшибки = РезультатСоздания.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИдентификаторЗадания = РезультатСоздания.ИдентификаторЗадания;
	
	Возврат Результат;
	
КонецФункции

// Выполняет распознавание версии файла с помощью сервиса.
// Продолжение НачатьРаспознаваниеСПомощьюСервиса - вызывается после нее.
//
// Параметры:
//  ТекущаяВерсия - СправочникСсылка.ВерсииФайлов
//  ИдентификаторЗадания - Строка - идентификатор задания распознавания в сервисе.
//
// Возвращаемое значение:
//  Структура
//   * СтрокаВозврата - Строка - строка описывающая результат.
//                      "Успешно", "Ошибка", "РаспознаваниеВыполняется".
//   * ОписаниеОшибки - Строка - содержит текст ошибки.
//   * РаспознанныйТекст - Строка - распознанный текст.
//   * ПутьКФайлу - Строка - временный файл с распознанным текстом.
//
Функция ВыполнитьРаспознаваниеСПомощьюСервиса(ТекущаяВерсия, ИдентификаторЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("СтрокаВозврата", "Успешно");
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("РаспознанныйТекст", "");
	Результат.Вставить("ПутьКФайлу", "");
	
	Если Не РаботаСФайламиВызовСервера.ПолучитьИспользоватьРаспознавание()
		
		Или РаботаСФайламиВызовСервера.ПрограммаРаспознавания() <>
			Перечисления.ПрограммыРаспознавания.СервисРаспознавания Тогда
		
		Результат.СтрокаВозврата = "Ошибка";
		Результат.ОписаниеОшибки = НСтр("ru = 'Отключено распознавание при помощи сервиса распознавания документов.'");
		Возврат Результат;
	КонецЕсли;
	
	РеквизитыВерсии = "СтатусРаспознаванияТекста,
		|ТипХраненияФайла,
		|Расширение,
		|Том,
		|ПутьКФайлу,
		|Владелец.ЯзыкРаспознавания";
	
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяВерсия, РеквизитыВерсии);
	
	Если РеквизитыВерсии.СтатусРаспознаванияТекста <> 
		Перечисления.СтатусыРаспознаванияТекста.Распознается Тогда
		
		// не нужно распознавать - не должны были нас тут вызвать
		
		Результат.СтрокаВозврата = "Ошибка";
		Результат.ОписаниеОшибки = НСтр("ru = 'Статус распознавания не корректен для выполнения распознавания.'");
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		ВыполнитьАвторизациюПриНеобходимости();
	Исключение
		Результат.СтрокаВозврата = "Ошибка";
		Результат.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось выполнить авторизацию в сервисе распознавания документов:
			|%1'"),
			ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	ПараметрыЗагрузки = ПараметрыЗагрузкиФайла(ИдентификаторЗадания);
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.ОписаниеОшибки) Тогда
		Результат.СтрокаВозврата = "Ошибка";
		Результат.ОписаниеОшибки = ПараметрыЗагрузки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	Если Не ПараметрыЗагрузки.ФайлЗагружен Тогда
		
		ИмяФайлаСПутем = ВременныйФайлДляРаспознавания(
			ТекущаяВерсия,
			РеквизитыВерсии.ТипХраненияФайла,
			РеквизитыВерсии.Расширение,
			РеквизитыВерсии.Том,
			РеквизитыВерсии.ПутьКФайлу);
		
		РезультатЗагрузкиФайла = ЗагрузитьФайлДляРаспознавания(
			ИмяФайлаСПутем, ПараметрыЗагрузки.ПутьДляЗагрузки);
		
		УдалитьФайлы(ИмяФайлаСПутем);
		
		Если Не РезультатЗагрузкиФайла.ФайлЗагружен Тогда
			Результат.СтрокаВозврата = "Ошибка";
			Результат.ОписаниеОшибки = РезультатЗагрузкиФайла.ОписаниеОшибки;
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатПроверки = ПроверитьГотовностьЗаданияРаспознавания(ИдентификаторЗадания);
	Если ЗначениеЗаполнено(РезультатПроверки.ОписаниеОшибки) Тогда
		Результат.СтрокаВозврата = "Ошибка";
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РезультатПроверки.ИдентификаторРезультата) Тогда
		Результат.СтрокаВозврата = "РаспознаваниеВыполняется";
		Возврат Результат;
	КонецЕсли;
	
	РезультатРаспознавания = РезультатРаспознавания(РезультатПроверки.ИдентификаторРезультата);
	Если ЗначениеЗаполнено(РезультатРаспознавания.ОписаниеОшибки) Тогда
		Результат.СтрокаВозврата = "Ошибка";
		Результат.ОписаниеОшибки = РезультатРаспознавания.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.РаспознанныйТекст = СтрСоединить(РезультатРаспознавания.РаспознанныйТекст,
		Символы.ПС + Символы.ПС + Символы.ПС);
	
	// Для обхода ошибки получения результата с сервиса.
	//Результат.РаспознанныйТекст = "Распознанный текст";
	
	Результат.ПутьКФайлу = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(Результат.ПутьКФайлу);
	ЗаписьТекста.Записать(Результат.РаспознанныйТекст);
	ЗаписьТекста.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет и возвращает корректность статуса распознавания.
//
// Параметры:
//  СтатусРаспознавания - ПеречислениеСсылка.СтатусыРаспознаванияТекста
//
// Возвращаемое значение:
//  Булево
//
Функция СтатусРаспознаванияКорректенДляНачалаРаспознавания(СтатусРаспознавания)
	
	Возврат (СтатусРаспознавания = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать);
	
КонецФункции

// Возвращает путь к временному файлу, для последующей передачи его
// программе распознавания.
//
// Параметры:
//  ВерсияФайла - СпавочникСсылка.ВерсииФайлов
//  ТипХранения - ПеречислениеСсылка.ТипыХраненияФайлов
//  Расширение - Строка
//  Том - СправочникСсылка.ТомаХраненияФайлов
//  ПутьКФайлу - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция ВременныйФайлДляРаспознавания(ВерсияФайла, ТипХранения, Расширение, Том, ПутьКФайлу)
	
	ИмяФайлаСПутем = КаталогВременныхФайлов()
		+ ИмяВременногоФайла(ВерсияФайла.УникальныйИдентификатор(), Расширение);
	
	Если ТипХранения = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияФайла);
		ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
		
		// Сохраним файл из БД на диск
		ДвоичныеДанныеФайла.Записать(ИмяФайлаСПутем);
		
	Иначе // тут файл на диске
		
		Если НЕ Том.Пустая() Тогда
			ИмяФайлаСПутемВТоме = ФайловыеФункции.ПолныйПутьТома(Том) + ПутьКФайлу; 
			КопироватьФайл(ИмяФайлаСПутемВТоме, ИмяФайлаСПутем);
			Файл = Новый Файл(ИмяФайлаСПутем);
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяФайлаСПутем;
	
КонецФункции

// Возвращает имя временного файла.
//
// Параметры:
//  ИдентификаторВерси - УникальныйИдентификатор
//  Расширение - Строка - расширение файла.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяВременногоФайла(ИдентификаторВерси, Расширение)
	
	Возврат Строка(ИдентификаторВерси) + "." + Расширение;
	
КонецФункции

#Область СервисРаспознавания

#Область ОбщегоНазначения

// Упаковывает данные в JSON.
//
// Параметры:
//  Данные - данные, которые можно сериализовать в JSON.
//
// Возвращаемое значение:
//  Строка
//
Функция JsonDump(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область Авторизация

// Возвращает структуру с новыми параметрами авторизации в сервисе.
//
// Возвращаемое значение:
//  ИдентификаторИБ - Строка
//  ТокенДоступа - Строка
//  ЛогинПользователяИТС - Строка
//
Функция НовыеПараметрыАвторизации()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторИБ", "");
	Результат.Вставить("ТокенДоступа", "");
	Результат.Вставить("ЛогинПользователяИТС", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с текущими параметрами авторизации в сервисе.
//
// Возвращаемое значение:
//  ИдентификаторИБ - Строка
//  ТокенДоступа - Строка
//  ЛогинПользователяИТС - Строка
//
Функция ТекущиеПараметрыАвторизации()
	
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИдентификаторСервисаРаспознавания(), "ИдентификаторИБ, ТокенДоступа, ЛогинПользователяИТС");
	
	Если ДанныеВБезопасномХранилище.ИдентификаторИБ <> Неопределено
		Или ДанныеВБезопасномХранилище.ТокенДоступа <> Неопределено Тогда
		
		Возврат ДанныеВБезопасномХранилище;
	КонецЕсли;
	
	Возврат НовыеПараметрыАвторизации();
	
КонецФункции

// Записывает параметры авторизации в безопасное хранилище.
// Прежние параметры удаляются.
//
// Параметры:
//  Параметры - Структура - см. функции ТекущиеПараметрыАвторизации, НовыеПараметрыАвторизации.
//
Процедура ЗаписатьПараметрыАвторизации(Параметры)
	
	ИдентификаторПодсистемы = ИдентификаторСервисаРаспознавания();
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемы,
			Параметры.ИдентификаторИБ,
			"ИдентификаторИБ");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемы,
			Параметры.ТокенДоступа,
			"ТокенДоступа");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемы,
			Параметры.ЛогинПользователяИТС,
			"ЛогинПользователяИТС");
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет выполнена ли авторизация.
//
// Параметры:
//  ПараметрыАвторизации - Структура - см. функции ТекущиеПараметрыАвторизации,
//                         НовыеПараметрыАвторизации.
//
// Возвращаемое значение:
//  Булево
//
Функция АвторизацияВыполнена(ПараметрыАвторизации)
	
	Возврат ЗначениеЗаполнено(ПараметрыАвторизации.ИдентификаторИБ)
		И ЗначениеЗаполнено(ПараметрыАвторизации.ТокенДоступа);
	
КонецФункции

// Возвращает информацию об авторизации.
// Информация передается на сервер при авторизации и хранится там.
//
// Возвращаемое значение:
//  Структура
//   * Конфигурация - Строка - имя конфигурации.
//   * ВерсияКонфигурации - Строка - версия конфигурации
//   * ИнформацияИТС - Структура
//      ** ЛогинПользователяИТС - Строка - пользователь ИТС, по которым был получен токен авторизации ИТС.
//   * ТекущаяУниверсальнаяДата - Строка - текущая универсальная дата в json
//
Функция ОбластьАвторизации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	Если ДанныеАутентификации <> Неопределено Тогда
		ЛогинПользователяИТС  = ДанныеАутентификации.Логин;
	Иначе
		ЛогинПользователяИТС = "<Неопределено>";
	КонецЕсли;
	
	ИнформацияИТС = Новый Структура;
	ИнформацияИТС.Вставить("ЛогинПользователяИТС", ЛогинПользователяИТС);
	
	Результат = Новый Структура;
	Результат.Вставить("Конфигурация", Метаданные.Имя);
	Результат.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Результат.Вставить("ИнформацияИТС", ИнформацияИТС);
	Результат.Вставить("ТекущаяУниверсальнаяДата", ЗаписатьДатуJSON(ТекущаяУниверсальнаяДата(), ФорматДатыJSON.ISO));
	
	Возврат Результат;
	
КонецФункции

// Выполняет авторизацию в сервисе по тикету ИТС.
//
// Параметры:
//  Тикет - Строка - тикет ИТС, по которому выполняется авторизация в сервисе.
//  Область - Структура - см. ОбластьАвторизации()
//  ИдентификаторИБ - Строка - идентификатор информационной базы.
//                    нужен для повторной авторизации в сервисе распознавания, чтобы
//                    сохранить возможность получения результатов для файлов при смене логина ИТС.
//
// Возвращаемое значение:
//  Структура - см. ВыполнитьКомандуСервисаАвторизации
//
Функция ВыполнитьАвторизациюПоТикетуИТС(Тикет, Область, ИдентификаторИБ = Неопределено)
	
	Данные = Новый Структура;
	Данные.Вставить("ticket", Тикет);
	Данные.Вставить("scope", JsonDump(Область));
	Данные.Вставить("client_id", ИдентификаторИБ);
	
	Команда = НоваяКомандаСервиса();
	Команда.URLЗапроса = БазовыйURL() + "/users_its";
	Команда.Метод = "POST";
	Команда.Заголовки.Вставить("Content-Type", "application/json");
	Команда.Заголовки.Вставить("Charset", "utf-8");
	Команда.Данные = JsonDump(Данные);
	
	Возврат ВыполнитьКомандуСервисаАвторизации(Команда);
	
КонецФункции

// Выполняет авторизацию в сервисе по заданным параметра.
//
// Параметры:
//  Команда - Структура - см. НоваяКомандаСервиса
//
// Возвращаемое значение:
//  Структура
//   * ИдентификаторИБ - Строка - идентификатор базы выданный сервисом.
//   * ТокенДоступа - Строка - токен, который разрешает выполнять распознавание.
//
Функция ВыполнитьКомандуСервисаАвторизации(Команда)
	
	РезультатКоманды = ВыполнитьКомандуСервиса(Команда);
	
	Если РезультатКоманды.ОтветСервиса = Неопределено Тогда
		ВызватьИсключение РезультатКоманды.ОписаниеОшибки;
	КонецЕсли;
	
	ТекстОшибкиПоУмолчанию = НСтр("ru = 'Ошибка при авторизации в сервисе распознавания.'");
	Если РезультатКоманды.ОтветСервиса.КодСостояния = КодСостояния_403_AuthError()
		Или РезультатКоманды.ОтветСервиса.КодСостояния = КодСостояния_401_AuthError() Тогда
		
		ТекстОшибки = ТекстОшибкиПоУмолчанию;
		
	ИначеЕсли РезультатКоманды.ОтветСервиса.КодСостояния <> КодСостояния_200_ОК() Тогда
		Если ТипЗнч(РезультатКоманды.ОтветСервиса.ДесериализованноеЗначение) = Тип("Соответствие") Тогда
			ТекстОшибки = РезультатКоманды.ОтветСервиса.ДесериализованноеЗначение.Получить("message");
		Иначе
			ТекстОшибки = ТекстОшибкиПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = '%1 (код состояния: %2)'"),
			ТекстОшибки,
			РезультатКоманды.ОтветСервиса.КодСостояния);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторИБ",
		XMLСтрока(РезультатКоманды.ОтветСервиса.ДесериализованноеЗначение.Получить("client_id")));
	Результат.Вставить("ТокенДоступа",
		XMLСтрока(РезультатКоманды.ОтветСервиса.ДесериализованноеЗначение.Получить("session_id")));
	
	Возврат Результат;
	
КонецФункции

// Выполняет авторизацию, если она не выполнена.
// Если изменился логин пользователя интернет поддержки, то выполняет обновление параметров авторизации.
//
Процедура ВыполнитьАвторизациюПриНеобходимости()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	
	ПараметрыАутентификацииИТС = 
		ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	
	// Если есть подключения к интернет поддержке и логин не изменился, то ничего не делаем - выходим.
	// Это самое частотное условие, в большестве случаев дальше выполнение не идет.
	Если ЗначениеЗаполнено(ПараметрыАутентификацииИТС)
		И ПараметрыАутентификацииИТС.Логин = ПараметрыАвторизации.ЛогинПользователяИТС Тогда
		
		Возврат;
	КонецЕсли;
	
	// Если авторизация не выполнена, то выполняем ее и выходим.
	Если Не АвторизацияВыполнена(ПараметрыАвторизации) Тогда
		ВыполнитьАвторизациюЧерезИТС();
		Возврат;
	КонецЕсли;
	
	// Для случаев когда не подключена интернет поддержка или изменился логин
	// удаляем данные авторизации.
	УдалитьДанныеАвторизации();
	
	// Если интернет поддержка подключена, то выполняем повторную авторизацию.
	Если ЗначениеЗаполнено(ПараметрыАутентификацииИТС) Тогда
		ВыполнитьАвторизациюЧерезИТС();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеФайлов

// Создает задание распознавания текста файла в сервисе.
//
// Параметры:
//  ИмяФайла - Строка
//
// Возвращаемое значение:
//  Структура
//   * ИдентификаторЗадания - Строка, Неопределено - Неопределено, если не удалось создать здание.
//   * ОписаниеОшибки - Строка - описание ошибки.
//
Функция СоздатьЗаданиеРаспознаванияТекстаФайла(ИмяФайла)
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	
	СписокФайлов = Новый Массив;
	СписокФайлов.Добавить(ИмяФайла);
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.Метод = "POST";
	КомандаСервиса.URLЗапроса = БазовыйURL() + "/ocr/models/" + НомерМодели() + "/new_task?type=text&async=1";
	КомандаСервиса.Данные = JsonDump(СписокФайлов);
	
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды.ОтветСервиса = Неопределено Тогда
		Результат.ОписаниеОшибки = РезультатКоманды.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеСтандартнойОшибки = ОписаниеКодаОстановкиРаспознаванияВСервисе(
		РезультатКоманды.ОтветСервиса.КодСостояния);
	Если ЗначениеЗаполнено(ОписаниеСтандартнойОшибки) Тогда
		Результат.ОписаниеОшибки = ОписаниеСтандартнойОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатКоманды.ОтветСервиса.КодСостояния <> КодСостояния_200_ОК() Тогда
		Результат.ОписаниеОшибки = 
			СтрШаблон(НСтр("ru = 'Не удалось создать задание распознавания текста файла.
			|Код состояния сервиса распознавания: %1'"),
			РезультатКоманды.ОтветСервиса.КодСостояния);
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИдентификаторЗадания = РезультатКоманды.ОтветСервиса.ДесериализованноеЗначение;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры загрузки файла в сервис.
//
// Параметры:
//  ИдентификаторЗадания - Строка - идентификатор задания распознавания в сервисе.
//
// Возвращаемое значение:
//  Структура
//   * ФайлЗагружен - Булево
//   * ПутьДляЗагрузки - Строка
//   * ОписаниеОшибки - Строка - описание ошибки.
//
Функция ПараметрыЗагрузкиФайла(ИдентификаторЗадания) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлЗагружен", Ложь);
	Результат.Вставить("ПутьДляЗагрузки", "");
	Результат.Вставить("ОписаниеОшибки", "");
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL()
		+ "/ocr/models/" + НомерМодели() + "/result/" + ИдентификаторЗадания;
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды.ОтветСервиса = Неопределено Тогда
		Результат.ОписаниеОшибки = РезультатКоманды.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеСтандартнойОшибки = ОписаниеКодаОстановкиРаспознаванияВСервисе(
		РезультатКоманды.ОтветСервиса.КодСостояния);
	Если ЗначениеЗаполнено(ОписаниеСтандартнойОшибки) Тогда
		Результат.ОписаниеОшибки = ОписаниеСтандартнойОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатКоманды.ОтветСервиса.КодСостояния <> КодСостояния_200_ОК()
		И РезультатКоманды.ОтветСервиса.КодСостояния <> КодСостояния_202() Тогда
		
		Результат.ОписаниеОшибки = 
			СтрШаблон(НСтр("ru = 'Не удалось получить параметры для загрузки файлов.
			|Код состояния сервиса распознавания: %1'"),
			РезультатКоманды.ОтветСервиса.КодСостояния);
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатКоманды.ОтветСервиса.ДесериализованноеЗначение["result"]["uploaded_files"] = 1 Тогда
		Результат.ФайлЗагружен = Истина;
	КонецЕсли;
	
	Результат.ПутьДляЗагрузки = РезультатКоманды.ОтветСервиса.ДесериализованноеЗначение["info"]["upload_path"][0];
	
	Возврат Результат;
	
КонецФункции

// Загружает файл для распознавания в сервис.
// После загрузки сразу начинается распознавание файла.
// Если файл уже был загружен ранее, то повторная загрузка не выполняется.
//
// Параметры:
//  ИмяФайлаНаДиске - Строка
//  ПутьВСервисеДляЗагрузки - Строка
//
// Возвращаемое значение:
//  Структура
//   * ФайлЗагружен - Булево
//   * ОписаниеОшибки - Строка - описание ошибки.
//
Функция ЗагрузитьФайлДляРаспознавания(ИмяФайлаНаДиске, ПутьВСервисеДляЗагрузки)
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлЗагружен", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.Метод = "POST";
	КомандаСервиса.Заголовки["Content-Type"] = "application/octet-stream";
	КомандаСервиса.URLЗапроса = БазовыйURL() + ПутьВСервисеДляЗагрузки;
	КомандаСервиса.Данные = Новый ДвоичныеДанные(ИмяФайлаНаДиске);
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды.ОтветСервиса = Неопределено Тогда
		Результат.ОписаниеОшибки = РезультатКоманды.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеСтандартнойОшибки = ОписаниеКодаОстановкиРаспознаванияВСервисе(
		РезультатКоманды.ОтветСервиса.КодСостояния);
	Если ЗначениеЗаполнено(ОписаниеСтандартнойОшибки) Тогда
		Результат.ОписаниеОшибки = ОписаниеСтандартнойОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатКоманды.ОтветСервиса.КодСостояния = КодСостояния_202() Тогда
		Результат.ФайлЗагружен = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОписаниеОшибки = 
		СтрШаблон(НСтр("ru = 'Не удалось загрузить файл в сервис распознавания.
			|Код состояния сервиса распознавания: %1'"),
		РезультатКоманды.ОтветСервиса.КодСостояния);
	Возврат Результат;

КонецФункции

// Проверяет завершено ли распознавание файла.
//
// Параметры:
//  ИдентификаторЗадания - Строка - идентификатор задания распознавания в сервисе.
//
// Возвращаемое значение:
//  Структура
//   * ИдентификаторРезультата - Строка, Неопределено - Неопределено,
//                               если при проверке произошла ошибка или файл еще распознается.
//   * ОписаниеОшибки - Строка - описание ошибки, заполнено, если произошла ошибка.
//
Функция ПроверитьГотовностьЗаданияРаспознавания(ИдентификаторЗадания)
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторРезультата", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL()
		+ "/ocr/models/" + НомерМодели() + "/result/" + ИдентификаторЗадания;
	
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	Если РезультатКоманды.ОтветСервиса = Неопределено Тогда
		Результат.ОписаниеОшибки = РезультатКоманды.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеСтандартнойОшибки = ОписаниеКодаОстановкиРаспознаванияВСервисе(
		РезультатКоманды.ОтветСервиса.КодСостояния);
	Если ЗначениеЗаполнено(ОписаниеСтандартнойОшибки) Тогда
		Результат.ОписаниеОшибки = ОписаниеСтандартнойОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатКоманды.ОтветСервиса.КодСостояния = КодСостояния_202() Тогда // Еще распознается.
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатКоманды.ОтветСервиса.КодСостояния = КодСостояния_200_ОК() Тогда
		Результат.ИдентификаторРезультата = 
			РезультатКоманды.ОтветСервиса.ДесериализованноеЗначение["result"]["documents"][0]["id"];
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОписаниеОшибки = 
		СтрШаблон(НСтр("ru = 'Не удалось проверить готовность результата в сервисе распознавания.
			|Код состояния сервиса распознавания: %1'"),
		РезультатКоманды.ОтветСервиса.КодСостояния);
	Возврат Результат;
	
КонецФункции

// Возвращает результат распознавания по указанном идентификатору.
//
// Параметры:
//  ИдентификаторРезультата - Строка - идентификатор результата распознавания в сервисе.
//
// Возвращаемое значение:
//  Структура
//   * РаспознанныйТекст - Массив - тексты распознанных страниц.
//                         Каждый элемент массива является распознанной страницей.
//   * ОписаниеОшибки - Строка - описание ошибки, заполнено, если произошла ошибка.
//
Функция РезультатРаспознавания(ИдентификаторРезультата)
	
	Результат = Новый Структура;
	Результат.Вставить("РаспознанныйТекст", Новый Массив);
	Результат.Вставить("ОписаниеОшибки", "");
	
	КомандаСервиса = НоваяКомандаСервиса();
	КомандаСервиса.URLЗапроса = БазовыйURL()
		+ "/ocr/models/" + НомерМодели() + "/result/" + ИдентификаторРезультата;
	РезультатКоманды = ВыполнитьКомандуСервиса(КомандаСервиса);
	
	Если РезультатКоманды.ОтветСервиса = Неопределено Тогда
		Результат.ОписаниеОшибки = РезультатКоманды.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеСтандартнойОшибки = ОписаниеКодаОстановкиРаспознаванияВСервисе(
		РезультатКоманды.ОтветСервиса.КодСостояния);
	Если ЗначениеЗаполнено(ОписаниеСтандартнойОшибки) Тогда
		Результат.ОписаниеОшибки = ОписаниеСтандартнойОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатКоманды.ОтветСервиса.КодСостояния = КодСостояния_200_ОК() Тогда
		Результат.РаспознанныйТекст = РезультатКоманды.ОтветСервиса.ДесериализованноеЗначение["result"];
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОписаниеОшибки = 
		СтрШаблон(НСтр("ru = 'Не удалось получить результат распознавания.
			|Код состояния сервиса распознавания: %1'"),
		РезультатКоманды.ОтветСервиса.КодСостояния);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Переопределения

// Возвращает адрес сервиса распознавания документов.
//
// Возвращаемое значение:
//  Строка
//
Функция БазовыйURL()
	
	Возврат "https://ocr.1c.ai/api/v1";
	
КонецФункции

// Возвращает номер модели в сервисе, которая выполняется распознавание файлов.
//
// Возвращаемое значение:
//  Строка
//
Функция НомерМодели()
	
	Возврат "15";
	
КонецФункции

#КонецОбласти

#Область КодыСостояний

Функция КодСостояния_200_ОК()
	
	Возврат 200;
	
КонецФункции

Функция КодСостояния_202()
	
	Возврат 202;
	
КонецФункции

Функция КодСостояния_400_BadRequest()
	
	Возврат 400;
	
КонецФункции

Функция КодСостояния_402()
	
	Возврат 402;
	
КонецФункции

Функция КодСостояния_401_AuthError()
	
	Возврат 401;
	
КонецФункции

Функция КодСостояния_403_AuthError()
	
	Возврат 403;
	
КонецФункции

// Возвращает описание кода состояния в ответе http-сервиса.
//
// Параметры:
//  КодСостояния - Число
//
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеКодаОстановкиРаспознаванияВСервисе(КодСостояния)
	
	ОписаниеКода = "";
	
	Если КодСостояния = КодСостояния_401_AuthError()
		Или КодСостояния = КодСостояния_403_AuthError() Тогда
		
		ОписаниеКода = СтрШаблон(
			НСтр("ru = 'Не пройдена авторизация в сервисе распознавания документов (код состояния: 401/403).'"));
	КонецЕсли;
	
	Если КодСостояния = КодСостояния_402() Тогда
		ОписаниеКода = СтрШаблон(
			НСтр("ru = 'Для выполнения распознавания недостаточно оплаченных страниц (код состояния: 402).'"));
	КонецЕсли;
	
	Если КодСостояния = КодСостояния_400_BadRequest() Тогда
		ОписаниеКода = 
			НСтр("ru = 'Не удалось распознать файл (код состояния: 400).
			|Возможно файл поврежден или имеет не поддерживаемый формат.
			|Допустимые форматы: bmp, jpg, jpeg, gif, tif, tiff, pdf.'");
	КонецЕсли;
	
	Возврат ОписаниеКода;
	
КонецФункции

#КонецОбласти

#Область Исполнение

// Возвращает структуру параметров, для запроса к сервису распознавания.
//
// Возвращаемое значение:
//  Структура
//   * URLЗапроса - Строка
//   * Метод - Строка - GET, PUT, POST
//   * Заголовки - Соответствие
//      ** Ключ - имя заголовка, Значение - значение заголовка.
//   * Данные - произвольный данные.
//
Функция НоваяКомандаСервиса()

	Результат = Новый Структура;
	Результат.Вставить("URLЗапроса", БазовыйURL());
	Результат.Вставить("Метод", "GET");
	Результат.Вставить("Заголовки", Новый Соответствие);
	Результат.Вставить("Данные", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Выполнение команды сервиса.
//
// Параметры:
//  Команда - Структура - см. НоваяКомандаСервиса
//
// Возвращаемое значение:
//  Структура
//   * ОтветСервиса - Структура - см. СтруктураОтветаСервиса
//   * ОписаниеОшибки - Строка - описание ошибки.
//
Функция ВыполнитьКомандуСервиса(Команда)
	
	Результат = Новый Структура;
	Результат.Вставить("ОтветСервиса", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Команда.URLЗапроса);
	
	ПортЗащищенногоСоединения = 443;
	
	Если СтруктураURI.Порт = ПортЗащищенногоСоединения Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(
		СтруктураURI.Хост,
		СтруктураURI.Порт, , , ,
		60,
		ЗащищенноеСоединение
	);
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	
	// Установка заголовков запроса.
	Если Команда.Свойство("Заголовки") Тогда
		Для Каждого ЭлементКоллекции Из Команда.Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		КонецЦикла;
	КонецЕсли;
	HTTPЗапрос.Заголовки.Вставить("X-Auth-Token", ПараметрыАвторизации.ТокенДоступа);
	
	Если Команда.Свойство("Данные") Тогда
		Если ТипЗнч(Команда.Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Команда.Данные);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(
				Команда.Данные,
				КодировкаТекста.UTF8,
				ИспользованиеByteOrderMark.НеИспользовать
			);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ОтветСервиса = HTTPСоединение.ВызватьHTTPМетод(Команда.Метод, HTTPЗапрос);
	Исключение
		// Запрос не дошел до HTTP-Сервера
		Результат.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'По запросу URL: %1 произошла сетевая ошибка
			           |Описание ошибки:
			           |%2'"),
			Команда.URLЗапроса,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Результат;
	КонецПопытки;
	
	Результат.ОтветСервиса = СтруктураОтветаСервиса(ОтветСервиса);
	
	Возврат Результат;
	
КонецФункции

// Преобразует HTTPОтвет в структуру, удобную для обработки.
//
// Параметры:
//  Результат - HTTPОтвет
//
// Возвращаемое значение:
//  Структура
//   Ответ - тело ответа строкой.
//   КодСостояния - Число
//   ДесериализованноеЗначение - см. ПрочитатьТелоЗапросаJSON
//
Функция СтруктураОтветаСервиса(Результат)
	
	ТелоОтветаНаЗапрос = Результат.ПолучитьТелоКакСтроку();
	ДесериализованноеЗначение = ПрочитатьТелоЗапросаJSON(ТелоОтветаНаЗапрос);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Ответ", ТелоОтветаНаЗапрос);
	СтруктураРезультата.Вставить("КодСостояния", Результат.КодСостояния);
	СтруктураРезультата.Вставить("ДесериализованноеЗначение", ДесериализованноеЗначение);
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Функция десериализует строку формата JSON, полученную от сервера, и возвращает результат этого действия
//
// Параметры:
//  СтрокаВФорматеJSON - СтрокаJSON - Строка в формате JSON
//
// Возвращаемое значение:
//  Соответствие, Массив, Структура - десериализованное значение чтения JSON
//
Функция ПрочитатьТелоЗапросаJSON(СтрокаВФорматеJSON)
	
	ДесериализованноеЗначение = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(СтрокаВФорматеJSON);
		// Строка может быть не в формате JSON (например при ошибке)
		ДесериализованноеЗначение = ПрочитатьJSON(ЧтениеJSON, Истина, "create_time");
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Невозможно прочитать тело запроса JSON:
			           |Читаемый объект(первые 150 символов):
			           |%1
			           |Описание ошибки:
			           |%2""'"),
			Лев(Строка(СтрокаВФорматеJSON), 150),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстОшибки);
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат ДесериализованноеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
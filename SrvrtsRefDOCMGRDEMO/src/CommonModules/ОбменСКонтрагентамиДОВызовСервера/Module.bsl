
#Область ПрограммныйИнтерфейс

// Устанавливает состояние документа документооборота по ЭДО
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ДокументДО
//  СостояниеДокументаЭДО - ПеречислениеСсылка.СостоянияВерсийЭДДО
//
Процедура УстановитьСостояниеДокументаЭДО(СсылкаНаОбъект, Контрагент, СостояниеДокументаЭДО, НаправлениеЭД = Неопределено, Комментарий = Неопределено) Экспорт
	
	РегистрыСведений.СостояниеДокументовПоЭДО.Добавить(СсылкаНаОбъект, Контрагент, СостояниеДокументаЭДО, НаправлениеЭД, Комментарий);
	
КонецПроцедуры

// Возвращает состояние документа 1С:Документоборот в ЭДО.
//
// Параметры:
//  Документ - ДокументСсылка.ВнутренниеДокументы - Документ, для которого необходимо получить сведения о состоянии.
//  Дата - Дата - Дата, на которую необходимо получить сведения.
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент, для которого необходимо получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит свежения о состоянии документа 1С:Документооборот в ЭДО.
//		* см. РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента
//
Функция ПолучитьСостояниеДокумента(Документ, Дата = Неопределено, Контрагент = Неопределено) Экспорт

	Возврат РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента(Документ, Дата, Контрагент);

КонецФункции 

// Удаляет состояние документа документооборота по ЭДО
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ДокументДО
//
Процедура УдалитьСостояниеДокументаЭДО(СсылкаНаОбъект) Экспорт
	
	РегистрыСведений.СостояниеДокументовПоЭДО.Удалить(СсылкаНаОбъект);
	
КонецПроцедуры

// Определяет готовность документа документооборота к ЭДО.
//  см ОбменСКонтрагентамиСервер.ДокументГотовКФормированиюЭД()
Функция ДокументГотовКФормированиюЭД(
			Документ, 
			ВыводитьСообщение = Ложь, 
			КонтрагентыГотовыеКЭДО = Неопределено, 
			ПроверятьПодписанДокумент = Истина,
			НаправлениеЭД = Неопределено) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбменСКонтрагентамиДОСервер.ДокументГотовКФормированиюЭД(
		Документ,
		ВыводитьСообщение,
		КонтрагентыГотовыеКЭДО,
		ПроверятьПодписанДокумент,
		НаправлениеЭД);
	
КонецФункции

Функция ПолучитьПризнакиДокументаПоЭДО(ДокументДО, СсылкаНаМассивОтпечатков = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(ДокументДО);
	НастройкиОбменаЭД = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	ПрофильНастроекЭДО = 
		?(ТипЗнч(НастройкиОбменаЭД) = Тип("Структура") И НастройкиОбменаЭД.Свойство("ПрофильНастроекЭДО"),
			НастройкиОбменаЭД.ПрофильНастроекЭДО, 
			Неопределено);
		
	ПараметрыЭДО = Новый Структура;
	ПараметрыЭДО.Вставить("СсылкаНаМассивОтпечатков",    СсылкаНаМассивОтпечатков);
	ПараметрыЭДО.Вставить("ПрофильНастроекЭДО",          ПрофильНастроекЭДО);
	ПараметрыЭДО.Вставить("ВидЭД",                       ПараметрыЭД.ВидЭД);
	ПараметрыЭДО.Вставить("ОсновнойФайлЭД",              Неопределено);
	ПараметрыЭДО.Вставить("МожноОтклонитьЭтотЭД",        Истина);
	ПараметрыЭДО.Вставить("ЕстьДоступныеСертификаты",    Ложь);
	ПараметрыЭДО.Вставить("ЭДСчетФактура",               Ложь);
	ПараметрыЭДО.Вставить("ДОСФЗавершен",                Ложь);
	ПараметрыЭДО.Вставить("СтатусЭД",                    Неопределено);
	ПараметрыЭДО.Вставить("ТипЭлементаВерсииЭД",         Неопределено);
	ПараметрыЭДО.Вставить("ПричинаОтклонения",           "");
	ПараметрыЭДО.Вставить("ВторойТитулПодписан",         Ложь);
	ПараметрыЭДО.Вставить("МожноАннулироватьЭтотЭД",     Ложь);
	ПараметрыЭДО.Вставить("ЕстьОтправленноеУведомление", Ложь);
	ПараметрыЭДО.Вставить("ЭтоТитулФНС",                 Ложь);
	ПараметрыЭДО.Вставить("ДоступнаКорректировкаЭД",     Ложь);
	
	ПараметрыЭДО.Вставить("ЕстьНастройкиОбмена",         ТипЗнч(НастройкиОбменаЭД) = Тип("Структура"));
	
	Если ЗначениеЗаполнено(ПараметрыЭДО.СсылкаНаМассивОтпечатков) Тогда
		МассивОтпечатков = ПолучитьИзВременногоХранилища(ПараметрыЭДО.СсылкаНаМассивОтпечатков);
	Иначе
		МассивОтпечатков = Новый Массив;
	КонецЕсли;

	ТаблицаФайловЭД = ПолучитьФайлыЭлектронныхДокументов(ДокументДО);
	
	Если ТаблицаФайловЭД.Количество() > 0 Тогда
		
		Для каждого СтрокаТаблицыФайловЭД Из ТаблицаФайловЭД Цикл
			
			Если ПараметрыЭДО.ОсновнойФайлЭД = Неопределено Тогда
				ПараметрыЭДО.ОсновнойФайлЭД = СтрокаТаблицыФайловЭД.ФайлЭД;
			КонецЕсли; 
			
			Если ОбменСКонтрагентамиСлужебный.МожноОтклонитьЭтотЭД(СтрокаТаблицыФайловЭД.ФайлЭД) = Ложь Тогда
				ПараметрыЭДО.МожноОтклонитьЭтотЭД  = Ложь;
			КонецЕсли; 
			
			ПараметрыЭДО.СтатусЭД = СтрокаТаблицыФайловЭД.СтатусЭД;
			ПараметрыЭДО.ТипЭлементаВерсииЭД = СтрокаТаблицыФайловЭД.ТипЭлементаВерсииЭД;			
			ПараметрыЭДО.ДоступнаКорректировкаЭД = 
				Не ОбменСКонтрагентамиДОСлужебный.ВидыЭДКорректируемыеНепосредственно().Найти(СтрокаТаблицыФайловЭД.ВидЭД) = Неопределено;
			
			Если ОбменСКонтрагентамиДОСлужебный.ЕстьДоступныеСертификаты(МассивОтпечатков, СтрокаТаблицыФайловЭД.ФайлЭД) Тогда
				ПараметрыЭДО.ЕстьДоступныеСертификаты = Истина;
			КонецЕсли;
			
			Если Не ПараметрыЭДО.ЭтоТитулФНС И ОбменСКонтрагентамиСлужебный.ЭтоТитулФНС(СтрокаТаблицыФайловЭД.ЭД) Тогда
				ПараметрыЭДО.ЭтоТитулФНС = Истина;
			КонецЕсли;
			
			Если ОбменСКонтрагентамиСлужебный.МожноАннулироватьЭтотЭД(СтрокаТаблицыФайловЭД.ФайлЭД) Тогда
				ПараметрыЭДО.МожноАннулироватьЭтотЭД = Истина;
			КонецЕсли;
			
			Если ОбменСКонтрагентамиСлужебный.ЭтоСчетФактура(СтрокаТаблицыФайловЭД.ФайлЭД) Тогда
				ПараметрыЭДО.ЭДСчетФактура = Истина;
				ПараметрыЭДО.ДОСФЗавершен = ОбменСКонтрагентамиСлужебный.ДОСФЗавершен(СтрокаТаблицыФайловЭД.ФайлЭД, СтрокаТаблицыФайловЭД.НаправлениеЭД);
			КонецЕсли;
			
			Если СтрокаТаблицыФайловЭД.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				ПараметрыЭДО.ВидЭД = СтрокаТаблицыФайловЭД.ВидЭД;
				Если ОбменСКонтрагентамиСлужебный.ВторойТитулПодписан(СтрокаТаблицыФайловЭД.ФайлЭД) Тогда
					ПараметрыЭДО.ВторойТитулПодписан = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФайловЭД.ПричинаОтклонения) Тогда
				ПараметрыЭДО.ПричинаОтклонения = СтрокаТаблицыФайловЭД.ПричинаОтклонения;
			КонецЕсли;
			
			Если ОбменСКонтрагентамиСлужебный.ЕстьОтправленноеУведомление(СтрокаТаблицыФайловЭД.ФайлЭД) Тогда
				ПараметрыЭДО.ЕстьОтправленноеУведомление = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(МассивОтпечатков) ТОгда
		
		ТаблицаДоступныхСертификатов = ОбменСКонтрагентамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатков, ПараметрыЭДО.ПрофильНастроекЭДО);
		Если ТаблицаДоступныхСертификатов.Количество() > 0 Тогда
			ПараметрыЭДО.ЕстьДоступныеСертификаты = Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ПараметрыЭДО;
	
КонецФункции

// Возвращает, доступно ли выполнение действий ЭДО по документу 1С:Документооборот.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - Ссылка на документ, который необходимо проверить.
//  СсылкаНаМассивОтпечатков - Строка - Адрес во вренном хранилище, по которому содержится массив 
//	 доступных отпечатков сертификатов электронных подписей.
//
Функция ДоступноВыполнениеДействийПоЭДО(Документ, СсылкаНаМассивОтпечатков) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСлужебный.ДоступноВыполнениеДействийПоЭДО(Документ, СсылкаНаМассивОтпечатков);
	
КонецФункции

// Получает структуру параметров необходимых для просмотра ЭД.
//
// Параметры:
//  СсылкаНаДвоичныеДанныеФайла - ДвоичныеДанные - Данные файла электронного документа.
//  ИмяФайла - Строка - Полное имя просматриваемого файла.
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
//
Функция ПолучитьПараметрыПросмотраЭД(СсылкаНаДвоичныеДанныеФайла, ИмяФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ПараметрыЧтенияЭД = Новый Структура;		
	ПараметрыЧтенияЭД.Вставить("ФайлДанныхСсылка", СсылкаНаДвоичныеДанныеФайла); 
	ПараметрыЧтенияЭД.Вставить("ВыводитьСообщенияОбОшибках", Ложь);
				
	СтруктураДанныхЭД = ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИзФайла(ПараметрыЧтенияЭД);
	
	Если СтруктураДанныхЭД.ЭДПрочитан Тогда
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("АдресХранилища", СсылкаНаДвоичныеДанныеФайла);
		ВозвращаемоеЗначение.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
		ВозвращаемоеЗначение.Вставить("СсылкаНаДокумент", Неопределено);
		ВозвращаемоеЗначение.Вставить("ФайлАрхива", Ложь);
		ВозвращаемоеЗначение.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
		ВозвращаемоеЗначение.Вставить("ИмяФайла", ИмяФайла);
	КонецЕсли;
		
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает состояние версии документа ДО по ЭДО.
//
// Параметры:
//  ДокументДО - документ документооборота .
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент по ЭДО.
// 
// Возвращаемое значение:
//  СостоянияВерсийЭДДО - ПеречислениеСсылка.СостоянияВерсийЭДДО - состояние версии документа ДО по ЭДО.
//
Функция ДанныеСостоянияДокументаПоЭДО(ДокументДО, Контрагент = Неопределено, НаДату = Неопределено, НаправлениеЭД = Неопределено) Экспорт

	Возврат РегистрыСведений.СостояниеДокументовПоЭДО.ДанныеСостоянияДокументаПоЭДО(ДокументДО, Контрагент, НаДату, НаправлениеЭД);

КонецФункции 

// Получает файлы электронных документов связанных с документом 1С:Документооборот.
//
// Параметры:
//	Документ - СправочникСсылка.ВнутренниеДокументы - Документ, для которого необходимо получить файлы ЭД.
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьФайлыЭлектронныхДокументов(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка КАК Версия
		|ПОМЕСТИТЬ ВерсииФайловДокумента
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ВерсииФайлов.Владелец = Файлы.Ссылка
		|			И ВерсииФайлов.Ссылка = Файлы.ТекущаяВерсия
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И НЕ Файлы.ПометкаУдаления
		|	И НЕ ВерсииФайлов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВерсииФайлов.Версия КАК ВерсияФайлаДокумента,
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ФайлЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК ЭД,
		|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
		|	СостоянияЭД.ЭлектронныйДокумент.ВидЭД КАК ВидЭД,
		|	СостоянияЭД.ЭлектронныйДокумент.ПричинаОтклонения КАК ПричинаОтклонения,
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
		|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект
		|ИЗ
		|	ВерсииФайловДокумента КАК ВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО ВерсииФайлов.Версия = СостоянияЭД.СсылкаНаОбъект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|			И (НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления)
		|			И (НЕ СостоянияЭД.ЭлектронныйДокумент В (&ПустоеЗначениеЭД))
		|			И (ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.Ссылка ЕСТЬ NULL)";
		
	ПустоеЗначениеЭД = Новый Массив;
	ПустоеЗначениеЭД.Добавить(Неопределено);
	ПустоеЗначениеЭД.Добавить(Документы.ЭлектронныйДокументВходящий.ПустаяСсылка());
	ПустоеЗначениеЭД.Добавить(Документы.ЭлектронныйДокументИсходящий.ПустаяСсылка());
	ПустоеЗначениеЭД.Добавить(Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ПустоеЗначениеЭД", ПустоеЗначениеЭД);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

// Возвращает ЭД, связанный с документом ДО
// 
// Параметры:
//    Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО для которого необходимо получить ЭД
// 
// Возвращаемое значение:
//    ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументВходящий - ЭД
// 
Функция ЭДДокументаДО(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
		|ПОМЕСТИТЬ ФайлыДокумента
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	ФайлыДокумента КАК ФайлыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО ФайлыДокумента.ТекущаяВерсия = СостоянияЭД.СсылкаНаОбъект";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ЭлектронныйДокумент) Тогда
			Возврат Выборка.ЭлектронныйДокумент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


Функция СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД = Неопределено, ФайлДопДанных = Неопределено, ФайлКартинок = Неопределено) Экспорт
	
	Перем ДеревоРазбора, СтрокаОбъекта, Номер, Дата, ПространствоИмен, ВалютаКод;
	СтруктураВозврата = Новый Структура;
	
	СтруктураРазбора = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД, ФайлДопДанных, ФайлКартинок);
	
	Если ТипЗнч(СтруктураРазбора) = Тип("Структура")
			И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора)
			И СтруктураРазбора.Свойство("СтрокаОбъекта", СтрокаОбъекта) Тогда
			
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "Номер"));
		Если МассивСтрок.Количество() > 0 Тогда
			Номер = МассивСтрок[0].ЗначениеРеквизита;
		КонецЕсли;
			
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "Дата"));
		Если МассивСтрок.Количество() > 0 Тогда
			Дата = МассивСтрок[0].ЗначениеРеквизита;
		КонецЕсли;
		
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ИдентификаторДокумента"));
		Если МассивСтрок.Количество() > 0 Тогда
			ПространствоИмен = МассивСтрок[0].ЗначениеРеквизита;
			Если СтрНайти(ПространствоИмен, "TORG") > 0 Тогда
				НаименованиеДокумемнта = "Товарная накладная";
			ИначеЕсли СтрНайти(ПространствоИмен, "ON_SFAKT") > 0 Тогда
				НаименованиеДокумемнта = "Счет-фактура";
			ИначеЕсли СтрНайти(ПространствоИмен, "AKTPRM") > 0 Тогда
				НаименованиеДокумемнта = "Счет-фактура";
			Иначе
				НаименованиеДокумемнта = ПространствоИмен;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаименованиеДокумемнта) Тогда
			ИмяСоздания = НаименованиеДокумемнта+ 
				?(ЗначениеЗаполнено(Номер)," № "+Номер,"")+ 
				?(ЗначениеЗаполнено(Дата)," от "+ Формат(Дата,"ДФ=dd.MM.yy"),"");
			СтруктураВозврата.Вставить("ИмяСоздания", ИмяСоздания);
		КонецЕсли;
		
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СуммаДокумента"));
		Если МассивСтрок.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СуммаДокумента", МассивСтрок[0].ЗначениеРеквизита);
		КонецЕсли;
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СуммаНДС"));
		Если МассивСтрок.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СуммаНДС", МассивСтрок[0].ЗначениеРеквизита);
		Иначе
			МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СумНДС"));
			Если МассивСтрок.Количество() > 0 Тогда
				СтруктураВозврата.Вставить("СуммаНДС", МассивСтрок[0].ЗначениеРеквизита);
			КонецЕсли;
		КонецЕсли;
		МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ВалютаКод"));
		Если МассивСтрок.Количество() > 0 Тогда
			ВалютаКод = МассивСтрок[0].ЗначениеРеквизита;
		Иначе
			МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ВалКод"));
			Если МассивСтрок.Количество() > 0 Тогда
				ВалютаКод = МассивСтрок[0].ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВалютаКод) Тогда
			СписокВалют = Новый Массив; 
			СписокВалют.Добавить(ВалютаКод);
			СсылкиНаВалюту = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(СписокВалют);
			Если ЗначениеЗаполнено(СсылкиНаВалюту) Тогда
				СтруктураВозврата.Вставить("Валюта", СсылкиНаВалюту[0]);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Формирует ЭД по подписанным документам ДО со статусом "Поставлен в очередь на отправку"
// 
// Возвращаемое значение:
//	Структура -- См. ОбменСКонтрагентамиДОСервер.СформироватьЭДПоГотовымДокументамДО()
Функция СформироватьЭДПоГотовымДокументамДО() Экспорт
	
	Возврат ОбменСКонтрагентамиДОСервер.СформироватьЭДПоГотовымДокументамДО();
	
КонецФункции

// Формирует внутренние документы ДО на основании входящих ЭД
// 
// Параметры:
//	ПараметрыСоздания - Структура - См. ОбменСКонтрагентамиДОСервер.СформироватьДокументыДОНаОснованииВходящихЭД()
// 
// Возвращаемое значение:
//	Структура -- См. ОбменСКонтрагентамиДОСервер.СформироватьДокументыДОНаОснованииВходящихЭД()
Функция СформироватьДокументыДОНаОснованииВходящихЭД(ПараметрыСоздания = Неопределено) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСервер.СформироватьДокументыДОНаОснованииВходящихЭД(ПараметрыСоздания);
	
КонецФункции

Функция ВернутьМассивФайловЭДПоДокументДО(СсылкаНаДокументДО) Экспорт
	
	ТаблицаФайловЭД =  ПолучитьФайлыЭлектронныхДокументов(СсылкаНаДокументДО);
	
	МассивФайловЭД = Новый Массив;
	Для Каждого СтрокаТЗ Из ТаблицаФайловЭД Цикл
		
		стСтрокаТаблицы = Новый Структура;
		Для Каждого ИмяКолонки Из ТаблицаФайловЭД.Колонки Цикл
			стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
		КонецЦикла;
		
		МассивФайловЭД.Добавить(стСтрокаТаблицы);
		
	КонецЦикла;
	
	Возврат МассивФайловЭД;
	
КонецФункции

Процедура ПодготовитьДокументККорректировке(Документ, Контрагент, НаправлениеЭДО, УдалитьЭП, ИдентификаторФормы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Объект,
		|	ЭлектронныеПодписи.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ЛОЖЬ КАК УстановитьНовуюВерсиюЭД
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО (ВнутренниеДокументы.Ссылка = (ВЫРАЗИТЬ(ЭлектронныеПодписи.Объект КАК Справочник.ВнутренниеДокументы)))
		|ГДЕ
		|	ВнутренниеДокументы.Ссылка = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка,
		|	ЭлектронныеПодписи.УникальныйИдентификатор,
		|	НЕ ЕСТЬNULL(СостоянияЭД.СсылкаНаОбъект, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ВерсииФайлов.Владелец = Файлы.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО (ВерсииФайлов.Ссылка = (ВЫРАЗИТЬ(ЭлектронныеПодписи.Объект КАК Справочник.ВерсииФайлов)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО ВерсииФайлов.Ссылка = СостоянияЭД.СсылкаНаОбъект
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ");
	Запрос.УстановитьПараметр("Документ", Документ);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Документ, , ИдентификаторФормы);
				
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда 
				Если УдалитьЭП Тогда
					РаботаСФайламиСлужебныйВызовСервера.УдалитьПодписиВерсииФайла(
						Выборка.Объект, 
						Выборка.УникальныйИдентификатор, 
						Ложь,
						ИдентификаторФормы);
				КонецЕсли;
					
				Если Выборка.УстановитьНовуюВерсиюЭД Тогда
					ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Выборка.Объект, , Истина);
				КонецЕсли;
			Иначе
				Если УдалитьЭП Тогда
					ЭлектроннаяПодпись.УдалитьПодпись(Выборка.Объект, Выборка.УникальныйИдентификатор, ИдентификаторФормы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		
		Для Каждого Сторона Из ДокументОбъект.Стороны Цикл
			Сторона.Подписан = Ложь;
			Сторона.ДатаПодписи = Неопределено;
			Сторона.Подписал = Неопределено;
		КонецЦикла;		
		
		ДокументОбъект.Записать();
		
		ОбменСКонтрагентамиДОВызовСервера.УстановитьСостояниеДокументаЭДО(
			Документ, Контрагент, Перечисления.СостоянияВерсийЭДДО.НеСформирован, НаправлениеЭДО);
		
		ЗафиксироватьТранзакцию();
		
		РазблокироватьДанныеДляРедактирования(Документ, ИдентификаторФормы);
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(Нстр("ru = 'При подготовке документа ""%1"" к корректировке произошла ошибка:
										|%2'"),
									Документ,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЭДО.Подготовка к документа к корректировке'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
		
КонецПроцедуры

Функция МожноОтклонитьЭтотЭД(СсылкаНаФайлЭД, ФормироватьУОУ = Ложь) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.МожноОтклонитьЭтотЭД(СсылкаНаФайлЭД, ФормироватьУОУ);
	
КонецФункции

Функция МожноАннулироватьЭтотЭД(Знач ЭлектронныйДокумент) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.МожноАннулироватьЭтотЭД(ЭлектронныйДокумент);
	
КонецФункции

Функция ДОЗакрытПринудительно(ДокументДО) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеЭДО = РегистрыСведений.СостояниеДокументовПоЭДО.ДанныеСостоянияДокументаПоЭДО(ДокументДО);
	Возврат СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;

КонецФункции

Функция ЭтоСчетФактура(ЭлектронныйДокумент) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.ЭтоСчетФактура(ЭлектронныйДокумент);
	
КонецФункции

Функция ПолучитьНаправлениеЭД(Документ) Экспорт
	
	СостояниеДокумента = ПолучитьСостояниеДокумента(Документ);
	Возврат ?(Не ЗначениеЗаполнено(СостояниеДокумента.Направление), 
		Перечисления.НаправленияЭД.Исходящий, 
		СостояниеДокумента.Направление);
	
КонецФункции

Функция ПоставитьДокументВОчередьНаОтправкуПоЭДО(
			Документ,
			КонтрагентыГотовыеКЭДО = Неопределено,
			НаправлениеЭД = Неопределено,
			ПроверятьПодписанДокумент = Истина,
			УстановитьСостояниеПодписан = Ложь,
			ВыводитьСообщение = Истина) Экспорт
		
	Возврат ОбменСКонтрагентамиДОСервер.ПоставитьДокументВОчередьНаОтправкуПоЭДО(
				Документ,
				КонтрагентыГотовыеКЭДО,
				НаправлениеЭД,
				ПроверятьПодписанДокумент,
				УстановитьСостояниеПодписан,
				ВыводитьСообщение);
		
КонецФункции

// Ставит документы в очередь на отправку документов ЭДО
// 
// Параметры:
//  МассивДокументов - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО,
//                     которые необходимо поставить в очередь на отправку
// 
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево - Указывает, успешно ли завершилась операция
//      * ПоставленныеВОчередь - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО
//                               поставленных в очередь
// 
Функция ПоставитьДокументыВОчередьНаОтправкуПоЭДО(МассивДокументов) Экспорт
	
	ПоставленныеВОчередь = Новый Массив;
	
	Для Каждого Документ Из МассивДокументов Цикл
		ПоставленВОчередь = ОбменСКонтрагентамиДОСервер.ПоставитьДокументВОчередьНаОтправкуПоЭДО(
				Документ,
				Неопределено,
				Перечисления.НаправленияЭД.Исходящий);
		
		Если ПоставленВОчередь Тогда
			ПоставленныеВОчередь.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", (МассивДокументов.Количество() = ПоставленныеВОчередь.Количество()));
	СтруктураВозврата.Вставить("ПоставленныеВОчередь", ПоставленныеВОчередь);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция АктуальныйФорматУПДСЧФДОП() Экспорт
	
	Возврат ОбменСКонтрагентамиДОСлужебный.АктуальныйФорматУПДСЧФДОП();
	
КонецФункции

Функция ПриоритетВидаЭлектронногоДокументаВНастройкахЭДО(ВидЭлектронногоДокумента) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСлужебный.ПриоритетВидаЭлектронногоДокументаВНастройкахЭДО(ВидЭлектронногоДокумента);
	
КонецФункции

Функция ПараметрыФорматаЭД(ВидЭлектронногоДокумента, ВерсияФорматаЭД) Экспорт

	Возврат ОбменСКонтрагентамиДОСлужебный.ПараметрыФорматаЭД(ВидЭлектронногоДокумента, ВерсияФорматаЭД);
	
КонецФункции

// Принудительно закрывает обмен ЭДО документов ДО
// 
// Параметры:
//  МассивДокументов - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО,
//                     которые необходимо закрыть принудительно
//  ПричинаЗакрытия - Строка - Описание причины закрытия документов.
// 
// Возвращаемое значение:
//  Структура:
//      * Ошибки - Массив из Строка - Описания ошибок, возникших в ходе выполнения операции
//      * ЗакрытыеДокументы - Массив из СправочникСсылка.ВнутренниеДокументы - Массив документов ДО
//                            закрытых принудительно в ходе выполнения операции
//      * КоличествоОбработанныхЭД - Число - Количество ЭД, принудительно закрытых в ходе выполнения операции
// 
Функция ЗакрытьДокументыПринудительно(ДокументыДО, ПричинаЗакрытия) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Ошибки", Новый Массив);
	СтруктураВозврата.Вставить("ЗакрытыеДокументы", Новый Массив);
	СтруктураВозврата.Вставить("КоличествоОбработанныхЭД", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК Документ,
		|	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО Файлы.ТекущаяВерсия = СостоянияЭД.СсылкаНаОбъект
		|ГДЕ
		|	Файлы.ВладелецФайла В(&ДокументыДО)
		|	И СостоянияЭД.СостояниеВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)";
	
	Запрос.УстановитьПараметр("ДокументыДО", ДокументыДО);
	
	ЭДДокументовДО = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Документ Из ДокументыДО Цикл
		
		ОбработаноЭДПоДокументу = 0;
		Успех = Истина;
		
		СтрокиЭД = ЭДДокументовДО.НайтиСтроки(Новый Структура("Документ", Документ));
		
		МассивЭД = Новый Массив;
		
		Для Каждого СтрокаЭД Из СтрокиЭД Цикл
			Если ЗначениеЗаполнено(СтрокаЭД.ЭлектронныйДокумент)
				И МассивЭД.Найти(СтрокаЭД.ЭлектронныйДокумент) = Неопределено Тогда
				
				МассивЭД.Добавить(СтрокаЭД.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			
			Если МассивЭД.Количество() > 0 Тогда
				ОбменСКонтрагентамиСлужебныйВызовСервера.ЗакрытьДокументыПринудительно(
					МассивЭД, ПричинаЗакрытия, ОбработаноЭДПоДокументу);
			КонецЕсли;
			
			СостояниеДокумента = РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента(
				Документ);
			
			Если СостояниеДокумента.Состояние <> Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно Тогда
				УстановитьСостояниеДокументаЭДО(
					Документ,
					СостояниеДокумента.Контрагент,
					Перечисления.СостоянияВерсийЭДДО.ЗакрытПринудительно,
					СостояниеДокумента.Направление,
					ПричинаЗакрытия);
			КонецЕсли;
			
			РегистрыСведений.ОшибкиЭДОКИсправлению.УдалитьЗаписьОбОшибке(Документ);
			РегистрыСведений.ОчередьОтправкиДокументовЭДО.УдалитьИзОчереди(Документ);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			СтруктураВозврата.Ошибки.Добавить(
				СтрШаблон(НСтр("ru = 'Не удалось принудительно закрыть обмен по ЭДО документа %1 по причине:'"),
						Документ)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Успех = Ложь;
			
		КонецПопытки;
		
		Если Успех Тогда
			СтруктураВозврата.КоличествоОбработанныхЭД = СтруктураВозврата.КоличествоОбработанныхЭД + 1;
			СтруктураВозврата.ЗакрытыеДокументы.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Ставит документы в очередь приема документов ЭДО
// 
// Параметры:
//  ЭД - Массив из ДокументСсылка.ЭлектронныйДокументВходящий - Массив ЭД, которые необходимо
//                                                              поставить в очередь приема
// 
// Возвращаемое значение:
//  Структура:
//      * Ошибки - Массив из Строка - Описания ошибок, возникших в ходе выполнения операции
//      * ПоставленныеВОчередь - Массив из ДокументСсылка.ЭлектронныйДокументВходящий - Массив ЭД
//                               поставленных в очередь
//      * ИзмененныеЭД - Массив из ДокументСсылка.ЭлектронныйДокументВходящий - Массив ЭД
//                               чей статус обмена был изменен
//      * ИзмененныеФайлыЭД - Массив из СправочникСсылка.ЭДПрисоединенныеФайлы - Массив файлов ЭД
//                               чей статус обмена был изменен
// 
Функция ПоставитьЭДВОчередьПриема(ЭД) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Ошибки", Новый Массив);
	СтруктураВозврата.Вставить("ПоставленныеВОчередь", Новый Массив);
	СтруктураВозврата.Вставить("ИзмененныеЭД", Новый Массив);
	СтруктураВозврата.Вставить("ИзмененныеФайлыЭД", Новый Массив);
	
	Если ТипЗнч(ЭД) = Тип("Массив") Тогда
		МассивЭД = ЭД;
	Иначе
		МассивЭД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭД);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящий.Ссылка КАК ЭД,
		|	ЭлектронныйДокументВходящий.СостояниеЭДО КАК СостояниеЭДО
		|ПОМЕСТИТЬ втЭДКПостановкеВОчередь
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|ГДЕ
		|	ЭлектронныйДокументВходящий.Ссылка В(&МассивЭД)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЭДКПостановкеВОчередь.ЭД КАК ЭД,
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ФайлЭД,
		|	втЭДКПостановкеВОчередь.СостояниеЭДО КАК СостояниеЭДО,
		|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД
		|ПОМЕСТИТЬ втЭДСФайламиПервичныхЭД
		|ИЗ
		|	втЭДКПостановкеВОчередь КАК втЭДКПостановкеВОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО втЭДКПостановкеВОчередь.ЭД = ЭДПрисоединенныеФайлы.ВладелецФайла
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыПервичныхЭД)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФайлЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЭДКПостановкеВОчередь.ЭД КАК ЭД
		|ИЗ
		|	втЭДКПостановкеВОчередь КАК втЭДКПостановкеВОчередь
		|ГДЕ
		|	втЭДКПостановкеВОчередь.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЭДСФайламиПервичныхЭД.ЭД КАК ЭД,
		|	втЭДСФайламиПервичныхЭД.ФайлЭД КАК ФайлЭД
		|ИЗ
		|	втЭДСФайламиПервичныхЭД КАК втЭДСФайламиПервичныхЭД
		|ГДЕ
		|	втЭДСФайламиПервичныхЭД.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОшибкаПередачи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЭДСФайламиПервичныхЭД.ЭД КАК ЭД,
		|	втЭДСФайламиПервичныхЭД.ФайлЭД КАК ФайлЭД
		|ИЗ
		|	втЭДСФайламиПервичныхЭД КАК втЭДСФайламиПервичныхЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПриемаСообщенийЭДО КАК ОчередьПриемаСообщенийЭДО
		|		ПО втЭДСФайламиПервичныхЭД.ФайлЭД = ОчередьПриемаСообщенийЭДО.ЭДПрисоединенныйФайл
		|ГДЕ
		|	втЭДСФайламиПервичныхЭД.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОшибкаПередачи)
		|	И ЕСТЬNULL(ОчередьПриемаСообщенийЭДО.КоличествоПопытокОбработки, 3) > 2";
	
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("ТипыПервичныхЭД", ОбменСКонтрагентамиСлужебный.ТипыПервичныхЭД());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЭДКИзменениюСостояния = МассивРезультатов[МассивРезультатов.Количество() - 3].Выгрузить();
	ТаблицаФайловЭДКИзменениюСтатуса = МассивРезультатов[МассивРезультатов.Количество() - 2].Выгрузить();
	ТаблицаФайловЭДКДобавлениюВОчередь = МассивРезультатов[МассивРезультатов.Количество() - 1].Выгрузить();
	
	Для Каждого ЭД Из МассивЭД Цикл
		ПоставленныеВОчередь = Новый Массив;
		ИзмененныеЭД = Новый Массив;
		ИзмененныеФайлыЭД = Новый Массив;
		Успех = Истина;
		
		НачатьТранзакцию();
		Попытка
			
			ОтборСтрок = Новый Структура("ЭД", ЭД);
			
			СтрокиЭДКИзменениюСостояния = ТаблицаЭДКИзменениюСостояния.НайтиСтроки(ОтборСтрок);
			
			Для Каждого СтрокаКИзменениюСостояния Из СтрокиЭДКИзменениюСостояния Цикл
				ДокументОбъект = СтрокаКИзменениюСостояния.ЭД.ПолучитьОбъект();
				ДокументОбъект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаУтверждении;
				ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
				
				ДокументОбъект.Записать();
				
				ИзмененныеЭД.Добавить(СтрокаКИзменениюСостояния.ЭД);
			КонецЦикла;
			
			СтрокиКИзменениюСтатуса = ТаблицаФайловЭДКИзменениюСтатуса.НайтиСтроки(ОтборСтрок);
			
			Для Каждого СтрокаКИзменениюСтатуса Из СтрокиКИзменениюСтатуса Цикл
				ФайлОбъект = СтрокаКИзменениюСтатуса.ФайлЭД.ПолучитьОбъект();
				ФайлОбъект.СтатусЭД = Перечисления.СтатусыЭД.Получен;
				ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
				ФайлОбъект.ДополнительныеСвойства.Вставить("ПринудительнаяСменаСостоянияВерсии", Истина);
				
				ФайлОбъект.Записать();
				
				ПоставленныеВОчередь.Добавить(СтрокаКИзменениюСтатуса.ФайлЭД);
				ИзмененныеФайлыЭД.Добавить(СтрокаКИзменениюСтатуса.ФайлЭД);
			КонецЦикла;
			
			СтрокиКДобавлениюВОчередь = ТаблицаФайловЭДКДобавлениюВОчередь.НайтиСтроки(ОтборСтрок);
			
			Для Каждого СтрокаКДобабавлениюВОчередь Из СтрокиКДобавлениюВОчередь Цикл
				РегистрыСведений.ОчередьПриемаСообщенийЭДО.ДобавитьЗапись(СтрокаКДобабавлениюВОчередь.ФайлЭД);
				
				ПоставленныеВОчередь.Добавить(СтрокаКИзменениюСтатуса.ФайлЭД);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			СтруктураВозврата.Ошибки.Добавить(
				СтрШаблон(НСтр("ru = 'Не удалось поставить ЭД %1 в очередь на прием по причине:'"),
					ЭД)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Успех = Ложь;
		КонецПопытки;
		
		Если Успех Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.ПоставленныеВОчередь, ПоставленныеВОчередь);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.ИзмененныеФайлыЭД, ИзмененныеФайлыЭД);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.ИзмененныеЭД, ИзмененныеЭД);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет процедуры по учету аннулирования ЭДО в 1С:ДО
// 
// Параметры:
//   Документ - СправочникСсылка.ВнутренниеДокументы - Документ ДО по которому инициировано аннулирование
//   ПараметрыАннулирования - Структура из:
//       * ВидДокумента - СправочникСсылка.ВидыВнутреннихДокументов - Вид документа,
//                                             по которому инициировано аннулирование
//       * Направление - Перечисление.НаправленияЭД - Направление аннулирования,
//                                Исходящий - аннулирование инициировано нами
//                                Входящий - аннулирование инициировано контрагентом
//       * УчитыватьНедействующиеДокументы - Булево - Поддерживает ли вид документов учет недействительных документов
//       * ВариантУказанияОтменяющегоДокумента - Перечисление.ВариантыУказанияОтменяющегоДокумента -
//                                               Вариант указания отменяющего документа в виде документа
//       * ОбязательноУказаниеОтменяющегоДокумента - Булево - Обязательно ли указание отменяющего документа
//       * АннулироватьОтдельнымДокументом - Булево - Для аннулирования необходим новый документ ДО
//       * ПараметрыДокументаАннулирования - Структура из:
//           * ВидДокументаАннулирования - СправочникСсылка.ВидыВнутреннихДокументов - Вид документа,
//                                            которым учитывается аннулирование ЭДО
//           * ВопросДеятельности - СправочникСсылка.ВопросыДеятельности - Вопрос деятельности документа аннулирования
//           * Ответственный - СправочникСсылка.Пользователи - Ответственный документа аннулирования
//           * Папка - СправочникСсылка.ПапкиВнутреннихДокументов - Папка документа аннулирования
//           * ШаблонНаименования - Строка - Шаблон наименования для создаваемого документа
//           * ШаблонСодержания - Строка - Шаблон содержания для создаваемого документа
// 
Функция ОбработатьАннулирование(Документ, ПараметрыАннулирования) Экспорт
	
	Если Не ПараметрыАннулирования.АннулироватьОтдельнымДокументом Тогда
		
		РегистрыСведений.ДокументыАннулирования.ЗаписатьСведенияОбАннулировании(
			Документ,
			ЭДДокументаДО(Документ),
			Документ);
		
	Иначе
		
		// Сначала запишем в РС пустой документ аннулирования для того, чтобы обозначить, что аннулирование инициировано
		РегистрыСведений.ДокументыАннулирования.ЗаписатьСведенияОбАннулировании(
			Документ,
			ЭДДокументаДО(Документ),
			Неопределено);
		
		ЭД = ЭДДокументаДО(Документ);
		
		НачатьТранзакцию();
		Попытка
			
			Результат = ОбменСКонтрагентамиДОСервер.СоздатьДокументАннулирования(
				Документ, ЭД, ПараметрыАннулирования.ПараметрыДокументаАннулирования);
			
			РегистрыСведений.ДокументыАннулирования.ЗаписатьСведенияОбАннулировании(
				Документ, ЭД, Результат.Документ, Результат.Файл);
			
			ОбменСКонтрагентамиДОСервер.ЗаписатьСтатусЭДОДокументаАннулирования(
				ОбменСКонтрагентамиДОСервер.ФайлЭДАннулированияДокумента(ЭД));
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ВызватьИсключение
				СтрШаблон(НСтр("ru = 'Не удалось создать аннулирование документа %1 по причине:'"),
					Документ)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

// Возвращает аннулируемый документ по документу аннулирования
// 
// Параметры:
//  ДокументАннулирования - СправочникСсылка.ВнутренниеДокументы - Документ аннулирования
// 
// ВозвращаемоеЗначение:
//  СправочникСсылка.ВнутренниеДокументы, Неопределено - В случае, если переданный документ
//                          является документом аннулирования, то возвращается аннулируемый документ.
//                          Неопределено - в противном случае.
Функция АннулируемыйДокумент(ДокументАннулирования) Экспорт
	
	ДанныеАннулирования = Новый Структура;
	
	ЭтоАннулирование = ОбменСКонтрагентамиДОСлужебный.ЭтоДокументАннулированияЭДО(
		ДокументАннулирования, ДанныеАннулирования);
	
	Если Не ЭтоАннулирование Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеАннулирования.Документ;
	
КонецФункции

// Возвращает данные о запущенных процессах аннулирвоания
// 
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - Документ, для которого необходимо получить данные
//                                                    по запущеннып процессам аннулированияЭДО
// 
// Возвращаемое значение:
//  Структура из:
//      * ЗапущеноАннулирование - Булево - Указывает, запущено ли аннулирование по документу
//      * АннулированиеЗавершено - Булево - Указывает, завершен ли процесс аннулирования по документу
//      * ДокументАннулирован - Булево - Указывает, аннулирован ли документ
//      * ТребуетсяСоздатьДокумент - Булево - Указывает, необходимо ли создать документ аннулирования
//      * АннулируетсяОтдельнымДокументом - Булево - Указывает, запущено ли аннулирование отдельным документом
//      * Направление - Перечисление.НаправленияЭД - Направление аннулирования
//      * ФайлЭДАннулирования - СправочникСсылка.ЭДПрисоединенныеФайлы - Файл ЭД аннулирования
//      * ДокументАннулирования - СправочникСсылка.ВнутренниеДокументы - Документ аннулирования
Функция ЗапущенныеПроцессыАннулированияДокумента(Документ) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗапущеноАннулирование", Ложь);
	СтруктураВозврата.Вставить("АннулированиеЗавершено", Ложь);
	СтруктураВозврата.Вставить("ДокументАннулирован", Ложь);
	СтруктураВозврата.Вставить("ТребуетсяСоздатьДокумент", Ложь);
	СтруктураВозврата.Вставить("АннулируетсяОтдельнымДокументом", Ложь);
	СтруктураВозврата.Вставить("Направление", Перечисления.НаправленияЭД.ПустаяСсылка());
	СтруктураВозврата.Вставить("ФайлЭДАннулирования", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
	СтруктураВозврата.Вставить("ДокументАннулирования", Справочники.ВнутренниеДокументы.ПустаяСсылка());
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыАннулирования.СоглашениеОбАннулировании КАК СоглашениеОбАннулировании,
		|	ДокументыАннулирования.ЭД КАК ЭД
		|ПОМЕСТИТЬ ДанныеАннулирования
		|ИЗ
		|	РегистрСведений.ДокументыАннулирования КАК ДокументыАннулирования
		|ГДЕ
		|	ДокументыАннулирования.Документ = &Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеАннулирования.СоглашениеОбАннулировании КАК СоглашениеОбАннулировании,
		|	ДанныеАннулирования.ЭД КАК ЭД,
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ФайлЭДАннулирования,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД
		|ИЗ
		|	ДанныеАннулирования КАК ДанныеАннулирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО ДанныеАннулирования.ЭД = ЭДПрисоединенныеФайлы.ВладелецФайла
		|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА))";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.ЗапущеноАннулирование = Истина;
	СтруктураВозврата.ФайлЭДАннулирования = Выборка.ФайлЭДАннулирования;
	СтруктураВозврата.Направление = Выборка.НаправлениеЭД;
	
	СтруктураВозврата.АннулированиеЗавершено =
		(Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
			И (Выборка.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение
			ИЛИ Выборка.СтатусЭД = Перечисления.СтатусыЭД.Отклонен))
		ИЛИ
		(Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И (Выборка.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение
			ИЛИ Выборка.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем));
	
	СтруктураВозврата.ДокументАннулирован =
		(Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
			И Выборка.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение)
		ИЛИ
		(Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И Выборка.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение);
	
	СтруктураВозврата.АннулируетсяОтдельнымДокументом =
		(Выборка.СоглашениеОбАннулировании <> Документ);
	
	Если ЗначениеЗаполнено(Выборка.СоглашениеОбАннулировании) Тогда
		СтруктураВозврата.ДокументАннулирования = Выборка.СоглашениеОбАннулировании;
	Иначе
		СтруктураВозврата.ТребуетсяСоздатьДокумент = Истина;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции


#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоЧтенияЭД(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("СсылкаНаМассивОтпечатков") И ЗначениеЗаполнено(Параметры.СсылкаНаМассивОтпечатков) Тогда
		СсылкаНаМассивОтпечатков = Параметры.СсылкаНаМассивОтпечатков;
	КонецЕсли;
	
	Если Параметры.Свойство("Объект") И ЗначениеЗаполнено(Параметры.Объект) Тогда
		ОбъектДокументооборот = Параметры.Объект;
		Элементы.ОбъектДокументооборот.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ВерсияОбъекта") И ЗначениеЗаполнено(Параметры.ВерсияОбъекта) Тогда
		Если Не ЗначениеЗаполнено(ОбъектДокументооборот) Тогда
			ОбъектДокументооборот = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ВерсияОбъекта, "Владелец.ВладелецФайла");
		КонецЕсли;
		Элементы.ОбъектДокументооборот.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ИдентификаторФормыВладельца") Тогда
		ИдентификаторФормыВладельца = Параметры.ИдентификаторФормыВладельца;
	КонецЕсли;
	
	Если Не Элементы.ОбъектДокументооборот.Видимость И Не ЗначениеЗаполнено(ОбъектДокументооборот) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоПодчиненныеЭДНаСервере();
	
	ЗагрузитьДанныеИзНастроекНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(СсылкаНаМассивОтпечатков) Тогда
		Описание = Новый ОписаниеОповещения("ПослеПолученияОтпечатков", ЭтотОбъект);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Описание, Истина, Ложь);
	Иначе
		ВывестиТабличныйДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
				
		ОбработатьОбновлениеСостоянияЭД();
		
	ИначеЕсли ИмяСобытия = "ПроведенаПроверкаЭП" Тогда
		
		ДоступныеОтпечатки = Неопределено; 
		ЗаполнитьТаблицуЭП(Параметр.Отпечатки, ДоступныеОтпечатки);
		Для Каждого ЭД Из Параметр.МассивЭД Цикл
			Если ЭД = ПрисоединенныйФайлСсылка Тогда
				ОбновитьОтображениеДанных();
				ТекущаяСтрока = Элементы.ТаблицаЭП.ТекущиеДанные;
				ЗаполнитьТаблицуЭП();
				Если ТекущаяСтрока <> Неопределено Тогда
					Элементы.ТаблицаЭП.ТекущаяСтрока = ТаблицаЭП[ТекущаяСтрока.НомерСтроки-1].ПолучитьИдентификатор();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ИДПараметра = "ЭлектронноеВзаимодействие." + УникальныйИдентификатор;
	ПараметрыФормы = ПараметрыПриложения[ИДПараметра];
	Если ПараметрыФормы <> Неопределено Тогда
		ПараметрыПриложения.Удалить(ИДПараметра);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектДокументооборотПриИзменении(Элемент)
	
	ЗаполнитьДеревоПодчиненныеЭДНаСервере();
	
	Если ДеревоПодчиненныеЭД.ПолучитьЭлементы().Количество() Тогда
		ПодключитьОбработчикОжидания("ВывестиТабличныйДокумент", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОтклоненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.ПричинаОтклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОшибкаФормированияПредставленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтборЖурналаРегистрации = Новый Структура;
		ОтборЖурналаРегистрации.Вставить("Данные", ПрисоединенныйФайлСсылка);
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЭП

&НаКлиенте
Процедура ЭПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке Тогда
		ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандРаботыСЭД

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОтклонитьАннулироватьДО(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытийЭДО(Команда)
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Если ТекущаяСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор, РежимОткрытияОкна", 
		Новый Структура("ДокументДО", ТекущаяСтрокаДерева.ДокументДО),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ОткрытьФорму(
		"РегистрСведений.СостояниеДокументовПоЭДО.ФормаСписка", 
		ПараметрыФормы, 
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если ТаблицаЭП.Количество() > 0 Тогда
		Если Элементы.ТаблицаЭП.ТекущиеДанные <> Неопределено Тогда
			ПоказатьСертификат(Элементы.ТаблицаЭП.ТекущиеДанные.НомерСтроки, Элементы.ТаблицаЭП.ТекущиеДанные.Отпечаток);
		Иначе
			ОчиститьСообщения();
			ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		ВторойТитул = ВторойТитулДокумента(ПрисоединенныйФайлСсылка);
		Если ЗначениеЗаполнено(ВторойТитул) Тогда
			ОбменСКонтрагентамиСлужебныйКлиент.ОпределитьСтатусыПодписей(ВторойТитул);
		КонецЕсли;
		ОбменСКонтрагентамиСлужебныйКлиент.ОпределитьСтатусыПодписей(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументЭДО(Команда)
	
	ПодписатьЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьДокументЭДО(Команда)
	
	СвойстваФайлаЭД = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	Если СвойстваФайлаЭД.ТребуетсяПодтверждение Тогда
		ПодписатьЭДО();
	Иначе
		УтвердитьЭДО();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЭД(Команда)
	
	ОтклонитьАннулироватьДО()
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	ОтклонитьАннулирование = Ложь;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОтклонитьАннулирование = Истина;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Если ТекущаяСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрокаДерева.ДополнительнаяИнформация) Тогда
		
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", "");
		ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
		
		СопроводительнаяЗаписка = "";
		
		ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		ТекущаяСтрокаДерева.ДополнительнаяИнформация = СопроводительнаяЗаписка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЭДОПродолжить", ЭтотОбъект);
	ВводСтрокиЗаголовок = НСтр("ru = 'Укажите причины завершения документооборота'");
	ПоказатьВводСтроки(Оповещение, , ВводСтрокиЗаголовок, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьБанковскиеРеквизиты(Команда)
	
	ВыводитьБанковскиеРеквизиты = Не ВыводитьБанковскиеРеквизиты;
	Элементы.КомандаОтображатьБанковскиеРеквизиты.Пометка = ВыводитьБанковскиеРеквизиты;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыОтраженияВУчете

&НаКлиенте
Процедура ОткрытьНастройкуЭДО(Команда)
	
	ОткрытьНастройкуОтраженияВУчете();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Если ПустаяСтрока(Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Описание", Комментарий);
	ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
	Комментарий = "";
	
	ПерезаполнитьКомментарии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДерево(Команда)
	
	ОтключитьВыводДерева = Не ОтключитьВыводДерева;
	Элементы.КомандаОтображатьДерево.Пометка = Не ОтключитьВыводДерева;
	Элементы.ДеревоПодчиненныеЭД.Видимость = Не ОтключитьВыводДерева;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСЭлектроннымДокументом

&НаКлиенте
Процедура ОбновитьСостояниеЭД()
		
	Оповестить("ОбновитьСостояниеЭД", Новый Структура);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗначенияРеквизитовНаСервере(Знач Ссылка, Знач СтруктураПараметров)
	
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Ссылка, СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКомментарии()
	
	ВсеКомментарии = "";
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЖурналСобытийЭД.Пользователь.Представление КАК Пользователь,
		|	ЖурналСобытийЭД.Дата КАК Дата,
		|	ЖурналСобытийЭД.СтатусЭД,
		|	ЖурналСобытийЭД.Ответственный.Представление КАК Ответственный,
		|	ЖурналСобытийЭД.Комментарий
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &Ссылка
		|	И ЖурналСобытийЭД.Комментарий <> &ПустаяСтрока
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.УстановитьПараметр("Ссылка", ПрисоединенныйФайлСсылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка = Результат.Выбрать();
	ШаблонКомментария = НСтр("ru = '%1, %2 (статус - %3, ответственный - %4):
		|%5'");
	ПредыдущийКомментарий = "";
	ПервыйКомментарий = Истина;
	Массив = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ТекущийКомментарий = СокрЛП(Выборка.Комментарий);
		Если ПредыдущийКомментарий = ТекущийКомментарий Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущийКомментарий = ТекущийКомментарий;
		СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
				Выборка.Дата, Выборка.Пользователь, Выборка.СтатусЭД, Выборка.Ответственный, ТекущийКомментарий);
		Массив.Добавить(СтрокаКомментария);
		ПервыйКомментарий = Ложь;
	КонецЦикла;
	Если Массив.Количество() > 0 Тогда
		ПервыйКомментарий = Истина;
		Для Сч = -Массив.Количество() + 1 По 0 Цикл
			СтрокаКомментария = Массив[-Сч];
			ВсеКомментарии = ВсеКомментарии
				+ СтрокаКомментария
				+ ?(ПервыйКомментарий, Символы.ПС + "------------------------------------", "")
				+ Символы.ПС
				+ Символы.ПС;
			ПервыйКомментарий = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьДоступность()
	
	ИзменитьВидимостьДоступностьНаСервере();
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	
	Если СтрокиДерева.Количество() > 0 Тогда
		Элементы.ДеревоПодчиненныеЭД.Развернуть(СтрокиДерева[0].ПолучитьИдентификатор(),Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВернаПредставление = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВернаПредставление = НСтр("ru = 'Не проверена'");
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	
	СтруктураСертификата = ОбменСКонтрагентамиСлужебныйВызовСервера.СвойстваСертификата(АдресДанныхСертификата);
	
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
		ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭДОАннулированИлиВПроцессе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Аннулирован
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
	|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &ЭД
	|	И ВЫБОР
	|			КОГДА ЭДВладелецЭД.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовСАннулированием)
	|			ИНАЧЕ ЭДВладелецЭД.СтатусЭД В (&СписокСтатусовСАннулированием)
	|		КОНЕЦ";
		
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
	Запрос.УстановитьПараметр("СписокСтатусовСАннулированием", МассивСостояний);
	Запрос.УстановитьПараметр("ЭД", ПрисоединенныйФайлСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	СсылкаНаЭД = ПолучитьЭлектронныйДокументВладелец();
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(СсылкаНаЭД, ОтклонитьАннулирование);
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭлектронныйДокументВладелец()
	
	СсылкаНаЭД = Неопределено;
	
	ДокументВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайлСсылка, "ЭлектронныйДокументВладелец");
	
	Если ЗначениеЗаполнено(ДокументВладелец) Тогда
		СсылкаНаЭД = ДокументВладелец;
	Иначе
		СсылкаНаЭД = ПрисоединенныйФайлСсылка;
	КонецЕсли;
	
	Возврат СсылкаНаЭД;
	
КонецФункции

&НаКлиенте
Процедура ОтклонитьАннулироватьДО(Отклонить = Ложь)
	
	СвойстваФайлаЭД = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтклонитьАннулироватьДОПродолжить", 
		ЭтотОбъект, 
		Новый Структура("Объект", СвойстваФайлаЭД.ДокументДО));
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Организация", 
		ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(СвойстваФайлаЭД.ДокументДО, "Организация"));
	ПараметрыОбработчика.Вставить("Отклонить", Отклонить);
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			
	ОбменСКонтрагентамиДОСлужебныйКлиент.ОбработатьОтклонениеАннулированиеДокументаДО(
		СвойстваФайлаЭД.ДокументДО, 
		ПараметрыОбработчика);
	
КонецПроцедуры

&НаСервере
Функция АннулированиеОтклонено()
	
	Результат = Ложь;
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева[0].ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И (СтрокаДерева.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
				ИЛИ СтрокаДерева.СтатусЭД = Перечисления.СтатусыЭД.Отклонен) Тогда
			
			Результат = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗавершитьЭДОСервере(Результат)
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Если ТекущаяСтрокаДерева = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрокаДерева.Ссылка) 
			Или Не ТипЗнч(ТекущаяСтрокаДерева.Ссылка) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		Возврат;
	КонецЕсли;
	
	ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрокаДерева.Ссылка, "ВладелецФайла");
	Если Не ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") 
			И Не ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
			
		Возврат;
	КонецЕсли;
	НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	
	ИзменяемыеДокументы = Новый Массив;
	ИзменяемыеДокументы.Добавить(ВладелецЭД);
	
	ПараметрыЭД = Новый Структура;
	
	Если ПрисоединенныйФайлСсылка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
	Иначе
		СтатусЭД = Перечисления.СтатусыЭД.Доставлен;
	КонецЕсли;
		
	ПараметрыЭД.Вставить("СтатусЭД", СтатусЭД);
	ПараметрыЭД.Вставить("Описание", Результат);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайлСсылка, ПараметрыЭД, Ложь);
	
	ОбменСКонтрагентамиСлужебный.ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ЗавершитьЭДОПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьЭДОСервере(Результат);
	
	ОбновитьСостояниеЭД();

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатков(Отпечатки, Параметры = Неопределено) Экспорт
	
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаМассивОтпечатков) Тогда
		МассивОтпечатковСервера = ПолучитьИзВременногоХранилища(СсылкаНаМассивОтпечатков);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатков, МассивОтпечатковСервера, Истина);
	КонецЕсли;
	
	СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(МассивОтпечатков, УникальныйИдентификатор);
	
	ВывестиТабличныйДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументЗавершение(Результат, Параметры) Экспорт
	
	РаботаСЭПКлиент.ПослеПодписанияОбъекта(Результат, Параметры);
	
	Если Параметры.НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий") Тогда
		ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьЭДНаСторонеПолучателяЗавершение",
			ЭтотОбъект, Параметры);
		ОбменСКонтрагентамиДОСлужебныйКлиент.ПодписатьЭДНаСторонеПолучателя(Параметры.Объект,
			ОбработчикЗавершения);
		
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПодписатьЭД") И Параметры.ПодписатьЭД Тогда
		Текст = НСтр("ru = 'Документ поставлен в очередь на отправку контрагентам по ЭДО.'");
		Состояние(Текст, , , БиблиотекаКартинок.ЭмблемаСервиса1СЭДО);
	КонецЕсли;
	
	Оповестить("ОбъектПодписан", Параметры.Объект);
	Оповестить("ОбновитьСостояниеЭД", Параметры.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭДНаСторонеПолучателяЗавершение(Результат, Параметры) Экспорт
	
	Текст = НСтр("ru = 'Документ поставлен в очередь на отправку контрагентам по ЭДО.'");
	Состояние(Текст, , , БиблиотекаКартинок.ЭмблемаСервиса1СЭДО);
	
	Оповестить("ОбъектПодписан", Параметры.Объект);
	Оповестить("ОбновитьСостояниеЭД", Параметры.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭДО()
	
	СвойстваФайлаЭД = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объект", СвойстваФайлаЭД.ДокументДО);
	ПараметрыОбработчика.Вставить("НаправлениеЭД", СвойстваФайлаЭД.НаправлениеЭД);
	ОбработчикЗавершения = Новый ОписаниеОповещения("УтвердитьЭДОЗавершение",
		ЭтотОбъект, ПараметрыОбработчика);
	
	ОбменСКонтрагентамиДОСлужебныйКлиент.УтвердитьЭД(ПараметрыОбработчика.Объект, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭДОЗавершение(Результат, Параметры) Экспорт
	
	Текст = НСтр("ru = 'Документ утвержден.'");
	Состояние(Текст, , , БиблиотекаКартинок.ЭмблемаСервиса1СЭДО);
	
	Оповестить("ОбновитьСостояниеЭД", Параметры.Объект);
	
КонецПроцедуры


&НаКлиенте
Процедура ОтклонитьАннулироватьДОПродолжить(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		Оповестить("ОбновитьСостояниеЭД", Параметры.Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВывестиТабличныйДокумент() Экспорт
	
	ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере();
	ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента();
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодчиненныеЭДПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ДеревоПодчиненныеЭДПослеАктивизацииСтроки",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодчиненныеЭДПослеАктивизацииСтроки()
	
	ИдентификаторСтрокиДерева = Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока;
	ДанныеДереваПодчиненныхЭД = Элементы.ДеревоПодчиненныеЭД.ТекущиеДанные;
	Если ДанныеДереваПодчиненныхЭД = Неопределено 
		ИЛИ ИдентификаторСтрокиДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторСтрокиДерева <> ИдентификаторТекущейСтроки Тогда
		ИдентификаторТекущейСтроки = ИдентификаторСтрокиДерева;
		ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере();
		ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере()
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	ПрисоединенныйФайлСсылка = ТекущаяСтрокаДерева.Ссылка;
	Заголовок = ТекущаяСтрокаДерева.ДокументДО;
	
	ЗаполнитьТаблицуЭП();
	
	ПоказатьПредставлениеФайлаЭлектронногоДокумента(ТекущаяСтрокаДерева, Ложь);
	
	ИзменитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаЭП = ТаблицаЭП.Получить(Расшифровка - 1);
	
	Если СтрокаЭП <> Неопределено И НЕ СтрокаЭП.ОтсутствуетВСписке Тогда
		ПоказатьСертификат(СтрокаЭП.НомерСтроки, СтрокаЭП.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();


	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭПСтатус.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭП.ПодписьВерна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));


	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтрокаДоступна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);


	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСостояниеЭД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Получен);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Отправлен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Доставлен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Доставлен);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Получен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ВидЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора4 = ГруппаОтбора3.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора4.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.НаправлениеЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияЭД.Входящий;


	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЭД.Утвержден;


	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);

	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДПредставление.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСостояниеЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.АктуальныйЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина, Ложь, Ложь, Ложь, ));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПодчиненныеЭДНаСервере()
	
	ДеревоПодчиненныеЭД.ПолучитьЭлементы().Очистить();
	
	СформироватьДеревоДокументов();
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() Тогда
	
		ПрисоединенныйФайлСсылка = СтрокиДерева[0].Ссылка;	
			
		Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока = СтрокиДерева[0].ПолучитьИдентификатор();
		
		ОтключитьВыводДерева = Не СтрокиДерева[0].ПолучитьЭлементы().Количество();
		Элементы.КомандаОтображатьДерево.Видимость = Не ОтключитьВыводДерева;
		Элементы.КомандаОтображатьДерево.Пометка = Не ОтключитьВыводДерева;
		Элементы.ДеревоПодчиненныеЭД.Видимость = Не ОтключитьВыводДерева;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПредставлениеФайлаЭлектронногоДокумента(ТекущаяСтрокаДерева = Неопределено, ПовторноеИспользование = Истина)
	
	Если ТекущаяСтрокаДерева = Неопределено Тогда
		ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	КонецЕсли;
	
	Если ТекущаяСтрокаДерева.ИмяРеквизита = "ПрисоединенныйФайл" Тогда
		ОбновитьДанныеОВложении(ТекущаяСтрокаДерева);
		Элементы.СтраницыЭД.ТекущаяСтраница = Элементы.СтраницаПрисоединенныйФайл;
		
		Возврат;		
	ИначеЕсли ПовторноеИспользование И ЗначениеЗаполнено(ТекущаяСтрокаДерева.ИмяРеквизита)
		И ЭтотОбъект[ТекущаяСтрокаДерева.ИмяРеквизита].ВысотаТаблицы > 0 Тогда
		Элементы.СтраницыЭД.ТекущаяСтраница = Элементы["Страница" + ТекущаяСтрокаДерева.ИмяРеквизита];
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		
		СсылкаНаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайлСсылка,
			"ВладелецФайла");
		
		СвойстваЭлектронногоДокумента = Новый Структура;
		СвойстваЭлектронногоДокумента.Вставить("Ссылка",                 СсылкаНаЭД);
		СвойстваЭлектронногоДокумента.Вставить("ВидЭД",                  ТекущаяСтрокаДерева.ВидЭД);
		СвойстваЭлектронногоДокумента.Вставить("ПрикладнойВидЭД",        Неопределено);
		СвойстваЭлектронногоДокумента.Вставить("ТипЭлементаВерсииЭД",    ТекущаяСтрокаДерева.ТипЭД);
		СвойстваЭлектронногоДокумента.Вставить("ТребуетсяПодтверждение", ТекущаяСтрокаДерева.ТребуетсяПодтверждение);
		
		СвойстваФайлаЭлектронногоДокумента = Новый Структура;
		СвойстваФайлаЭлектронногоДокумента.Вставить("Ссылка",              ТекущаяСтрокаДерева.Ссылка);
		СвойстваФайлаЭлектронногоДокумента.Вставить("СтатусЭД",            ТекущаяСтрокаДерева.СтатусЭД);
		СвойстваФайлаЭлектронногоДокумента.Вставить("НаправлениеЭД",       ТекущаяСтрокаДерева.НаправлениеЭД);
		СвойстваФайлаЭлектронногоДокумента.Вставить("ТипЭлементаВерсииЭД", ТекущаяСтрокаДерева.ТипЭД);
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("СкрыватьДопДанные",                  ОтключитьВыводДопДанных);
		ПараметрыЗадания.Вставить("СкрыватьКопияВерна",                 ОтключитьВыводКопияВерна);
		ПараметрыЗадания.Вставить("ВыводитьБанковскиеРеквизиты", 		ВыводитьБанковскиеРеквизиты);		
		ПараметрыЗадания.Вставить("УникальныйИдентификатор",            УникальныйИдентификатор);
		ПараметрыЗадания.Вставить("СвойстваЭлектронногоДокумента",      СвойстваЭлектронногоДокумента);
		ПараметрыЗадания.Вставить("СвойстваФайлаЭлектронногоДокумента", СвойстваФайлаЭлектронногоДокумента);
		
		Если ПараметрыПроизвольногоДокумента <> Неопределено
			И ТекущаяСтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
			ПараметрыЗадания.Вставить("ПараметрыПроизвольногоДокумента", ПараметрыПроизвольногоДокумента);
		КонецЕсли;
		
		ДлительнаяОперация = ОбменСКонтрагентамиСлужебный.ЗапуститьФормированиеПредставленияФайлаЭлектронногоДокумента(
			ПараметрыЗадания, УникальныйИдентификатор);
		
		ПроверитьФормированиеПредставленияФайлаЭлектронногоДокумента(ДлительнаяОперация, ТекущаяСтрокаДерева);
		
	Иначе
		
		// Новые документы, по которым еще не созданы ЭД обрабатываем особым образом.
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ТекущаяСтрокаДерева.СсылкаНаДвоичныеДанныеФайла);
		ДвоичныеДанныеФайла.Записать(ИмяФайла);
		
		СтруктураПодписей = Новый Структура();
		ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(ТекущаяСтрокаДерева.Версия);
		СтруктураПодписей.Вставить("Подписи", ЭлектронныеПодписиЭД);
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ИмяФайла", ИмяФайла);
		ПараметрыЗадания.Вставить("НаправлениеЭД", ТекущаяСтрокаДерева.НаправлениеЭД);
		ПараметрыЗадания.Вставить("ИД", УникальныйИдентификатор);
		ПараметрыЗадания.Вставить("ИмяФайлаПодчиненногоЭД", "");
		ПараметрыЗадания.Вставить("СтруктураПодписей", СтруктураПодписей);
		ПараметрыЗадания.Вставить("ИмяФайлаДопДанных", "");
		ПараметрыЗадания.Вставить("СкрыватьИдентификаторДокумента", Ложь);
		ПараметрыЗадания.Вставить("СкрыватьДопДанные", ОтключитьВыводДопДанных);
		ПараметрыЗадания.Вставить("СкрыватьКопияВерна", ОтключитьВыводКопияВерна);
		ПараметрыЗадания.Вставить("ВыводитьБанковскиеРеквизиты", ВыводитьБанковскиеРеквизиты);
		
		ДлительнаяОперация = ОбменСКонтрагентамиДОСлужебный.ЗапуститьФормированиеПредставленияФайлаЭлектронногоДокумента(
			ПараметрыЗадания, УникальныйИдентификатор);
		
		ПроверитьФормированиеПредставленияФайлаЭлектронногоДокумента(ДлительнаяОперация, ТекущаяСтрокаДерева);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВывестиПредставлениеФайлаЭлектронногоДокумента(Знач Результат)
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	ПроверитьФормированиеПредставленияФайлаЭлектронногоДокумента(Результат, ТекущаяСтрокаДерева)
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормированиеПредставленияФайлаЭлектронногоДокумента(ДлительнаяОперация, ТекущаяСтрокаДерева)
	
	Элементы.ДеревоПодчиненныеЭД.Доступность = Истина;
	
	Если ДлительнаяОперация = Неопределено Тогда
		СменитьСтраницуЭД(Элементы, Элементы.СтраницаОшибкаФормированияПредставления);
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если РезультатВыполнения = Неопределено Тогда
			Если ТекущаяСтрокаДерева.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
				И ТекущаяСтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				ОбновитьДанныеОВложении(ТекущаяСтрокаДерева);
				ТекущаяСтрокаДерева.ИмяРеквизита = "ПрисоединенныйФайл";
				СменитьСтраницуЭД(Элементы, Элементы.СтраницаПрисоединенныйФайл);
			Иначе
				СменитьСтраницуЭД(Элементы, Элементы.СтраницаОшибкаФормированияПредставления);
			КонецЕсли;
		Иначе 
			Если РезультатВыполнения.Свойство("КонтекстОперации") Тогда
				КонтекстОперации = РезультатВыполнения.КонтекстОперации;
			КонецЕсли;
			ПредставлениеЭлектронногоДокумента = РезультатВыполнения.ПредставлениеФайлаЭлектронногоДокумента;
			Если ПредставлениеЭлектронногоДокумента = Неопределено Тогда
				СменитьСтраницуЭД(Элементы, Элементы.СтраницаОшибкаФормированияПредставления);
			Иначе 
				Если ПустаяСтрока(ТекущаяСтрокаДерева.ИмяРеквизита) Тогда
					ОбменСКонтрагентамиСлужебный.СоздатьРеквизитыИЭлементыДляПредставленияФайлаЭлектронногоДокумента(
					ЭтотОбъект, ТекущаяСтрокаДерева);
				КонецЕсли;
				ЭтотОбъект[ТекущаяСтрокаДерева.ИмяРеквизита] = ПредставлениеЭлектронногоДокумента;
				СменитьСтраницуЭД(Элементы, Элементы["Страница" + ТекущаяСтрокаДерева.ИмяРеквизита]);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		ФормированиеПредставления = ДлительнаяОперация;
		Элементы.ДеревоПодчиненныеЭД.Доступность = Ложь;
		СменитьСтраницуЭД(Элементы, Элементы.СтраницаОжидание);
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		СменитьСтраницуЭД(Элементы, Элементы.СтраницаОшибкаФормированияПредставления);
	ИначеЕсли ДлительнаяОперация.Статус = "Отменено" Тогда
		СменитьСтраницуЭД(Элементы, Элементы.СтраницаОшибкаФормированияПредставления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОВложении(ТекущаяСтрокаДерева)
	
	ПрисоединенныйФайлРасширение  = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ТекущаяСтрокаДерева.Расширение);
	ПрисоединенныйФайлИмяФайла    = СокрЛП(ТекущаяСтрокаДерева.ИмяФайла) + "." + ПрисоединенныйФайлРасширение;
	ПрисоединенныйФайлИмяФайлаБезРасширения = СокрЛП(ТекущаяСтрокаДерева.ИмяФайла);
	ПрисоединенныйФайлПиктограмма = 0;
	Элементы.ТекстВложение.Ширина = СтрДлина(ПрисоединенныйФайлИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента()
	
	Если ФормированиеПредставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьПредставлениеФайлаЭДПослеВыполненияДлительнойОперации", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Вставить("ВыводитьОкноОжидания", Ложь);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФормированиеПредставления, Оповещение, ПараметрыОжидания);
	ФормированиеПредставления = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредставлениеФайлаЭДПослеВыполненияДлительнойОперации(Результат, Контекст) Экспорт
	
	ВывестиПредставлениеФайлаЭлектронногоДокумента(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОтраженияВУчете()
	
	Идентификаторы = ПолучитьИдентификаторы(ПрисоединенныйФайлСсылка);
	
	СвойстваФайлаЭД = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	Организация = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
		СвойстваФайлаЭД.ДокументДО, "Организация");
	Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
		СвойстваФайлаЭД.ДокументДО, "Контрагент");
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьНастройкуОтраженияВУчете(Организация, Контрагент,
		Идентификаторы.ПолучательЭД, Идентификаторы.ОтправительЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОбновлениеСостоянияЭД()
	
	ВыполнитьОбработкуОповещенияНаСервере();
	ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭДО()
	
	СвойстваФайлаЭД = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объект", СвойстваФайлаЭД.ДокументДО);
	ПараметрыОбработчика.Вставить("ПодписатьЭД", Истина);
	ПараметрыОбработчика.Вставить("НаправлениеЭД", СвойстваФайлаЭД.НаправлениеЭД);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСЭПКлиент.Подписать(СвойстваФайлаЭД.ДокументДО, 
		?(ЗначениеЗаполнено(ИдентификаторФормыВладельца), 
			ИдентификаторФормыВладельца, 
			УникальныйИдентификатор), 
		ОбработчикЗавершения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВторойТитулДокумента(ПервыйТитул)
	
	Возврат ОбменСКонтрагентамиСлужебный.ВторойТитулДокумента(ПервыйТитул);
	
КонецФункции

&НаСервере
Процедура ИзменитьВидимостьДоступностьНаСервере()
	
	СвойстваФайлаЭД = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	СвойстваДокументаПоЭДО = 
		ОбменСКонтрагентамиДОВызовСервера.ПолучитьПризнакиДокументаПоЭДО(СвойстваФайлаЭД.ДокументДО, СсылкаНаМассивОтпечатков);
	
	ЕстьПравоОбработкиЭД = ОбменСКонтрагентамиСлужебный.ЕстьПравоОбработкиЭД(Ложь);
	
	ЕстьВозможностьПодписания = ЕстьПравоОбработкиЭД И СвойстваДокументаПоЭДО.ЕстьДоступныеСертификаты;
	МожноАннулироватьЭтотЭД = ЕстьПравоОбработкиЭД И СвойстваДокументаПоЭДО.МожноАннулироватьЭтотЭД;
	МожноОтклонитьЭтотЭД = ЕстьПравоОбработкиЭД И ЕстьВозможностьПодписания И СвойстваДокументаПоЭДО.МожноОтклонитьЭтотЭД;
	ЭДОЗакрыт = ОбменСКонтрагентамиДОВызовСервера.ДОЗакрытПринудительно(СвойстваФайлаЭД.ДокументДО);
	ДоступнаКорректировкаЭД = СвойстваДокументаПоЭДО.ДоступнаКорректировкаЭД;
	
	СостояниеПоЭДО = ОбменСКонтрагентамиДОВызовСервера.ДанныеСостоянияДокументаПоЭДО(СвойстваФайлаЭД.ДокументДО);	
	ЭДОЗавершен = СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОбменЗавершен
		Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОбменЗавершенСИсправлением;
	
	СтатусЭД = СвойстваДокументаПоЭДО.СтатусЭД;
	СтатусОтклонен = ОбменСКонтрагентамиСлужебный.ЭДОтклонен(СтатусЭД);
		
	Элементы.КомандаЖурналСобытийЭДО.Доступность = ЕстьПравоОбработкиЭД;
	Элементы.КомандаПодписать.Видимость = Ложь;
	Элементы.КомандаПринять.Видимость = Ложь;
	Элементы.КомандаОтклонить.Видимость = Ложь;
	
	Элементы.СтраницаСтатусов.Видимость = Ложь;
	Элементы.КомандаАннулировать.Доступность = Ложь;
	Элементы.КомандаАннулировать.Видимость = Элементы.КомандаАннулировать.Доступность;
	Элементы.ГруппаКомандАннулирование.Видимость = Ложь;
	Элементы.КомандаЗавершить.Доступность = Не СвойстваДокументаПоЭДО.ДОСФЗавершен;
	Элементы.КомандаЗавершить.Видимость = СвойстваДокументаПоЭДО.ЭДСчетФактура И Элементы.КомандаЗавершить.Доступность;
	
	Если Не СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Элементы.КомандаПодписать.Видимость = ЕстьВозможностьПодписания И Не ЭДОЗавершен;
		Элементы.КомандаПодписать.Доступность = 
			(Не СтатусОтклонен И Не ЭДОЗакрыт И СтатусЭД = Перечисления.СтатусыЭД.Сформирован)
				Или (Не СвойстваФайлаЭД.ДокументПодписанНами
						И (Не ЗначениеЗаполнено(СостояниеПоЭДО) Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.НеСформирован));
		
	Иначе
		
		Элементы.КомандаПринять.Видимость = 
			Не (СтатусОтклонен Или ЭДОЗакрыт Или ЭДОЗавершен) 
			И Не СвойстваДокументаПоЭДО.ЕстьОтправленноеУведомление
			И ЕстьВозможностьПодписания;
			
		Элементы.КомандаПринять.Доступность = 
			Не (СтатусОтклонен Или ЭДОЗакрыт Или ЭДОЗавершен)
			И (СтатусЭД = Перечисления.СтатусыЭД.Получен
				Или СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				Или СтатусЭД = Перечисления.СтатусыЭД.Подписан)
			И Не (СвойстваДокументаПоЭДО.ВторойТитулПодписан 
					Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку);
					
		Элементы.КомандаОтклонить.Видимость = 
			(МожноОтклонитьЭтотЭД И Не (СтатусОтклонен Или ЭДОЗакрыт Или ЭДОЗавершен)) 
				И Не СвойстваДокументаПоЭДО.ЕстьОтправленноеУведомление
				И Не (СвойстваДокументаПоЭДО.ВторойТитулПодписан 
					Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ПоставленВОчередьНаОтправку);
					
		Элементы.КомандаОтклонить.Доступность = Элементы.КомандаОтклонить.Видимость;
						
		Если Не ДоступнаКорректировкаЭД Тогда
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Запросить уточнение по электронному документу'");
			Элементы.КомандаОтклонить.Картинка = БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		КонецЕсли;
		
	КонецЕсли;
	
	ПричиныОтклонения.Очистить();
	Если СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.Отклонен
		Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОтклоненПолучателем 
		Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ОжидаетсяИсправление
		Или СостояниеПоЭДО = Перечисления.СостоянияВерсийЭДДО.ТребуетсяУточнитьДокумент Тогда
		
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = СвойстваФайлаЭД.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Если СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Ошибка обмена'");
		КонецЕсли;
		
	ИначеЕсли ЭДОАннулированИлиВПроцессе() Тогда
		
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = СвойстваФайлаЭД.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Причина аннулирования:'");
		Элементы.КомандаОтклонить.Доступность = Ложь;
		Если СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ СвойстваФайлаЭД.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ ЗначениеЗаполнено(СвойстваФайлаЭД.ЭлектронныйДокументВладелец)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваФайлаЭД.ЭлектронныйДокументВладелец, "СтатусЭД") = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			
			Элементы.ГруппаКомандАннулирование.Видимость = Истина;
			Элементы.КомандаАннулировать.Доступность = Ложь;
		КонецЕсли;
		
	ИначеЕсли АннулированиеОтклонено() Тогда
		
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = СвойстваФайлаЭД.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Причина отказа от аннулирования:'");
		
	КонецЕсли;
				
	Если СвойстваДокументаПоЭДО.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату 
		Или СвойстваДокументаПоЭДО.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		
		Элементы.КомандаОтображатьБанковскиеРеквизиты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭП(Отпечатки = Неопределено, ДоступныеОтпечатки = Неопределено)
	
	Если Отпечатки <> Неопределено Тогда
		ДоступныеОтпечатки = ОбменСКонтрагентамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(Отпечатки).ВыгрузитьКолонку("Отпечаток"); 
	КонецЕсли;
	
	ТаблицаВременная = РеквизитФормыВЗначение("ТаблицаЭП");
	ТаблицаВременная.Очистить();
	
	ЭлектронныеПодписи = ОбменСКонтрагентамиСлужебный.УстановленныеПодписи(ПрисоединенныйФайлСсылка);
	
	Для Каждого Подпись Из ЭлектронныеПодписи Цикл
		
		НоваяСтрока = ТаблицаВременная.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Подпись);
		
		ЗаполнитьСтатусПодписи(НоваяСтрока, Подпись);
		НоваяСтрока.НомерСтроки = ТаблицаВременная.Количество();
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаВременная, "ТаблицаЭП");
	
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.СтраницаПодписиИСтатусы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подписи %1'"), 
			?(ТаблицаВременная.Количество() = 0, "", "(" + ТаблицаВременная.Количество() + ") "));
	КонецЕсли;
		
	Если ТаблицаЭП.НайтиСтроки(Новый Структура("ПодписьВерна", Ложь)).Количество() = 0 Тогда
		Элементы.СтраницаПодписиИСтатусы.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	ЗаполнитьДеревоПодчиненныеЭДНаСервере();
	
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"Ссылка", ИдентификаторТекущейСтроки, ДеревоПодчиненныеЭД.ПолучитьЭлементы(), ПрисоединенныйФайлСсылка, Ложь);
	Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока = ИдентификаторТекущейСтроки;
	
	ЗаполнитьТаблицуЭП();
	ПерезаполнитьКомментарии();
	ИзменитьВидимостьДоступностьНаСервере();
	
	ПоказатьПредставлениеФайлаЭлектронногоДокумента(
		ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки), Ложь);
		
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	ДвоичныеДанныеСертификата = ТаблицаЭП[НомерСтроки-1].Сертификат;
	СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьДополнительнойИнформации()
	
	ПоказатьПредставлениеФайлаЭлектронногоДокумента(
		ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки), Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзНастроекНаСервере()
	
	ОтключитьВыводДопДанных     = Истина;
	ОтключитьВыводКопияВерна    = Истина;
	ВыводитьБанковскиеРеквизиты = Ложь;
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.ОбменСКонтрагентами.Форма.ФормаПросмотраЭДДО/ТекущиеДанные");
	Если Настройки <> Неопределено Тогда
		Если Настройки.Получить("ОтключитьВыводДопДанных") <> Неопределено Тогда
			ОтключитьВыводДопДанных = Настройки.Получить("ОтключитьВыводДопДанных");
		КонецЕсли;
		Если Настройки.Получить("ОтключитьВыводКопияВерна") <> Неопределено Тогда
			ОтключитьВыводКопияВерна = Настройки.Получить("ОтключитьВыводКопияВерна");
		КонецЕсли;
		Если Не Настройки.Получить("ВыводитьБанковскиеРеквизиты") = Неопределено Тогда
			ВыводитьБанковскиеРеквизиты = Настройки.Получить("ВыводитьБанковскиеРеквизиты");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = НЕ ОтключитьВыводДопДанных;
	Элементы.КомандаОтображатьКопияВерна.Пометка               = НЕ ОтключитьВыводКопияВерна;
	Элементы.КомандаОтображатьБанковскиеРеквизиты.Пометка      = ВыводитьБанковскиеРеквизиты;
	
КонецПроцедуры

#Область ЗаполнениеДереваДокументов

&НаСервере
Процедура СформироватьДеревоДокументов()
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоПодчиненныеЭД");
	
	ДанныеДокумента = ПолучитьДанныеЭлектронныхДокументов(ОбъектДокументооборот);
	
	Если Не ДанныеДокумента.Количество() Тогда
		ДанныеДокумента = ПолучитьДанныеПрисоединенныхФайлов(ОбъектДокументооборот);
	КонецЕсли;
	
	Если Не ДанныеДокумента.Количество() Тогда
		Возврат
	КонецЕсли;
	
	СтрокаДерева = ДеревоОбъект.Строки.Добавить();
	ЗаполнитьСтрокуДерева(СтрокаДерева, ДанныеДокумента[0]);
	СтрокаДерева.АктуальныйЭД = Истина;
	
	ЗаполнитьВетвьДерева(СтрокаДерева, ОбъектДокументооборот);
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоПодчиненныеЭД");
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВетвьДерева(ВетвьДерева, Документ)
	
	СвязанныеДокументы = ПолучитьСвязанныеДокументы(ВетвьДерева.ДокументДО);
	ДанныеСвязанныхДокументов = ПолучитьДанныеЭлектронныхДокументов(СвязанныеДокументы);
	
	Для Каждого ДанныеДокумента Из ДанныеСвязанныхДокументов Цикл
		Если ДокументИмеетсяСредиРодителей(ВетвьДерева, ДанныеДокумента.ДокументДО) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева = ВетвьДерева.Строки.Добавить();
		ЗаполнитьСтрокуДерева(СтрокаДерева, ДанныеДокумента);
		
		ЗаполнитьВетвьДерева(СтрокаДерева, ДанныеДокумента.ДокументДО);
	КонецЦикла;
	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтрокуДерева(СтрокаДерева, Данные)
	
	ЗаполнитьЗначенияСвойств(СтрокаДерева, Данные);
	
	ОписаниеСостоянияЭДО = ОбменСКонтрагентамиДОСервер.ПолучитьОписаниеСостоянияЭДО(
		Данные.ДокументДО, Данные.ЭтоАннулирование);
	СтрокаДерева.СостояниеЭД = ОписаниеСостоянияЭДО.СостояниеСНашейСтороны;
	СтрокаДерева.ДатаИзмененияСтатусаЭД = ОписаниеСостоянияЭДО.ДатаУстановкиСостояния;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументИмеетсяСредиРодителей(ВетвьДерева, Документ)
	
	ТекущийРодитель = ВетвьДерева;
	Пока Не ТекущийРодитель = Неопределено Цикл
		Если ТекущийРодитель.ДокументДО = Документ Тогда
			Возврат Истина;
		КонецЕсли;
		
		ТекущийРодитель = ТекущийРодитель.Родитель;		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвязанныеДокументы(Документ) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиДокументов.СвязанныйДокумент КАК Документ
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ = &Документ
		|	И НЕ СвязиДокументов.СвязанныйДокумент.ПометкаУдаления
		|	И СвязиДокументов.ТипСвязи В (ЗНАЧЕНИЕ(Справочник.ТипыСвязей.Корректировка), ЗНАЧЕНИЕ(Справочник.ТипыСвязей.КорректировкаК), ЗНАЧЕНИЕ(Справочник.ТипыСвязей.Исправление), ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ИсправлениеК))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДокументыАннулирования.Документ
		|ИЗ
		|	РегистрСведений.ДокументыАннулирования КАК ДокументыАннулирования
		|ГДЕ
		|	ДокументыАннулирования.СоглашениеОбАннулировании = &Документ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДокументыАннулирования.СоглашениеОбАннулировании
		|ИЗ
		|	РегистрСведений.ДокументыАннулирования КАК ДокументыАннулирования
		|ГДЕ
		|	ДокументыАннулирования.Документ = &Документ";
		
	Запрос.УстановитьПараметр("Документ", Документ);
	
	ДокументыПоСвязям = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	
	Возврат ДокументыПоСвязям;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЭлектронныхДокументов(Документ) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК ДокументДО,
		|	ВерсииФайлов.Ссылка КАК Версия
		|ПОМЕСТИТЬ ВерсииФайловДокумента
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ВерсииФайлов.Владелец = Файлы.Ссылка
		|			И ВерсииФайлов.Ссылка = Файлы.ТекущаяВерсия
		|ГДЕ
		|	Файлы.ВладелецФайла В(&Документ)
		|	И НЕ Файлы.ПометкаУдаления
		|	И НЕ ВерсииФайлов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ВерсииФайлов.ДокументДО) КАК Представление,
		|	ВерсииФайлов.ДокументДО КАК ДокументДО,
		|	ВерсииФайлов.Версия КАК Версия,
		|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
		|	СостоянияЭД.ЭлектронныйДокумент.ВидЭД КАК ВидЭД,
		|	""ТабличныйДокументФайлаОтправителя"" КАК ИмяРеквизита,
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭД,
		|	ЭДПрисоединенныеФайлы.ПометкаУдаления КАК ПометкаУдаления,
		|	СостоянияЭД.ЭлектронныйДокумент.ПричинаОтклонения КАК ПричинаОтклонения,
		|	СтроныЭДО.Подписан КАК ДокументПодписанНами,
		|	ВЫБОР
		|		КОГДА СостоянияЭД.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|			ТОГДА ВЫРАЗИТЬ(СостоянияЭД.ЭлектронныйДокумент КАК Документ.ЭлектронныйДокументВходящий).ТребуетсяПодтверждение
		|		КОГДА СостоянияЭД.ЭлектронныйДокумент ССЫЛКА Документ.ЭлектронныйДокументИсходящий
		|			ТОГДА ВЫРАЗИТЬ(СостоянияЭД.ЭлектронныйДокумент КАК Документ.ЭлектронныйДокументИсходящий).ТребуетсяПодтверждение
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяПодтверждение,
		|	ЛОЖЬ КАК ЭтоАннулирование
		|ИЗ
		|	ВерсииФайловДокумента КАК ВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО ВерсииФайлов.Версия = СостоянияЭД.СсылкаНаОбъект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|			И (НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления)
		|			И (НЕ СостоянияЭД.ЭлектронныйДокумент В (&ПустоеЗначениеЭД))
		|			И (ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.Ссылка ЕСТЬ NULL)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Стороны КАК СтроныЭДО
		|		ПО ВерсииФайлов.ДокументДО = СтроныЭДО.Ссылка
		|			И (ТИПЗНАЧЕНИЯ(СтроныЭДО.Сторона) = ТИП(Справочник.Организации))";
		
	ПустоеЗначениеЭД = Новый Массив;
	ПустоеЗначениеЭД.Добавить(Неопределено);
	ПустоеЗначениеЭД.Добавить(Документы.ЭлектронныйДокументВходящий.ПустаяСсылка());
	ПустоеЗначениеЭД.Добавить(Документы.ЭлектронныйДокументИсходящий.ПустаяСсылка());
	ПустоеЗначениеЭД.Добавить(Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ПустоеЗначениеЭД", ПустоеЗначениеЭД);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЭлектронныхДокументов = Запрос.Выполнить().Выгрузить();
	
	ДанныеПредложенийОбАннулировании = ДанныеПредложенийОбАннулировании(Документ);
	
	Для Каждого СтрАннулирования Из ДанныеПредложенийОбАннулировании Цикл
		НоваяСтрокаЭД = ДанныеЭлектронныхДокументов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЭД, СтрАннулирования);
	КонецЦикла;
	
	Возврат ДанныеЭлектронныхДокументов;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПрисоединенныхФайлов(Документ)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка КАК Версия,
		|	ПРЕДСТАВЛЕНИЕ(Файлы.ВладелецФайла) КАК Представление,
		|	Файлы.ВладелецФайла КАК ДокументДО,
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	НЕОПРЕДЕЛЕНО КАК СтатусЭД,
		|	НЕОПРЕДЕЛЕНО КАК НаправлениеЭД,
		|	НЕОПРЕДЕЛЕНО КАК ВидЭД,
		|	""ТабличныйДокументФайлаОтправителя"" КАК ИмяРеквизита,
		|	НЕОПРЕДЕЛЕНО КАК ТипЭД,
		|	ЛОЖЬ КАК ПометкаУдаления,
		|	"""" КАК ПричинаОтклонения,
		|	ЛОЖЬ КАК ДокументПодписанНами,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(256)) КАК СсылкаНаДвоичныеДанныеФайла
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ВерсииФайлов.Владелец = Файлы.Ссылка
		|			И ВерсииФайлов.Ссылка = Файлы.ТекущаяВерсия
		|ГДЕ
		|	Файлы.ВладелецФайла В(&Документ)
		|	И НЕ Файлы.ПометкаУдаления
		|	И НЕ ВерсииФайлов.ПометкаУдаления";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПрисоединенныхФайлов = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ДанныеПрисоединенныхФайлов.Количество() Тогда
		Возврат ДанныеПрисоединенныхФайлов;
	КонецЕсли;
	
	ПараметрыВерсии = ДанныеПрисоединенныхФайлов[0];
	
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(
		РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(ПараметрыВерсии.Версия),
		УникальныйИдентификатор);
		
	ПараметрыЧтенияЭД = Новый Структура;		
	ПараметрыЧтенияЭД.Вставить("ФайлДанныхСсылка", СсылкаНаДвоичныеДанныеФайла); 
	ПараметрыЧтенияЭД.Вставить("ВыводитьСообщенияОбОшибках", Ложь);
				
	СтруктураДанныхЭД = ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИзФайла(ПараметрыЧтенияЭД);
	Если Не СтруктураДанныхЭД.ЭДПрочитан Тогда
		ДанныеПрисоединенныхФайлов.Очистить();
		Возврат ДанныеПрисоединенныхФайлов;
	КонецЕсли;
	
	ПараметрыВерсии.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
	ПараметрыВерсии.ВидЭД = СтруктураДанныхЭД.ВидЭД;
	ПараметрыВерсии.ТипЭД = СтруктураДанныхЭД.ТипЭлементаВерсииЭД;
	ПараметрыВерсии.СсылкаНаДвоичныеДанныеФайла = СсылкаНаДвоичныеДанныеФайла;
	
	Возврат ДанныеПрисоединенныхФайлов;
		
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеПредложенийОбАннулировании(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыАннулирования.ЭД КАК ЭД,
		|	ДокументыАннулирования.Документ КАК Документ,
		|	ДокументыАннулирования.СоглашениеОбАннулировании КАК СоглашениеОбАннулировании,
		|	ДокументыАннулирования.ФайлСоглашенияОбАннулировании КАК ФайлСоглашенияОбАннулировании
		|ПОМЕСТИТЬ ДанныеАннулирования
		|ИЗ
		|	РегистрСведений.ДокументыАннулирования КАК ДокументыАннулирования
		|ГДЕ
		|	ДокументыАннулирования.СоглашениеОбАннулировании В(&Документ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ДанныеАннулирования.СоглашениеОбАннулировании) КАК Представление,
		|	ДанныеАннулирования.СоглашениеОбАннулировании КАК ДокументДО,
		|	ДанныеАннулирования.ФайлСоглашенияОбАннулировании.ТекущаяВерсия КАК Версия,
		|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
		|	ДанныеАннулирования.ЭД.ВидЭД КАК ВидЭД,
		|	""ТабличныйДокументФайлаОтправителя"" КАК ИмяРеквизита,
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭД,
		|	ЭДПрисоединенныеФайлы.ПометкаУдаления КАК ПометкаУдаления,
		|	ДанныеАннулирования.ЭД.ПричинаОтклонения КАК ПричинаОтклонения,
		|	ЛОЖЬ КАК ДокументПодписанНами,
		|	ДанныеАннулирования.ЭД.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ИСТИНА КАК ЭтоАннулирование
		|ИЗ
		|	ДанныеАннулирования КАК ДанныеАннулирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО ДанныеАннулирования.ЭД = ЭДПрисоединенныеФайлы.ВладелецФайла
		|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА))";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьИдентификаторы(ПрисоединенныйФайлСсылка)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка, "ОтправительЭД, ПолучательЭД");
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура СменитьСтраницуЭД(Элементы, НоваяСтраница)
	
	#Если МобильныйКлиент Тогда
		Возврат;
	#КонецЕсли
	
	#Если Сервер Тогда
		Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			Элементы.СтраницыЭД.ТекущаяСтраница = НоваяСтраница;
		КонецЕсли;
	#Иначе
		Элементы.СтраницыЭД.ТекущаяСтраница = НоваяСтраница;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти
